<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-07-04T13:10:06-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Algebra, Geometry and Applications of Optimization</title><subtitle>Algebra, Geometry and Applications of Optimization</subtitle><author><name>Ayush Bharadwaj</name></author><entry><title type="html">Parametric Mixed-Integer Programming for Unit Commitment in Power Systems</title><link href="http://localhost:4000/unit-commitment-problem/" rel="alternate" type="text/html" title="Parametric Mixed-Integer Programming for Unit Commitment in Power Systems" /><published>2023-06-05T00:00:00-07:00</published><updated>2023-06-05T00:00:00-07:00</updated><id>http://localhost:4000/unit-commitment-problem</id><content type="html" xml:base="http://localhost:4000/unit-commitment-problem/"><![CDATA[<p>The Unit Commitment Problem (UCP) <a href="#References">[1]</a> in power systems is the problem of scheduling the optimal number of power generating units (or simply units) to meet the total demand in each time period (or slot) of a planning horizon. The UCP is an optimization problem that aims to minimize the running costs, startup costs and shutdown costs of the units while satisfying constraints that guarantee appropriate operating conditions for the units.</p>

<hr />
<h1 id="table-of-contents">Table of Contents</h1>

<ol>
  <li>
    <p><a href="#Introduction">Introduction</a></p>
  </li>
  <li>
    <p><a href="#Example">A prototype example</a></p>
  </li>
  <li>
    <p><a href="#A_simple_economic_dispatch_model_with_LP">A simple economic dispatch model with LP</a></p>

    <p>3.1. <a href="#sensitivity_analysis_LP">Sensitivity analysis with Duality</a></p>

    <p>3.2. <a href="#parametric_sensitivity_analysis">Parametric Sensitivity Analysis</a></p>
  </li>
  <li>
    <p><a href="#A_first_MIP_formulation">A first MIP model</a></p>
  </li>
  <li>
    <p><a href="#An_MIP_model_with_startup_costs">An MIP model with startup costs</a></p>
  </li>
  <li>
    <p><a href="#An_MIP_model_with_up_and_down_time_constraints">An MIP model with up- and down-time constraints</a></p>
  </li>
  <li>
    <p><a href="#parametric_sensitivity_analysis_MIP">Parametric Sensitivity Analysis for MIP</a></p>
  </li>
  <li>
    <p><a href="#Conclusion">Conclusion</a></p>
  </li>
  <li>
    <p><a href="#References">References</a></p>
  </li>
</ol>

<h1 id="1-introduction-">1. Introduction <a class="anchor" id="Introduction"></a></h1>
<p>The Unit Commitment Problem (UCP) <a href="#References">[1]</a> in power systems is the problem of scheduling the optimal number of power generating units (or simply units) to meet the total demand in each time period (or slot) of a planning horizon. The UCP is an optimization problem that aims to minimize the running costs, startup costs and shutdown costs of the units while satisfying constraints that guarantee appropriate operating conditions for the units.</p>

<p>The UCP can be formulated in a number of ways:</p>
<ul>
  <li>combinatorial approach</li>
  <li>priority list / heuristic approach</li>
  <li>dynamic programming</li>
  <li>Lagrangian relaxation</li>
  <li><strong>Mixed Integer Programming (MIP)</strong></li>
</ul>

<p>In this article, we will consider the MIP approach since it is the state of the art for the UCP. Other approaches do not scale to any reasonable sized problem. We will consider a small but salient example [2] which has most features of a real UCP. We will start with a very relaxed (LP) model of the problem and progressively make our model more sophisticated by removing relaxations. Along the way, we will also explore post-optimality / sensitivity analysis issues in the context of Mixed Integer Programming by borrowing ideas from Linear Programming.</p>

<h1 id="2-a-prototype-example-">2. A prototype example <a class="anchor" id="Example"></a></h1>
<p>We are given three units -  A, B and C - with their corresponding costs and operational constraints. The hourly demand  profile over a three-period planning horizon is also given. We want to find the optimal schedule that minimizes the total cost, meets the hourly demand requirements and satisfies the operational constraints.</p>

<table>
  <thead>
    <tr>
      <th>Unit</th>
      <th>P_min (MW)</th>
      <th>P_max (MW)</th>
      <th>Min up (hr)</th>
      <th>Min down (hr)</th>
      <th>No-load cost ($)</th>
      <th>Marginal cost ($/MWh)</th>
      <th>Startup cost ($)</th>
      <th>Initial status</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>A</td>
      <td>150</td>
      <td>250</td>
      <td>3</td>
      <td>3</td>
      <td>0</td>
      <td>10</td>
      <td>1000</td>
      <td>ON</td>
    </tr>
    <tr>
      <td>B</td>
      <td>50</td>
      <td>100</td>
      <td>2</td>
      <td>1</td>
      <td>0</td>
      <td>12</td>
      <td>600</td>
      <td>OFF</td>
    </tr>
    <tr>
      <td>C</td>
      <td>10</td>
      <td>50</td>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>20</td>
      <td>100</td>
      <td>OFF</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th>Period</th>
      <th>Demand (MW)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>150</td>
    </tr>
    <tr>
      <td>2</td>
      <td>300</td>
    </tr>
    <tr>
      <td>3</td>
      <td>200</td>
    </tr>
  </tbody>
</table>

<p>We must call out the features of a real-life UCP that our example does NOT capture.</p>
<ul>
  <li>Ignores unit ramp-up constraints</li>
  <li>Ignores reserve constraints and costs of reserves.</li>
  <li>Ignores environmental constraints.</li>
  <li>Ignores transmission network constraints.</li>
  <li>Assumes marginal costs remain constant over the planning horizon.</li>
  <li>Assumes constant startup costs. (Startup costs are often modeled by a piecewise linear approximation of an exponential function of time)</li>
  <li>Assumes zero cool-down costs</li>
  <li>Assumes zero No-load costs</li>
</ul>

<p>In a real-life UCP some of the above features can cause non-trivial complications. However, our simplified example will serve us well for illustrative purposes.</p>

<h1 id="3-a-simple-economic-dispatch-model-with-lp-">3. A simple economic dispatch model with LP <a class="anchor" id="A_simple_economic_dispatch_model_with_LP"></a></h1>

<p>Let us start by making some relaxations to our problem (in subsequent sections, we will strike out these relaxations one by one).</p>
<ol>
  <li>All units are running and available at all times (i.e. we don’t have the choice to turn a unit ON/OFF.)</li>
  <li>Startup costs are ignored.</li>
  <li>Minimum up- and down-time constraints do not apply.</li>
</ol>

<p>Now, we are interested in finding the optimal power output of each unit in each time period that minimizes the total marginal cost.</p>

<p>Parameters:</p>

\[c_j := \text{Marginal cost of running unit  j (\$/MWh)}\]

\[D_t := \text{Total demand in time slot t (MW)}\]

\[P_{j, min} := \text{Minimum recommended power output for unit j (MW)}\]

\[P_{j, max} := \text{Maximum recommended power output for unit j (MW)}\]

\[J := \text{Indexed set of all generators (a.k.a. units)}\]

\[T := \text{Indexed set of all time slots/periods (a.k.a. planning horizon)}\]

<p>Variables:</p>

\[p_{j,t} := \text{Power output of unit j in time slot t (MW)}\]

<p>Since we are only considering the marginal costs of running the units, the objective is pretty straightforward</p>

\[\text{minimize} \sum_{t\in T} \sum_{j \in J} c_j p_{j, t}\]

<p>There are two sets of constraints we need to consider. The power output of each generating unit must be within the recommended output range. And the total power output of all generating units must satisfy the demand in each time period. We can write these constraints as follows:</p>

\[P_{j, min} \le p_{j, t} \le P_{j, max}\ \text{(Output Range)}\\
\sum_{j \in J} p_{j, t} \ge D_t\ \text{(Demand)}\\\]

<p>We get the following model</p>

\[\text{minimize} \sum_{t\in T} \sum_{j \in J} c_j p_{j, t}\\\tag{LP}
     \text{s.t.}\quad P_{j, min} \le p_{j, t} \le P_{j, max}\\
     \sum_{j \in J} p_{j, t} \ge D_t\]

<p>Let us solve (LP) using <code class="language-plaintext highlighter-rouge">cvxpy</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">cvxpy</span> <span class="k">as</span> <span class="n">cp</span>
<span class="kn">import</span> <span class="nn">cvxopt</span> <span class="k">as</span> <span class="n">cv</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="kn">from</span> <span class="nn">solver.utils</span> <span class="kn">import</span> <span class="n">get_result_summary</span><span class="p">,</span> <span class="n">prettify</span>

<span class="c1"># parameters
</span><span class="n">cA</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Parameter</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">"cA"</span><span class="p">)</span>
<span class="n">cB</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Parameter</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">"cB"</span><span class="p">)</span>
<span class="n">cC</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Parameter</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">"cC"</span><span class="p">)</span>

<span class="n">p_min_A</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Parameter</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">"p_min_A"</span><span class="p">)</span>
<span class="n">p_min_B</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Parameter</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">"p_min_B"</span><span class="p">)</span>
<span class="n">p_min_C</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Parameter</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">"p_min_C"</span><span class="p">)</span>

<span class="n">p_max_A</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Parameter</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">"p_max_A"</span><span class="p">)</span>
<span class="n">p_max_B</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Parameter</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">"p_max_B"</span><span class="p">)</span>
<span class="n">p_max_C</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Parameter</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">"p_max_C"</span><span class="p">)</span>

<span class="n">D1</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Parameter</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">"D1"</span><span class="p">)</span>
<span class="n">D2</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Parameter</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">"D2"</span><span class="p">)</span>
<span class="n">D3</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Parameter</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">"D3"</span><span class="p">)</span>

<span class="c1"># set param values
</span><span class="n">cA</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="mi">10</span>
<span class="n">cB</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="mi">12</span>
<span class="n">cC</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="mi">20</span>

<span class="n">p_min_A</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="mi">150</span>
<span class="n">p_min_B</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="mi">50</span>
<span class="n">p_min_C</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="mi">10</span>

<span class="n">p_max_A</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="mi">250</span>
<span class="n">p_max_B</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="mi">100</span>
<span class="n">p_max_C</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="mi">50</span>

<span class="n">D1</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="mi">150</span>
<span class="n">D2</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="mi">300</span>
<span class="n">D3</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="mi">200</span>

<span class="n">T</span> <span class="o">=</span> <span class="mi">3</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#variables
</span><span class="n">pA1</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">nonneg</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'pA1'</span><span class="p">)</span>
<span class="n">pA2</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">nonneg</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'pA2'</span><span class="p">)</span>
<span class="n">pA3</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">nonneg</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'pA3'</span><span class="p">)</span>

<span class="n">pB1</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">nonneg</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'pB1'</span><span class="p">)</span>
<span class="n">pB2</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">nonneg</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'pB2'</span><span class="p">)</span>
<span class="n">pB3</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">nonneg</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'pB3'</span><span class="p">)</span>

<span class="n">pC1</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">nonneg</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'pC1'</span><span class="p">)</span>
<span class="n">pC2</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">nonneg</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'pC2'</span><span class="p">)</span>
<span class="n">pC3</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">nonneg</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'pC3'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">obj_LP</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Minimize</span><span class="p">(</span>
    <span class="n">cA</span> <span class="o">*</span> <span class="p">(</span><span class="n">pA1</span> <span class="o">+</span> <span class="n">pA2</span> <span class="o">+</span> <span class="n">pA3</span><span class="p">)</span> <span class="o">+</span>
    <span class="n">cB</span> <span class="o">*</span> <span class="p">(</span><span class="n">pB1</span> <span class="o">+</span> <span class="n">pB2</span> <span class="o">+</span> <span class="n">pB3</span><span class="p">)</span> <span class="o">+</span>
    <span class="n">cC</span> <span class="o">*</span> <span class="p">(</span><span class="n">pC1</span> <span class="o">+</span> <span class="n">pC2</span> <span class="o">+</span> <span class="n">pC3</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="n">obj_LP</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>minimize cA @ (pA1 + pA2 + pA3) + cB @ (pB1 + pB2 + pB3) + cC @ (pC1 + pC2 + pC3)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">LP_output_range_cons</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">pA1</span> <span class="o">&gt;=</span> <span class="n">p_min_A</span><span class="p">,</span>
    <span class="n">pA1</span> <span class="o">&lt;=</span> <span class="n">p_max_A</span><span class="p">,</span>
    <span class="n">pA2</span> <span class="o">&gt;=</span> <span class="n">p_min_A</span><span class="p">,</span>
    <span class="n">pA2</span> <span class="o">&lt;=</span> <span class="n">p_max_A</span><span class="p">,</span>
    <span class="n">pA3</span> <span class="o">&gt;=</span> <span class="n">p_min_A</span><span class="p">,</span>
    <span class="n">pA3</span> <span class="o">&lt;=</span> <span class="n">p_max_A</span><span class="p">,</span>
    
    <span class="n">pB1</span> <span class="o">&gt;=</span> <span class="n">p_min_B</span><span class="p">,</span>
    <span class="n">pB1</span> <span class="o">&lt;=</span> <span class="n">p_max_B</span><span class="p">,</span>
    <span class="n">pB2</span> <span class="o">&gt;=</span> <span class="n">p_min_B</span><span class="p">,</span>
    <span class="n">pB2</span> <span class="o">&lt;=</span> <span class="n">p_max_B</span><span class="p">,</span>
    <span class="n">pB3</span> <span class="o">&gt;=</span> <span class="n">p_min_B</span><span class="p">,</span>
    <span class="n">pB3</span> <span class="o">&lt;=</span> <span class="n">p_max_B</span><span class="p">,</span>
    
    <span class="n">pC1</span> <span class="o">&gt;=</span> <span class="n">p_min_C</span><span class="p">,</span>
    <span class="n">pC1</span> <span class="o">&lt;=</span> <span class="n">p_max_C</span><span class="p">,</span>
    <span class="n">pC2</span> <span class="o">&gt;=</span> <span class="n">p_min_C</span><span class="p">,</span>
    <span class="n">pC2</span> <span class="o">&lt;=</span> <span class="n">p_max_C</span><span class="p">,</span>
    <span class="n">pC3</span> <span class="o">&gt;=</span> <span class="n">p_min_C</span><span class="p">,</span>
    <span class="n">pC3</span> <span class="o">&lt;=</span> <span class="n">p_max_C</span><span class="p">,</span>
<span class="p">]</span>

<span class="n">LP_demand_cons</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">pA1</span> <span class="o">+</span> <span class="n">pB1</span> <span class="o">+</span> <span class="n">pC1</span> <span class="o">&gt;=</span> <span class="n">D1</span><span class="p">,</span>
    <span class="n">pA2</span> <span class="o">+</span> <span class="n">pB2</span> <span class="o">+</span> <span class="n">pC2</span> <span class="o">&gt;=</span> <span class="n">D2</span><span class="p">,</span>
    <span class="n">pA3</span> <span class="o">+</span> <span class="n">pB3</span> <span class="o">+</span> <span class="n">pC3</span> <span class="o">&gt;=</span> <span class="n">D3</span><span class="p">,</span>
<span class="p">]</span>
 
<span class="n">cons_LP</span> <span class="o">=</span> <span class="n">LP_output_range_cons</span> <span class="o">+</span> <span class="n">LP_demand_cons</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">cons_LP</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>p_min_A &lt;= pA1
pA1 &lt;= p_max_A
p_min_A &lt;= pA2
pA2 &lt;= p_max_A
p_min_A &lt;= pA3
pA3 &lt;= p_max_A
p_min_B &lt;= pB1
pB1 &lt;= p_max_B
p_min_B &lt;= pB2
pB2 &lt;= p_max_B
p_min_B &lt;= pB3
pB3 &lt;= p_max_B
p_min_C &lt;= pC1
pC1 &lt;= p_max_C
p_min_C &lt;= pC2
pC2 &lt;= p_max_C
p_min_C &lt;= pC3
pC3 &lt;= p_max_C
D1 &lt;= pA1 + pB1 + pC1
D2 &lt;= pA2 + pB2 + pC2
D3 &lt;= pA3 + pB3 + pC3
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">LP</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Problem</span><span class="p">(</span><span class="n">obj_LP</span><span class="p">,</span> <span class="n">cons_LP</span><span class="p">)</span>
<span class="n">LP</span><span class="p">.</span><span class="n">solve</span><span class="p">();</span>
<span class="n">summary_LP</span> <span class="o">=</span> <span class="n">get_result_summary</span><span class="p">(</span><span class="n">LP</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">summary_LP</span><span class="p">[</span><span class="s">'status'</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">summary_LP</span><span class="p">[</span><span class="s">'optimal_value'</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>optimal
7799.999998684703
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">prettify</span><span class="p">(</span><span class="n">summary_LP</span><span class="p">[</span><span class="s">'optimal_solution'</span><span class="p">])</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>variable</th>
      <th>value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>pA1</td>
      <td>150.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>pA2</td>
      <td>240.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>pA3</td>
      <td>150.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>pB1</td>
      <td>50.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>pB2</td>
      <td>50.0</td>
    </tr>
    <tr>
      <th>5</th>
      <td>pB3</td>
      <td>50.0</td>
    </tr>
    <tr>
      <th>6</th>
      <td>pC1</td>
      <td>10.0</td>
    </tr>
    <tr>
      <th>7</th>
      <td>pC2</td>
      <td>10.0</td>
    </tr>
    <tr>
      <th>8</th>
      <td>pC3</td>
      <td>10.0</td>
    </tr>
  </tbody>
</table>
</div>

<p>The minimum marginal cost of running the three units over the horizon is <mark> $7799.99 </mark>. Also note that unit A runs at minimum capacity during periods 1 and 3. During the peak period 2, the output of unit A is increased to meet the increased demand while units B and C continue to run at minimum capacity throughout the horizon. This makes sense because units B and C have a higher marginal cost than unit A. In the next section, we will consider a model which allows us to choose which units are ON during each slot. But first, let us analyze the current solution in depth.</p>

<h3 id="31-sensitivity-analysis-using-duality-">3.1. Sensitivity analysis using Duality <a class="anchor" id="sensitivity_analysis_LP"></a></h3>

<p>For a primal-dual optimal pair $(x^<em>, y^</em>)$ for an LP, we have the following results.</p>

<p>\begin{equation}\tag{Zero duality gap}
    b^T y^* = c^T x^*
\end{equation}</p>

\[y_i^*\left[ Ax^* - b\right]_i = 0\ ,\ i=1, ..., m \tag{Complementary slackness}\]

<p>Zero duality gap implies that, whenever \(y_i^* &gt; 0\), reducing \(b_i\) will improve the optimal value. Complementary slackness implies that whenever \(y_i^* &gt; 0\), \(\left[Ax^* - b\right]_i = 0\), which implies that the \(i\)th constraint is <strong>active</strong>. Note that changing \(b_i\) will improve the optimal value only while the \(i\)th constraint is active. Reducing \(b_i\) beyond that point may not improve the optimal value any more. Next, we will identify active constraints and improve the optimal value by using the above ideas.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">print_active_constraints</span><span class="p">(</span><span class="n">constraints</span><span class="p">:</span> <span class="nb">list</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">constraint</span> <span class="ow">in</span> <span class="n">constraints</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">constraint</span><span class="p">.</span><span class="n">dual_value</span> <span class="o">&gt;</span> <span class="mf">1.0e-5</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s">'&gt; active constraint: "{}", dual_value: {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span>
                <span class="n">constraint</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="nb">round</span><span class="p">(</span><span class="n">constraint</span><span class="p">.</span><span class="n">dual_value</span><span class="p">)))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">print_active_constraints</span><span class="p">(</span><span class="n">cons_LP</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; active constraint: "p_min_A &lt;= pA1", dual_value: [10.]
&gt; active constraint: "p_min_A &lt;= pA3", dual_value: [10.]
&gt; active constraint: "p_min_B &lt;= pB1", dual_value: [12.]
&gt; active constraint: "p_min_B &lt;= pB2", dual_value: [2.]
&gt; active constraint: "p_min_B &lt;= pB3", dual_value: [12.]
&gt; active constraint: "p_min_C &lt;= pC1", dual_value: [20.]
&gt; active constraint: "p_min_C &lt;= pC2", dual_value: [10.]
&gt; active constraint: "p_min_C &lt;= pC3", dual_value: [20.]
&gt; active constraint: "D2 &lt;= pA2 + pB2 + pC2", dual_value: [10.]
</code></pre></div></div>

<p>Note that all active constraints, except the demand constraint on the last line, are lower-bound constraints on the output range of the units. In other words, by lowering the lower bound on the output range of each unit, we can reduce the total cost. More concretely, lets look at line 1 above. It says that a decrease of 1 unit in <code class="language-plaintext highlighter-rouge">p_min_A</code> will decrease the optimal cost by $10. Since, <code class="language-plaintext highlighter-rouge">p_min_A</code> appears in constraint 1 as well as constraint 2, a decrease of 1 unit in <code class="language-plaintext highlighter-rouge">p_min_A</code> will result in a total decrease of $20.00 in the total cost. Similarly, each unit of reduction in <code class="language-plaintext highlighter-rouge">p_min_B</code> will result in a total reduction of $26.00, while each unit of reduction in <code class="language-plaintext highlighter-rouge">p_min_C</code> will result in a total reduction of $50.00!</p>

<p>Lets verify the above claim for unit \(C\).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">p_min_C</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="mi">9</span> <span class="c1"># from 10
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">LP</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Problem</span><span class="p">(</span><span class="n">obj_LP</span><span class="p">,</span> <span class="n">cons_LP</span><span class="p">)</span>
<span class="n">LP</span><span class="p">.</span><span class="n">solve</span><span class="p">();</span>
<span class="n">summary_LP</span> <span class="o">=</span> <span class="n">get_result_summary</span><span class="p">(</span><span class="n">LP</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">summary_LP</span><span class="p">[</span><span class="s">'status'</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">summary_LP</span><span class="p">[</span><span class="s">'optimal_value'</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>optimal
7749.999995946553
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">prettify</span><span class="p">(</span><span class="n">summary_LP</span><span class="p">[</span><span class="s">'optimal_solution'</span><span class="p">])</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>variable</th>
      <th>value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>pA1</td>
      <td>150.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>pA2</td>
      <td>241.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>pA3</td>
      <td>150.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>pB1</td>
      <td>50.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>pB2</td>
      <td>50.0</td>
    </tr>
    <tr>
      <th>5</th>
      <td>pB3</td>
      <td>50.0</td>
    </tr>
    <tr>
      <th>6</th>
      <td>pC1</td>
      <td>9.0</td>
    </tr>
    <tr>
      <th>7</th>
      <td>pC2</td>
      <td>9.0</td>
    </tr>
    <tr>
      <th>8</th>
      <td>pC3</td>
      <td>9.0</td>
    </tr>
  </tbody>
</table>
</div>

<p>As expected, the total cost decreased from <mark>$7799.99</mark> to <mark>$7749.99</mark>! So, if we could lower the lower bound of the output range of one generating unit, that unit must be the unit C because that will give us the best marginal improvement in the total cost.</p>

<p>Let us check if the constraints related to the unit C are still active.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">print_active_constraints</span><span class="p">(</span><span class="n">cons_LP</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; active constraint: "p_min_A &lt;= pA1", dual_value: [10.]
&gt; active constraint: "p_min_A &lt;= pA3", dual_value: [10.]
&gt; active constraint: "p_min_B &lt;= pB1", dual_value: [12.]
&gt; active constraint: "p_min_B &lt;= pB2", dual_value: [2.]
&gt; active constraint: "p_min_B &lt;= pB3", dual_value: [12.]
&gt; active constraint: "p_min_C &lt;= pC1", dual_value: [20.]
&gt; active constraint: "p_min_C &lt;= pC2", dual_value: [10.]
&gt; active constraint: "p_min_C &lt;= pC3", dual_value: [20.]
&gt; active constraint: "D2 &lt;= pA2 + pB2 + pC2", dual_value: [10.]
</code></pre></div></div>

<p>As seen above, the constraints associated with <code class="language-plaintext highlighter-rouge">p_min_C</code> are <strong>still active</strong>. So, we can reduce <code class="language-plaintext highlighter-rouge">p_min_C</code> even further. Can we make it zero? Let us check.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">p_min_C</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1"># from 9
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">LP</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Problem</span><span class="p">(</span><span class="n">obj_LP</span><span class="p">,</span> <span class="n">cons_LP</span><span class="p">)</span>
<span class="n">LP</span><span class="p">.</span><span class="n">solve</span><span class="p">();</span>
<span class="n">summary_LP</span> <span class="o">=</span> <span class="n">get_result_summary</span><span class="p">(</span><span class="n">LP</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">summary_LP</span><span class="p">[</span><span class="s">'status'</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">summary_LP</span><span class="p">[</span><span class="s">'optimal_value'</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>optimal
7299.999999997212
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">print_active_constraints</span><span class="p">(</span><span class="n">cons_LP</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; active constraint: "p_min_A &lt;= pA1", dual_value: [10.]
&gt; active constraint: "pA2 &lt;= p_max_A", dual_value: [1.]
&gt; active constraint: "p_min_A &lt;= pA3", dual_value: [3.]
&gt; active constraint: "p_min_B &lt;= pB1", dual_value: [12.]
&gt; active constraint: "p_min_B &lt;= pB2", dual_value: [1.]
&gt; active constraint: "p_min_B &lt;= pB3", dual_value: [5.]
&gt; active constraint: "p_min_C &lt;= pC1", dual_value: [10.]
&gt; active constraint: "p_min_C &lt;= pC2", dual_value: [4.]
&gt; active constraint: "p_min_C &lt;= pC3", dual_value: [7.]
&gt; active constraint: "D2 &lt;= pA2 + pB2 + pC2", dual_value: [11.]
&gt; active constraint: "D3 &lt;= pA3 + pB3 + pC3", dual_value: [7.]
</code></pre></div></div>

<p>Interestingly, even after making <code class="language-plaintext highlighter-rouge">p_min_C = 0</code>, the constraints are <strong>still active</strong>, although the values of the corresponding dual variables have now changed. Also note that some new constraints have become active (see constraint 2 above).</p>

<p>Can we reduce <code class="language-plaintext highlighter-rouge">p_min_C</code> even further? In real life, assigning a negative value to <code class="language-plaintext highlighter-rouge">p_min_C</code> would not make sense. However, we will do it anyway for illustrative purposes.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">p_min_C</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> <span class="c1"># from 0
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">LP</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Problem</span><span class="p">(</span><span class="n">obj_LP</span><span class="p">,</span> <span class="n">cons_LP</span><span class="p">)</span>
<span class="n">LP</span><span class="p">.</span><span class="n">solve</span><span class="p">();</span>
<span class="n">summary_LP</span> <span class="o">=</span> <span class="n">get_result_summary</span><span class="p">(</span><span class="n">LP</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">summary_LP</span><span class="p">[</span><span class="s">'status'</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">summary_LP</span><span class="p">[</span><span class="s">'optimal_value'</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>optimal
7300.000000167821
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">print_active_constraints</span><span class="p">(</span><span class="n">cons_LP</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; active constraint: "p_min_A &lt;= pA1", dual_value: [10.]
&gt; active constraint: "pA2 &lt;= p_max_A", dual_value: [1.]
&gt; active constraint: "p_min_A &lt;= pA3", dual_value: [3.]
&gt; active constraint: "p_min_B &lt;= pB1", dual_value: [12.]
&gt; active constraint: "p_min_B &lt;= pB2", dual_value: [1.]
&gt; active constraint: "p_min_B &lt;= pB3", dual_value: [5.]
&gt; active constraint: "D2 &lt;= pA2 + pB2 + pC2", dual_value: [11.]
&gt; active constraint: "D3 &lt;= pA3 + pB3 + pC3", dual_value: [7.]
</code></pre></div></div>

<p>At last, the constraints related to <code class="language-plaintext highlighter-rouge">p_min_C</code> <strong>are no longer active</strong>. As expected, reducing <code class="language-plaintext highlighter-rouge">p_min_C</code> from 0 to -1 did NOT reduce the optimal value (which stayed constant at $7300). Hence, we conclude that no more benefit can be derived by reducing <code class="language-plaintext highlighter-rouge">p_min_C</code> any further. A similar analysis can be performed for each of the constraints that are active in the initial optimal solution individually or simultaneously.</p>

<p>It is worth noting that the results of the above analysis hold for small changes to the \(b\) vector only. This is because large changes to the \(b\) vector may change the shape of the feasible region too much and the predicted changes to the optimal value may not hold. More concretely, we know that, <strong>for fixed objective function coefficients \(\hat{c}\), the optimal value function \(\phi(b, \hat{c})\) is piecewise linear and convex over \(K_b\), the admissible set for \(b\)</strong> <a href="#References">[3]</a>. In other words, \(\phi\) is determined by a particular linear function over each <em>critical region</em> of the admissible set. It is this linearity of the optimal value function that allows us to predict the changes to the optimal value as a function of changes in \(b\). However, this linearity only holds as long as we stay within a particular critical region. Large changes to \(b\) may take us out of the critical region where \(\phi\) is determined by a different linear function. As a result, our predicted changes to \(\phi\) will no longer hold.</p>

<p>So far we only talked about perturbations to the \(b\) vector. Note that the perturbations to the \(c\) vector can be analyzed in a similar way by considering the Dual problem of (LP) where the \(c\) vector takes the place of the \(b\) vector and the convexity of \(\phi\) is replaced by concavity. Moreover, we have only considered methods that attempt to describe changes to the optimal value analytically, as \(b\) or \(c\) (or both) are perturbed. Next, we look at an approach called <em>parametric sensitivity analysis</em> where we try to directly characterize the optimal value function \(\phi(b, c)\) by computing its gradient at various point values of \((b, c)\).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">p_min_C</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="mi">10</span> <span class="c1"># reset
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">LP</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Problem</span><span class="p">(</span><span class="n">obj_LP</span><span class="p">,</span> <span class="n">cons_LP</span><span class="p">)</span>
<span class="n">LP</span><span class="p">.</span><span class="n">solve</span><span class="p">();</span>
<span class="n">summary_LP</span> <span class="o">=</span> <span class="n">get_result_summary</span><span class="p">(</span><span class="n">LP</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">summary_LP</span><span class="p">[</span><span class="s">'status'</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">summary_LP</span><span class="p">[</span><span class="s">'optimal_value'</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>optimal
7799.999998684703
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">prettify</span><span class="p">(</span><span class="n">summary_LP</span><span class="p">[</span><span class="s">'optimal_solution'</span><span class="p">])</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>variable</th>
      <th>value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>pA1</td>
      <td>150.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>pA2</td>
      <td>240.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>pA3</td>
      <td>150.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>pB1</td>
      <td>50.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>pB2</td>
      <td>50.0</td>
    </tr>
    <tr>
      <th>5</th>
      <td>pB3</td>
      <td>50.0</td>
    </tr>
    <tr>
      <th>6</th>
      <td>pC1</td>
      <td>10.0</td>
    </tr>
    <tr>
      <th>7</th>
      <td>pC2</td>
      <td>10.0</td>
    </tr>
    <tr>
      <th>8</th>
      <td>pC3</td>
      <td>10.0</td>
    </tr>
  </tbody>
</table>
</div>

<h3 id="32-parametric-sensitivity-analysis-">3.2. Parametric Sensitivity Analysis <a class="anchor" id="parametric_sensitivity_analysis"></a></h3>

<h4 id="along-a-change-direction">Along a change direction</h4>
<p>Suppose we want to investigate how the optimal value will change if the \(c\) vector is perturbed along a particular direction, \(g\), while keeping the \(b\) vector fixed. Then we can write \(c = \hat{c} + \gamma g\). We can write the “partial” optimal value function as a function of \(\gamma\)</p>

\[z(\gamma) = \phi(\hat{b}, \hat{c} + \gamma g )\]

<p>Plotting he graph of \(z(\gamma)\) will literally show us how the optimal value will change as we move along the direction \(g\). Moreover, a similar analysis can be done for the \(b\) vector while keeping the \(c\) vector fixed. Both these scenarios are shown in the figure below.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">LP</span><span class="p">.</span><span class="n">parameters</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'{}, {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">name</span><span class="p">(),</span> <span class="n">p</span><span class="p">.</span><span class="n">value</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cA, 10
cB, 12
cC, 20
p_min_A, 150
p_max_A, 250
p_min_B, 50
p_max_B, 100
p_min_C, 10
p_max_C, 50
D1, 150
D2, 300
D3, 200
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">c_params</span> <span class="o">=</span> <span class="p">[</span><span class="n">p</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">LP</span><span class="p">.</span><span class="n">parameters</span><span class="p">()</span> <span class="k">if</span> <span class="n">p</span><span class="p">.</span><span class="n">name</span><span class="p">()</span> <span class="ow">in</span> <span class="p">[</span><span class="s">'cA'</span><span class="p">,</span> <span class="s">'cB'</span><span class="p">,</span> <span class="s">'cC'</span><span class="p">]]</span>
<span class="n">b_params</span> <span class="o">=</span> <span class="p">[</span><span class="n">p</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">LP</span><span class="p">.</span><span class="n">parameters</span><span class="p">()</span> <span class="k">if</span> <span class="n">p</span><span class="p">.</span><span class="n">name</span><span class="p">()</span> <span class="ow">in</span> <span class="p">[</span>
    <span class="s">'p_min_A'</span><span class="p">,</span>
    <span class="s">'p_max_A'</span><span class="p">,</span>
    <span class="s">'p_min_B'</span><span class="p">,</span>
    <span class="s">'p_max_B'</span><span class="p">,</span>
    <span class="s">'p_min_C'</span><span class="p">,</span>
    <span class="s">'p_max_C'</span><span class="p">,</span>
    <span class="s">'D1'</span><span class="p">,</span>
    <span class="s">'D2'</span><span class="p">,</span>
    <span class="s">'D3'</span><span class="p">]]</span>

<span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">seed</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
<span class="n">c_change_vector</span> <span class="o">=</span> <span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">random</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">c_params</span><span class="p">))</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">)</span> <span class="o">*</span> <span class="mi">10</span>
<span class="n">b_change_vector</span> <span class="o">=</span> <span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">random</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">b_params</span><span class="p">))</span> <span class="o">-</span><span class="mf">0.5</span><span class="p">)</span> <span class="o">*</span> <span class="mi">10</span>

<span class="k">print</span><span class="p">(</span><span class="s">'change vector for c: '</span><span class="p">,</span> <span class="n">c_change_vector</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'change vector for b: '</span><span class="p">,</span> <span class="n">b_change_vector</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>change vector for c:  [ 3.92860151 -1.68020195  3.21229123]
change vector for b:  [-4.58303374 -3.9234332   0.95052064  0.29817362 -0.81192571 -1.64592151
  1.22519432 -0.61858574  2.35882106]
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">evaluate_optimal_value_function</span><span class="p">(</span><span class="n">Prob</span><span class="p">,</span> <span class="n">param_vector</span><span class="p">,</span>
                                    <span class="n">change_vector</span><span class="p">,</span>
                                    <span class="n">gammas</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="p">.</span><span class="mi">25</span><span class="p">,</span> <span class="p">.</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">]):</span>
    <span class="k">assert</span> <span class="nb">len</span><span class="p">(</span><span class="n">param_vector</span><span class="p">)</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">change_vector</span><span class="p">)</span>
    <span class="n">z</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">g</span> <span class="ow">in</span> <span class="n">gammas</span><span class="p">:</span>
        <span class="c1"># move by g along the change vector
</span>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">((</span><span class="n">param_vector</span><span class="p">))):</span>
            <span class="n">param_vector</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">value</span> <span class="o">+=</span> <span class="n">g</span> <span class="o">*</span> <span class="n">change_vector</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="n">Prob</span><span class="p">.</span><span class="n">solve</span><span class="p">();</span>
        <span class="n">z</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">Prob</span><span class="p">.</span><span class="n">value</span><span class="p">)</span>

        <span class="c1"># reset params
</span>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">((</span><span class="n">param_vector</span><span class="p">))):</span>
            <span class="n">param_vector</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">value</span> <span class="o">-=</span> <span class="n">g</span> <span class="o">*</span> <span class="n">change_vector</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">z</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gamma</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.25</span><span class="p">,</span> <span class="mf">0.50</span><span class="p">,</span> <span class="mf">0.75</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">]</span>
<span class="n">z_c</span> <span class="o">=</span> <span class="n">evaluate_optimal_value_function</span><span class="p">(</span><span class="n">LP</span><span class="p">,</span> <span class="n">c_params</span><span class="p">,</span>
                                      <span class="n">c_change_vector</span><span class="p">,</span>
                                      <span class="n">gammas</span><span class="o">=</span><span class="n">gamma</span><span class="p">)</span>

<span class="n">z_b</span> <span class="o">=</span> <span class="n">evaluate_optimal_value_function</span><span class="p">(</span><span class="n">LP</span><span class="p">,</span> <span class="n">b_params</span><span class="p">,</span>
                                      <span class="n">b_change_vector</span><span class="p">,</span>
                                      <span class="n">gammas</span><span class="o">=</span><span class="n">gamma</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="n">layout</span><span class="o">=</span><span class="s">'constrained'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">gamma</span><span class="p">,</span> <span class="n">z_c</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">'#1f77b4'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sa">r</span><span class="s">'$\phi(\hat{b}, \hat{c} + \gamma g)$'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">gamma</span><span class="p">,</span> <span class="n">z_b</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">'orange'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sa">r</span><span class="s">'$\phi(\hat{b} + \gamma g, \hat{c})$'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="sa">r</span><span class="s">'$\gamma$'</span><span class="p">)</span>
<span class="c1"># plt.ylabel(r'$z (\gamma)$')
</span><span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">"LP Optimal Value Function</span><span class="se">\n</span><span class="s"> (Along a change vector)"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;matplotlib.legend.Legend at 0x7fa20c7bccd0&gt;
</code></pre></div></div>

<p><img src="../assets/files/images/unit_commitment_problem_42_1.png" /></p>

<p>As expected, the graph of \(\phi(\hat{b}, c)\) is concave (although very slightly) and the graph of \(\phi(b, \hat{c})\) is convex (in fact linear).</p>

<h4 id="by-computing-the-gradient-of-phi">By computing the gradient of \(\phi\)</h4>

<p>Sensitivity analysis becomes more involved when \(b\) and \(c\) are varied simultaneously. Fortunately, we know that the optimal value function \(\phi(b, c)\) is piecewise quadratic and continuous over the admissible set \(K = K_b \times K_c\) where \(K_b\) and \(K_c\) are the admissible sets for \(b\) and \(c\) respectively <a href="#References">[3]</a>. Therefore, we can conclude that \(\phi\) is differentiable almost everywhere on \(K\) (except for some zero measure degenerate set comprising the boundaries for various critical regions). We will compute the derivative of \(\phi\) at various point values \((\hat{b}, \hat{c})\) to get a sense of how the optimal value will change in response to a given change in the parameters at a fixed optimal solution \(x^*\). In particular, we are interested in parameters with greatest magnitude in the gradient vector \(\nabla \phi\). These are the most <strong>sensitive parameters</strong>, and care must be taken to ensure their accuracy.</p>

<p>Of course, as mentioned in the previous section, the optimal solution \(x^*\) may itself change as a result of perturbations in \((b, c)\). There are methods to summarize the region in parameter space (a.k.a. critical set) for which a given \(x^*\) remains optimal (for details see <a href="#References">[3]</a>). However, for the sake of simplicity we will not delve into such methods here.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">c_star</span> <span class="o">=</span> <span class="n">LP</span><span class="p">.</span><span class="n">value</span>
<span class="n">delta</span> <span class="o">=</span> <span class="mf">1.0e-2</span>
<span class="k">for</span> <span class="n">param</span> <span class="ow">in</span> <span class="n">LP</span><span class="p">.</span><span class="n">parameters</span><span class="p">():</span>
    <span class="n">param</span><span class="p">.</span><span class="n">value</span> <span class="o">+=</span> <span class="n">delta</span>
    <span class="n">LP</span><span class="p">.</span><span class="n">solve</span><span class="p">(</span><span class="n">requires_grad</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">LP</span><span class="p">.</span><span class="n">derivative</span><span class="p">()</span>
    <span class="k">print</span><span class="p">(</span>
        <span class="s">'param: {}, delta: {}, obj_change: {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span>
        <span class="n">param</span><span class="p">.</span><span class="n">name</span><span class="p">(),</span> <span class="n">delta</span><span class="p">,</span> <span class="n">LP</span><span class="p">.</span><span class="n">value</span> <span class="o">-</span> <span class="n">c_star</span><span class="p">))</span>
    <span class="n">param</span><span class="p">.</span><span class="n">value</span> <span class="o">-=</span> <span class="n">delta</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>param: cA, delta: 0.01, obj_change: 119.12411349871218
param: cB, delta: 0.01, obj_change: 115.22930286925293
param: cC, delta: 0.01, obj_change: 114.03071247698517
param: p_min_A, delta: 0.01, obj_change: 113.93026630405166
param: p_max_A, delta: 0.01, obj_change: 113.7602181066959
param: p_min_B, delta: 0.01, obj_change: 113.98395543657352
param: p_max_B, delta: 0.01, obj_change: 113.7358955176287
param: p_min_C, delta: 0.01, obj_change: 114.22248990678054
param: p_max_C, delta: 0.01, obj_change: 113.73610339234347
param: D1, delta: 0.01, obj_change: 113.72675241639445
param: D2, delta: 0.01, obj_change: 113.83022508141312
param: D3, delta: 0.01, obj_change: 113.72807242673207
</code></pre></div></div>

<p>As seen above, the three most sensitive parameters are <code class="language-plaintext highlighter-rouge">cA</code>, <code class="language-plaintext highlighter-rouge">cB</code> and <code class="language-plaintext highlighter-rouge">p_min_C</code> in that order. Care must be taken to ensure that these parameters are estimated / specified accurately. A negative error in these parameters will lead to an underestimation of the total cost and vice-versa. On the other hand, none of the demand parameters seem to be sensitive. So, our model is relatively insensitive to imprecise specification of the demand.</p>

<p>Finally, we note that while a gradient based approach directly gives us more information about the optimal value function, it makes assumptions about small perturbations in \(b\) and \(c\). On the other hand, sensitivity analysis along a change direction only gives us information about the behavior of the optimal value function in that direction but it does not assume the perturbations to be small. We should choose whichever method suits our needs.</p>

<h1 id="4-a-first-mip-formulation">4. A first MIP formulation<a class="anchor" id="A_first_MIP_formulation"></a></h1>

<p>Next, we formulate the first version of a Mixed Integer Program for our problem. Here, we get rid of the first relaxation:</p>
<ol>
  <li><del>All units are running and available at all times. I.e. we don’t have the choice to turn a unit ON/OFF.</del></li>
  <li>Startup costs are ignored.</li>
  <li>Minimum up- and down-time constraints do not apply.</li>
</ol>

<p>We now have the choice to turn one or more units ON/OFF during any of the time slots. We will use a set of binary variables to model this choice.</p>

\[u_{j, t} :=
\begin{cases}
   1 &amp;\text{if unit $j$ is ON in slot $t$}\\
   0 &amp;\text{otherwise }
\end{cases}\]

<p>Our objective as well as the demand constraint remain unchanged. However, the output range constraint needs to be modified in order to incorporate the new \(u_{j, t}\) variables.</p>

\[P_{j, min} u_{j, t} \le p_{j, t} \le P_{j, max} u_{j, t}\ \text{(Output Range)}\\\]

<p>Note that in the above formulation, if the unit \(j\) is OFF in period \(t\), the power output \(p_{j, t}\) is forced to be zero, so that we don’t have any power output contribution from an OFF unit. Below is the new MIP model</p>

\[\text{minimize} \sum_{t\in T} \sum_{j \in J} c_j p_{j, t}\\ \tag{MIP-1}
     \text{s.t.}\quad P_{j, min} u_{j, t} \le p_{j, t} \le P_{j, max} u_{j, t}\\ 
     \sum_{j \in J} p_{j, t} \ge D_t\\
     u_{j, t} \in \{0, 1\} \ \forall\ j, t\]

<p>Let’s solve (MIP-1) with <code class="language-plaintext highlighter-rouge">cxvpy</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ON/OFF variables
</span><span class="n">uA1</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'uA1'</span><span class="p">)</span>
<span class="n">uA2</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'uA2'</span><span class="p">)</span>
<span class="n">uA3</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'uA3'</span><span class="p">)</span>

<span class="n">uB1</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'uB1'</span><span class="p">)</span>
<span class="n">uB2</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'uB2'</span><span class="p">)</span>
<span class="n">uB3</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'uB3'</span><span class="p">)</span>

<span class="n">uC1</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'uC1'</span><span class="p">)</span>
<span class="n">uC2</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'uC2'</span><span class="p">)</span>
<span class="n">uC3</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'uC3'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Objective remains unchanged
</span><span class="n">obj_MIP1</span> <span class="o">=</span> <span class="n">LP</span><span class="p">.</span><span class="n">objective</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># New constraints
</span><span class="n">MIP1_output_range_cons</span> <span class="o">=</span> <span class="p">[</span>
    <span class="c1"># output range
</span>    <span class="n">pA1</span> <span class="o">&gt;=</span> <span class="n">p_min_A</span> <span class="o">*</span> <span class="n">uA1</span><span class="p">,</span>
    <span class="n">pA1</span> <span class="o">&lt;=</span> <span class="n">p_max_A</span> <span class="o">*</span> <span class="n">uA1</span><span class="p">,</span>
    <span class="n">pA2</span> <span class="o">&gt;=</span> <span class="n">p_min_A</span> <span class="o">*</span> <span class="n">uA2</span><span class="p">,</span>
    <span class="n">pA2</span> <span class="o">&lt;=</span> <span class="n">p_max_A</span> <span class="o">*</span> <span class="n">uA2</span><span class="p">,</span>
    <span class="n">pA3</span> <span class="o">&gt;=</span> <span class="n">p_min_A</span> <span class="o">*</span> <span class="n">uA3</span><span class="p">,</span>
    <span class="n">pA3</span> <span class="o">&lt;=</span> <span class="n">p_max_A</span> <span class="o">*</span> <span class="n">uA3</span><span class="p">,</span>
    
    <span class="n">pB1</span> <span class="o">&gt;=</span> <span class="n">p_min_B</span> <span class="o">*</span> <span class="n">uB1</span><span class="p">,</span>
    <span class="n">pB1</span> <span class="o">&lt;=</span> <span class="n">p_max_B</span> <span class="o">*</span> <span class="n">uB1</span><span class="p">,</span>
    <span class="n">pB2</span> <span class="o">&gt;=</span> <span class="n">p_min_B</span> <span class="o">*</span> <span class="n">uB2</span><span class="p">,</span>
    <span class="n">pB2</span> <span class="o">&lt;=</span> <span class="n">p_max_B</span> <span class="o">*</span> <span class="n">uB2</span><span class="p">,</span>
    <span class="n">pB3</span> <span class="o">&gt;=</span> <span class="n">p_min_B</span> <span class="o">*</span> <span class="n">uB3</span><span class="p">,</span>
    <span class="n">pB3</span> <span class="o">&lt;=</span> <span class="n">p_max_B</span> <span class="o">*</span> <span class="n">uB3</span><span class="p">,</span>
    
    <span class="n">pC1</span> <span class="o">&gt;=</span> <span class="n">p_min_C</span> <span class="o">*</span> <span class="n">uC1</span><span class="p">,</span>
    <span class="n">pC1</span> <span class="o">&lt;=</span> <span class="n">p_max_C</span> <span class="o">*</span> <span class="n">uC1</span><span class="p">,</span>
    <span class="n">pC2</span> <span class="o">&gt;=</span> <span class="n">p_min_C</span> <span class="o">*</span> <span class="n">uC2</span><span class="p">,</span>
    <span class="n">pC2</span> <span class="o">&lt;=</span> <span class="n">p_max_C</span> <span class="o">*</span> <span class="n">uC2</span><span class="p">,</span>
    <span class="n">pC3</span> <span class="o">&gt;=</span> <span class="n">p_min_C</span> <span class="o">*</span> <span class="n">uC3</span><span class="p">,</span>
    <span class="n">pC3</span> <span class="o">&lt;=</span> <span class="n">p_max_C</span> <span class="o">*</span> <span class="n">uC3</span><span class="p">,</span>
<span class="p">]</span>

<span class="n">cons_MIP1</span> <span class="o">=</span> <span class="n">MIP1_output_range_cons</span> <span class="o">+</span> <span class="n">LP_demand_cons</span> <span class="c1"># demand constraints don't change
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">MIP1</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Problem</span><span class="p">(</span><span class="n">obj_MIP1</span><span class="p">,</span> <span class="n">cons_MIP1</span><span class="p">)</span>
<span class="n">MIP1</span><span class="p">.</span><span class="n">solve</span><span class="p">();</span>
<span class="n">summary_MIP1</span> <span class="o">=</span> <span class="n">get_result_summary</span><span class="p">(</span><span class="n">MIP1</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">summary_MIP1</span><span class="p">[</span><span class="s">'status'</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">summary_MIP1</span><span class="p">[</span><span class="s">'optimal_value'</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>optimal
6600.0
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">prettify</span><span class="p">(</span><span class="n">summary_MIP1</span><span class="p">[</span><span class="s">'optimal_solution'</span><span class="p">])</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>variable</th>
      <th>value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>pA1</td>
      <td>150.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>pA2</td>
      <td>250.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>pA3</td>
      <td>200.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>pB1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>pB2</td>
      <td>50.0</td>
    </tr>
    <tr>
      <th>5</th>
      <td>pB3</td>
      <td>-0.0</td>
    </tr>
    <tr>
      <th>6</th>
      <td>pC1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>7</th>
      <td>pC2</td>
      <td>-0.0</td>
    </tr>
    <tr>
      <th>8</th>
      <td>pC3</td>
      <td>-0.0</td>
    </tr>
    <tr>
      <th>9</th>
      <td>uA1</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>10</th>
      <td>uA2</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>11</th>
      <td>uA3</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>12</th>
      <td>uB1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>13</th>
      <td>uB2</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>14</th>
      <td>uB3</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>15</th>
      <td>uC1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>16</th>
      <td>uC2</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>17</th>
      <td>uC3</td>
      <td>0.0</td>
    </tr>
  </tbody>
</table>
</div>

<p>The optimal cost with the basic MIP model turns out to be <mark>$6600</mark>. Note that this is <mark>$1200 cheaper</mark> than the result of the (LP) model. Indeed, being able to choose which units to commit during each time slot has saved us some money!</p>

<p>Note that the model chose to fulfill all of the demand in period 1 with unit A, which is the cheapest to run. Both unit B and unit C are more expensive to run and were kept OFF during this period. For the peak demand period, unit B was turned ON to meet the additional demand and was turned back off at the end of the peak period. Unit C, which is the most expensive to run, was never turned ON.</p>

<p><strong>Note:</strong> We will defer the discussion of sensitivity analysis for MIPs to the end once we have developed a relatively complete MIP model for our UCP.</p>

<h1 id="5-an-mip-formulation-with-startup-costs">5. An MIP formulation with startup costs<a class="anchor" id="An_MIP_model_with_startup_costs"></a></h1>

<p>Here, we get rid of the second relaxation:</p>
<ol>
  <li><del>All units are running and available at all times. I.e. we don’t have the choice to turn a unit ON/OFF.</del></li>
  <li><del>Startup costs are ignored.</del></li>
  <li>Minimum up- and down-time constraints do not apply.</li>
</ol>

<p>We now consider the startup costs of the units. A unit incurs a startup cost in a time period only if it was started up in that period. We need a binary variable to indicate if a unit was turned ON in a given period. If so, the unit will incur the startup cost in that period in addition to the marginal cost. (For simplicity, we have assumed the cool-down costs to be \(0\).)</p>

<p>We introduce a new parameter to denote the startup costs of the units</p>

\[c_j^u := \text{Startup cost of unit j (\$)}\]

<p>and a new binary variable</p>

\[\alpha_{j, t} :=
\begin{cases}
   1 &amp;\text{if unit $j$ was started in period $t$}\\
   0 &amp;\text{otherwise }
\end{cases}\]

<p>The new objective is given by:</p>

\[\text{minimize} \sum_{t\in T} \sum_{j \in J} c_j p_{j, t} + \alpha_{j, t} c_j^u\\\]

<p>The demand constraint as well as the output range constraints remain the same as for (MIP-1). However, we need a new constraint in order to ensure that \(\alpha_{j, t} = 1\) if and only if unit \(j\) was started up in period \(t\). This constraint can be modeled by the below function</p>

\[\alpha_{j, t} = \lfloor \frac{u_{j, t} - u_{j, t-1} + 1}{2} \rfloor\]

<p>The above non-linear function can be expressed in terms of linear constraints as follows:</p>

\[\alpha_{j, t} \le \frac{u_{j, t} - u_{j, t-1} + 1}{2},\ \ \ \  \alpha_{j, t} + 1 \ge \frac{u_{j, t} - u_{j, t-1} + 1}{2} + .25\qquad \text{(Startup)}\]

<p>Our new model can be written as:</p>

\[\text{minimize} \sum_{t\in T} \sum_{j \in J} c_j p_{j, t} + \alpha_{j, t} c_j^u\\
     \text{s.t.}\quad P_{j, min} u_{j, t} \le p_{j, t} \le P_{j, max} u_{j, t}\\ 
     \sum_{j \in J} p_{j, t} \ge D_t\\ \tag{MIP-2}
     \alpha_{j, t} \le \frac{u_{j, t} - u_{j, t-1} + 1}{2}\\
     \alpha_{j, t} + 1 \ge \frac{u_{j, t} - u_{j, t-1} + 1}{2} + .25\\
     u_{j, t} \in \{0, 1\} \ \forall\ j, t\\
     \alpha_{j, t} \in \{0, 1\} \ \forall\ j, t\]

<p>Lets solve (MIP-2) with <code class="language-plaintext highlighter-rouge">cvxpy</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># constants
## initial states
</span><span class="n">uA0</span> <span class="o">=</span> <span class="mi">1</span> <span class="c1"># ON
</span><span class="n">uB0</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1"># OFF
</span><span class="n">uC0</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1"># OFF
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># parameters
## startup costs
</span><span class="n">cA_up</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Parameter</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">"cA_up"</span><span class="p">)</span>
<span class="n">cB_up</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Parameter</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">"cB_up"</span><span class="p">)</span>
<span class="n">cC_up</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Parameter</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">"cC_up"</span><span class="p">)</span>

<span class="n">cA_up</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="mi">1000</span>
<span class="n">cB_up</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="mi">600</span>
<span class="n">cC_up</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="mi">100</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># startup variables
</span><span class="n">alpha_A1</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'alpha_A1'</span><span class="p">)</span>
<span class="n">alpha_A2</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'alpha_A2'</span><span class="p">)</span>
<span class="n">alpha_A3</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'alpha_A3'</span><span class="p">)</span>


<span class="n">alpha_B1</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'alpha_B1'</span><span class="p">)</span>
<span class="n">alpha_B2</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'alpha_B2'</span><span class="p">)</span>
<span class="n">alpha_B3</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'alpha_B3'</span><span class="p">)</span>


<span class="n">alpha_C1</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'alpha_C1'</span><span class="p">)</span>
<span class="n">alpha_C2</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'alpha_C2'</span><span class="p">)</span>
<span class="n">alpha_C3</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'alpha_C3'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># objective
</span><span class="n">obj_MIP2</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Minimize</span><span class="p">(</span>
    <span class="n">cA</span> <span class="o">*</span> <span class="p">(</span><span class="n">pA1</span> <span class="o">+</span> <span class="n">pA2</span> <span class="o">+</span> <span class="n">pA3</span><span class="p">)</span> <span class="o">+</span> <span class="n">cA_up</span> <span class="o">*</span> <span class="p">(</span><span class="n">alpha_A1</span> <span class="o">+</span> <span class="n">alpha_A2</span> <span class="o">+</span> <span class="n">alpha_A3</span><span class="p">)</span> <span class="o">+</span>
    <span class="n">cB</span> <span class="o">*</span> <span class="p">(</span><span class="n">pB1</span> <span class="o">+</span> <span class="n">pB2</span> <span class="o">+</span> <span class="n">pB3</span><span class="p">)</span> <span class="o">+</span> <span class="n">cB_up</span> <span class="o">*</span> <span class="p">(</span><span class="n">alpha_B1</span> <span class="o">+</span> <span class="n">alpha_B2</span> <span class="o">+</span> <span class="n">alpha_B3</span><span class="p">)</span> <span class="o">+</span>
    <span class="n">cC</span> <span class="o">*</span> <span class="p">(</span><span class="n">pC1</span> <span class="o">+</span> <span class="n">pC2</span> <span class="o">+</span> <span class="n">pC3</span><span class="p">)</span> <span class="o">+</span> <span class="n">cC_up</span> <span class="o">*</span> <span class="p">(</span><span class="n">alpha_C1</span> <span class="o">+</span> <span class="n">alpha_C2</span> <span class="o">+</span> <span class="n">alpha_C3</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># constraints
</span><span class="n">MIP2_startup_cons</span> <span class="o">=</span>  <span class="p">[</span>
    <span class="n">alpha_A1</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">uA1</span> <span class="o">-</span> <span class="n">uA0</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">alpha_A1</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="n">uA1</span> <span class="o">-</span> <span class="n">uA0</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">-</span> <span class="p">.</span><span class="mi">75</span><span class="p">,</span>
    <span class="n">alpha_A2</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">uA2</span> <span class="o">-</span> <span class="n">uA1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">alpha_A2</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="n">uA2</span> <span class="o">-</span> <span class="n">uA1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">-</span> <span class="p">.</span><span class="mi">75</span><span class="p">,</span>
    <span class="n">alpha_A3</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">uA3</span> <span class="o">-</span> <span class="n">uA2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">alpha_A3</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="n">uA3</span> <span class="o">-</span> <span class="n">uA2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">-</span> <span class="p">.</span><span class="mi">75</span><span class="p">,</span>
    
    <span class="n">alpha_B1</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">uB1</span> <span class="o">-</span> <span class="n">uB0</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">alpha_B1</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="n">uB1</span> <span class="o">-</span> <span class="n">uB0</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">-</span> <span class="p">.</span><span class="mi">75</span><span class="p">,</span>
    <span class="n">alpha_B2</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">uB2</span> <span class="o">-</span> <span class="n">uB1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">alpha_B2</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="n">uB2</span> <span class="o">-</span> <span class="n">uB1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">-</span> <span class="p">.</span><span class="mi">75</span><span class="p">,</span>
    <span class="n">alpha_B3</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">uB3</span> <span class="o">-</span> <span class="n">uB2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">alpha_B3</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="n">uB3</span> <span class="o">-</span> <span class="n">uB2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">-</span> <span class="p">.</span><span class="mi">75</span><span class="p">,</span>
    
    <span class="n">alpha_C1</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">uC1</span> <span class="o">-</span> <span class="n">uC0</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">alpha_C1</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="n">uC1</span> <span class="o">-</span> <span class="n">uC0</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">-</span> <span class="p">.</span><span class="mi">75</span><span class="p">,</span>
    <span class="n">alpha_C2</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">uC2</span> <span class="o">-</span> <span class="n">uC1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">alpha_C2</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="n">uC2</span> <span class="o">-</span> <span class="n">uC1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">-</span> <span class="p">.</span><span class="mi">75</span><span class="p">,</span>
    <span class="n">alpha_C3</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">uC3</span> <span class="o">-</span> <span class="n">uC2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">alpha_C3</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="n">uC3</span> <span class="o">-</span> <span class="n">uC2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">-</span> <span class="p">.</span><span class="mi">75</span><span class="p">,</span>
<span class="p">]</span>
    
<span class="n">cons_MIP2</span> <span class="o">=</span> <span class="n">MIP1</span><span class="p">.</span><span class="n">constraints</span> <span class="o">+</span> <span class="n">MIP2_startup_cons</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">MIP2</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Problem</span><span class="p">(</span><span class="n">obj_MIP2</span><span class="p">,</span> <span class="n">cons_MIP2</span><span class="p">)</span>
<span class="n">MIP2</span><span class="p">.</span><span class="n">solve</span><span class="p">();</span>
<span class="n">summary_MIP2</span> <span class="o">=</span> <span class="n">get_result_summary</span><span class="p">(</span><span class="n">MIP2</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">summary_MIP2</span><span class="p">[</span><span class="s">'status'</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">summary_MIP2</span><span class="p">[</span><span class="s">'optimal_value'</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>optimal
7100.0
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">prettify</span><span class="p">(</span><span class="n">summary_MIP2</span><span class="p">[</span><span class="s">'optimal_solution'</span><span class="p">])</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>variable</th>
      <th>value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>alpha_A1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>alpha_A2</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>alpha_A3</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>alpha_B1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>alpha_B2</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>5</th>
      <td>alpha_B3</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>6</th>
      <td>alpha_C1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>7</th>
      <td>alpha_C2</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>8</th>
      <td>alpha_C3</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>9</th>
      <td>pA1</td>
      <td>150.0</td>
    </tr>
    <tr>
      <th>10</th>
      <td>pA2</td>
      <td>250.0</td>
    </tr>
    <tr>
      <th>11</th>
      <td>pA3</td>
      <td>200.0</td>
    </tr>
    <tr>
      <th>12</th>
      <td>pB1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>13</th>
      <td>pB2</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>14</th>
      <td>pB3</td>
      <td>-0.0</td>
    </tr>
    <tr>
      <th>15</th>
      <td>pC1</td>
      <td>-0.0</td>
    </tr>
    <tr>
      <th>16</th>
      <td>pC2</td>
      <td>50.0</td>
    </tr>
    <tr>
      <th>17</th>
      <td>pC3</td>
      <td>-0.0</td>
    </tr>
    <tr>
      <th>18</th>
      <td>uA1</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>19</th>
      <td>uA2</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>20</th>
      <td>uA3</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>21</th>
      <td>uB1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>22</th>
      <td>uB2</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>23</th>
      <td>uB3</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>24</th>
      <td>uC1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>25</th>
      <td>uC2</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>26</th>
      <td>uC3</td>
      <td>0.0</td>
    </tr>
  </tbody>
</table>
</div>

<p>The optimal value of the total cost (setup + marginal) is <mark> $7100</mark>. This optimal value is greater than the optimal value of MIP1 ($6600) because it includes the setup cost which we ignored in MIP1.</p>

<p>Also note that, once again, the model chose to meet all of the demand in period 1 with unit A. The reason for this is two-fold. First, unit A is the cheapest to run and incurs the smallest marginal cost. So, it makes sense to preferentially run unit A whenever possible. Second, unit A was already in ON state at the beginning of the planning horizon and did not need to be turned ON. As a result, by keeping unit A running, we avoided the setup cost for unit A.</p>

<p>We should also note that during the peak demand period, the model chose to turn on unit C instead of unit B as it had done in MIP1. This is because while unit B is cheaper to run than unit C, it is more expensive to start up than unit C. Since the setup cost dominates the marginal cost, the model preferred to start up unit C.</p>

<h1 id="6-an-mip-model-with-up--and-down-time-constraints">6. An MIP model with up- and down-time constraints<a class="anchor" id="An_MIP_model_with_up_and_down_time_constraints"></a></h1>

<p>Here, we get rid of the third and final relaxation:</p>
<ol>
  <li><del>All units are running and available at all times. I.e. we don’t have the choice to turn a unit ON/OFF.</del></li>
  <li><del>Startup costs are ignored.</del></li>
  <li><del>Minimum up- and down-time constraints do not apply.</del></li>
</ol>

<p>We now consider the up- and down-time constraints that apply to each unit. In order to model these constraints we need need to define two new parameters:</p>

\[UT_j := \text{Minimum length of time (in periods/slots) that unit j must remain ON before it can be turned OFF.}\\
DT_j := \text{Minimum length of time (in periods/slots) that unit j must remain OFF before it can be turned ON.}\]

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># constants
# up-times and down-times
</span><span class="n">UT_A</span> <span class="o">=</span> <span class="mi">3</span>
<span class="n">UT_B</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">UT_C</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">DT_A</span> <span class="o">=</span> <span class="mi">3</span>
<span class="n">DT_B</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">DT_C</span> <span class="o">=</span> <span class="mi">1</span>
</code></pre></div></div>

<p>We also need a new variable to indicate if a given unit was stopped in a given period.</p>

\[\beta_{j, t} :=
\begin{cases}
   1 &amp;\text{   if unit j was stopped in period t}\\
   0 &amp;\text{   otherwise }
\end{cases}\]

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># variables
</span><span class="n">beta_A1</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"beta_A1"</span><span class="p">)</span>
<span class="n">beta_A2</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"beta_A2"</span><span class="p">)</span>
<span class="n">beta_A3</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"beta_A3"</span><span class="p">)</span>

<span class="n">beta_B1</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"beta_B1"</span><span class="p">)</span>
<span class="n">beta_B2</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"beta_B2"</span><span class="p">)</span>
<span class="n">beta_B3</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"beta_B3"</span><span class="p">)</span>

<span class="n">beta_C1</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"beta_C1"</span><span class="p">)</span>
<span class="n">beta_C2</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"beta_C2"</span><span class="p">)</span>
<span class="n">beta_C3</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"beta_C3"</span><span class="p">)</span>
</code></pre></div></div>

<p>We need to specify the shutdown constraint</p>

\[\beta_{j, t} = \lfloor \frac{(-u_{j, t} + u_{j, t-1} + 1)}{2} \rfloor\]

<p>which can be expressed in the form of linear inequalities as follows:</p>

\[\beta_{j, t} \le \frac{-u_{j, t} + u_{j, t-1} + 1}{2},\ \ \ \  \beta_{j, t} + 1 \ge \frac{-u_{j, t} + u_{j, t-1} + 1}{2} + .25\qquad \text{(Shut-down)}\]

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">MIP3_shutdown_cons</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">beta_A1</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="o">-</span><span class="n">uA1</span> <span class="o">+</span> <span class="n">uA0</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">beta_A1</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="o">-</span><span class="n">uA1</span> <span class="o">+</span> <span class="n">uA0</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="p">.</span><span class="mi">25</span><span class="p">,</span>
    <span class="n">beta_A2</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="o">-</span><span class="n">uA2</span> <span class="o">+</span> <span class="n">uA1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">beta_A2</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="o">-</span><span class="n">uA2</span> <span class="o">+</span> <span class="n">uA1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="p">.</span><span class="mi">25</span><span class="p">,</span>
    <span class="n">beta_A3</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="o">-</span><span class="n">uA3</span> <span class="o">+</span> <span class="n">uA2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">beta_A3</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="o">-</span><span class="n">uA3</span> <span class="o">+</span> <span class="n">uA2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="p">.</span><span class="mi">25</span><span class="p">,</span>

    <span class="n">beta_B1</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="o">-</span><span class="n">uB1</span> <span class="o">+</span> <span class="n">uB0</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">beta_B1</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="o">-</span><span class="n">uB1</span> <span class="o">+</span> <span class="n">uB0</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="p">.</span><span class="mi">25</span><span class="p">,</span>
    <span class="n">beta_B2</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="o">-</span><span class="n">uB2</span> <span class="o">+</span> <span class="n">uB1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">beta_B2</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="o">-</span><span class="n">uB2</span> <span class="o">+</span> <span class="n">uB1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="p">.</span><span class="mi">25</span><span class="p">,</span>
    <span class="n">beta_B3</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="o">-</span><span class="n">uB3</span> <span class="o">+</span> <span class="n">uB2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">beta_B3</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="o">-</span><span class="n">uB3</span> <span class="o">+</span> <span class="n">uB2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="p">.</span><span class="mi">25</span><span class="p">,</span>
    
    <span class="n">beta_C1</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="o">-</span><span class="n">uC1</span> <span class="o">+</span> <span class="n">uC0</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">beta_C1</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="o">-</span><span class="n">uC1</span> <span class="o">+</span> <span class="n">uC0</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="p">.</span><span class="mi">25</span><span class="p">,</span>
    <span class="n">beta_C2</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="o">-</span><span class="n">uC2</span> <span class="o">+</span> <span class="n">uC1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">beta_C2</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="o">-</span><span class="n">uC2</span> <span class="o">+</span> <span class="n">uC1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="p">.</span><span class="mi">25</span><span class="p">,</span>
    <span class="n">beta_C3</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="o">-</span><span class="n">uC3</span> <span class="o">+</span> <span class="n">uC2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">beta_C3</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="o">-</span><span class="n">uC3</span> <span class="o">+</span> <span class="n">uC2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="p">.</span><span class="mi">25</span><span class="p">,</span>
<span class="p">]</span>
</code></pre></div></div>

<p>We also need the minimum uptime constraints:</p>

\[\tag{Up-time}
\sum_{i=t}^{t + UT_j - 1} u_{j, i} \ge \alpha_{j,t} UT_j \ ,\qquad \forall\ t \in \{1,\ T - UT_j + 1\}\\
\sum_{i=t}^T u_{j, i} \ge \alpha_{j, t} (T - t + 1) \ ,\qquad \forall\ t \in \{T - UT_j + 2,\ T\}\]

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">generate_uptime_cons</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">t</span><span class="p">):</span>
    <span class="nb">sum</span> <span class="o">=</span> <span class="s">''</span>
    <span class="n">UT_j</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">(</span><span class="s">'UT_{j}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">j</span><span class="p">))</span>
    <span class="k">if</span> <span class="n">t</span> <span class="o">&lt;=</span> <span class="n">T</span> <span class="o">-</span> <span class="n">UT_j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">t</span> <span class="o">+</span> <span class="n">UT_j</span><span class="p">):</span>
            <span class="nb">sum</span> <span class="o">+=</span> <span class="s">'u{j}{i} +'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">j</span><span class="p">,</span> <span class="n">i</span><span class="o">=</span><span class="n">i</span><span class="p">)</span>
        <span class="nb">sum</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="nb">sum</span> <span class="o">+=</span> <span class="s">' &gt;= alpha_{j}{t} * UT_{j}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">j</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="n">t</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">T</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
            <span class="nb">sum</span> <span class="o">+=</span> <span class="s">'u{j}{k} +'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="o">=</span><span class="n">k</span><span class="p">)</span>
        <span class="nb">sum</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="nb">sum</span> <span class="o">+=</span> <span class="s">' &gt;= alpha_{j}{t} * (T - {t} + 1)'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">j</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="n">t</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">eval</span><span class="p">(</span><span class="nb">sum</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">MIP3_uptime_cons</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="p">[</span><span class="s">'A'</span><span class="p">,</span> <span class="s">'B'</span><span class="p">,</span> <span class="s">'C'</span><span class="p">]:</span>
    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">T</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
        <span class="n">cons</span> <span class="o">=</span> <span class="n">generate_uptime_cons</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="n">cons</span><span class="p">)</span>
        <span class="n">MIP3_uptime_cons</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">cons</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>alpha_A1 @ 3.0 &lt;= uA1 + uA2 + uA3
alpha_A2 @ 2.0 &lt;= uA2 + uA3
alpha_A3 @ 1.0 &lt;= uA3
alpha_B1 @ 2.0 &lt;= uB1 + uB2
alpha_B2 @ 2.0 &lt;= uB2 + uB3
alpha_B3 @ 1.0 &lt;= uB3
alpha_C1 @ 1.0 &lt;= uC1
alpha_C2 @ 1.0 &lt;= uC2
alpha_C3 @ 1.0 &lt;= uC3
</code></pre></div></div>

<p>And the minimum downtime constraints:</p>

\[\tag{Down-time}
\sum_{i=t}^{t + DT_j - 1} (1 - u_{j, i}) \ge \beta_{j,t} DT_j \ ,\qquad \forall\ t \in \{1,\ T - DT_j + 1\}\\
\sum_{i=t}^T (1 - u_{j, i}) \ge \beta_{j, t} (T - t + 1) \ ,\qquad \forall\ t \in \{T - DT_j + 2,\ T\}\]

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">generate_downtime_cons</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">t</span><span class="p">):</span>
    <span class="nb">sum</span> <span class="o">=</span> <span class="s">''</span>
    <span class="n">DT_j</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">(</span><span class="s">'DT_{j}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">j</span><span class="p">))</span>
    <span class="k">if</span> <span class="n">t</span> <span class="o">&lt;=</span> <span class="n">T</span> <span class="o">-</span> <span class="n">DT_j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">t</span> <span class="o">+</span> <span class="n">DT_j</span><span class="p">):</span>
            <span class="nb">sum</span> <span class="o">+=</span> <span class="s">'(1 - u{j}{i}) +'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">j</span><span class="p">,</span> <span class="n">i</span><span class="o">=</span><span class="n">i</span><span class="p">)</span>
        <span class="nb">sum</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="nb">sum</span> <span class="o">+=</span> <span class="s">' &gt;= beta_{j}{t} * DT_{j}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">j</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="n">t</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">T</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
            <span class="nb">sum</span> <span class="o">+=</span> <span class="s">'(1 - u{j}{k}) +'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="o">=</span><span class="n">k</span><span class="p">)</span>
        <span class="nb">sum</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="nb">sum</span> <span class="o">+=</span> <span class="s">' &gt;= beta_{j}{t} * (T - {t} + 1)'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">j</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="n">t</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">eval</span><span class="p">(</span><span class="nb">sum</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">MIP3_downtime_cons</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="p">[</span><span class="s">'A'</span><span class="p">,</span> <span class="s">'B'</span><span class="p">,</span> <span class="s">'C'</span><span class="p">]:</span>
    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">T</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
        <span class="n">cons</span> <span class="o">=</span> <span class="n">generate_downtime_cons</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="n">cons</span><span class="p">)</span>
        <span class="n">MIP3_downtime_cons</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">cons</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>beta_A1 @ 3.0 &lt;= 1.0 + -uA1 + 1.0 + -uA2 + 1.0 + -uA3
beta_A2 @ 2.0 &lt;= 1.0 + -uA2 + 1.0 + -uA3
beta_A3 @ 1.0 &lt;= 1.0 + -uA3
beta_B1 @ 1.0 &lt;= 1.0 + -uB1
beta_B2 @ 1.0 &lt;= 1.0 + -uB2
beta_B3 @ 1.0 &lt;= 1.0 + -uB3
beta_C1 @ 1.0 &lt;= 1.0 + -uC1
beta_C2 @ 1.0 &lt;= 1.0 + -uC2
beta_C3 @ 1.0 &lt;= 1.0 + -uC3
</code></pre></div></div>

<p>Finally, we need the logical constraints [1] to ensure that \(\alpha_{j,t} = 1\) only when the unit is scheduled to be switched on in slot \(t\) (i.e., \(u_{j, t-1} = 0\) and \(u_{j, t} = 1\)), and \(\beta_{j, t} = 1\) only when the unit is scheduled to be switched off in slot \(t\) (i.e., \(u_{j, t-1} = 1\) and \(u_{j, t} = 0\)).</p>

\[u_{j, t-1} - u_{j, t} + \alpha_{j, t} - \beta_{j, t} = 0\ ,\qquad \forall\ t\in T,\ j\in J \tag{Logical}\]

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">MIP3_logical_cons</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="p">[</span><span class="s">'A'</span><span class="p">,</span> <span class="s">'B'</span><span class="p">,</span> <span class="s">'C'</span><span class="p">]:</span>
    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">T</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
        <span class="n">cons</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">(</span><span class="s">'u{j}{t_1} - u{j}{t} + alpha_{j}{t} - beta_{j}{t} == 0'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">j</span><span class="p">,</span> <span class="n">t_1</span><span class="o">=</span><span class="n">t</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="n">t</span><span class="p">))</span>
        <span class="k">print</span><span class="p">(</span><span class="n">cons</span><span class="p">)</span>
        <span class="n">MIP3_logical_cons</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">cons</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1.0 + -uA1 + alpha_A1 + -beta_A1 == 0.0
uA1 + -uA2 + alpha_A2 + -beta_A2 == 0.0
uA2 + -uA3 + alpha_A3 + -beta_A3 == 0.0
0.0 + -uB1 + alpha_B1 + -beta_B1 == 0.0
uB1 + -uB2 + alpha_B2 + -beta_B2 == 0.0
uB2 + -uB3 + alpha_B3 + -beta_B3 == 0.0
0.0 + -uC1 + alpha_C1 + -beta_C1 == 0.0
uC1 + -uC2 + alpha_C2 + -beta_C2 == 0.0
uC2 + -uC3 + alpha_C3 + -beta_C3 == 0.0
</code></pre></div></div>

<p>Since we are ignoring the shutdown costs of the units, our objective remains the same as that in (MIP-2). Below is our final model:</p>

\[\text{minimize} \sum_{t\in T} \sum_{j \in J} c_j p_{j, t} + c_j^u \alpha_{j, t}\]

\[\text{s.t.}\quad P_{j, min} u_{j, t} \le p_{j, t} \le P_{j, max} u_{j, t}\quad \text{(Output Range)}\]

\[\sum_{j \in J} p_{j, t} \ge D_t\quad \text{(Demand)}\]

\[\alpha_{j, t} \le \frac{u_{j, t} - u_{j, t-1} + 1}{2},\ \alpha_{j, t} + 1 \ge \frac{u_{j, t} - u_{j, t-1} + 1}{2} + .25 \quad \text{(Startup)}\]

\[\sum_{i=t}^{t + UT_j - 1} u_{j, i} \ge \alpha_{j,t} UT_j \ ,\ \forall\ t \in \{1,\ T - UT_j + 1\} \quad \text{(Uptime)}\]

\[\sum_{i=t}^T u_{j, i} \ge \alpha_{j, t} (T - t + 1) \ ,\ \ \forall\ t \in \{T - UT_j + 2,\ T\} \quad \text{(Uptime)}\]

\[\sum_{i=t}^{t + DT_j - 1} (1 - u_{j, i}) \ge \beta_{j,t} DT_j \ ,\ \forall\ t \in \{1,\ T - DT_j + 1\} \quad \text{(Downtime)}\]

<p>\(\sum_{i=t}^T (1 - u_{j, i}) \ge \beta_{j, t} (T - t + 1) \ ,\ \forall\ t \in \{T - DT_j + 2,\ T\}\quad \text{(Downtime)}\)
\(u_{j, t-1} - u_{j, t} + \alpha_{j, t} - \beta_{j, t} = 0\ ,\qquad \forall\ t\in T,\ j\in J \quad \text{(Logical)}\)</p>

\[u_{j, t} \in \{0, 1\} \ \forall\ j, t\\
     \alpha_{j, t} \in \{0, 1\} \ \forall\ j, t\\
     \beta_{j, t} \in \{0, 1\} \ \forall\ j, t \tag{MIP-3}\]

<p>We now solve (MIP-3) with <code class="language-plaintext highlighter-rouge">cvxpy</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">MIP3_obj</span> <span class="o">=</span> <span class="n">MIP2</span><span class="p">.</span><span class="n">objective</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">MIP3_cons</span> <span class="o">=</span> <span class="n">MIP2</span><span class="p">.</span><span class="n">constraints</span> <span class="o">+</span> <span class="n">MIP3_uptime_cons</span> <span class="o">+</span> <span class="n">MIP3_downtime_cons</span> <span class="o">+</span> <span class="n">MIP3_logical_cons</span>
<span class="c1"># + MIP3_shutdown_cons
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">MIP3</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Problem</span><span class="p">(</span><span class="n">MIP3_obj</span><span class="p">,</span> <span class="n">MIP3_cons</span><span class="p">)</span>
<span class="n">MIP3</span><span class="p">.</span><span class="n">solve</span><span class="p">();</span>
<span class="n">summary_MIP3</span> <span class="o">=</span> <span class="n">get_result_summary</span><span class="p">(</span><span class="n">MIP3</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">summary_MIP3</span><span class="p">[</span><span class="s">'status'</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">summary_MIP3</span><span class="p">[</span><span class="s">'optimal_value'</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>optimal
7100.0
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">prettify</span><span class="p">(</span><span class="n">summary_MIP3</span><span class="p">[</span><span class="s">'optimal_solution'</span><span class="p">])</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>variable</th>
      <th>value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>alpha_A1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>alpha_A2</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>alpha_A3</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>alpha_B1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>alpha_B2</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>5</th>
      <td>alpha_B3</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>6</th>
      <td>alpha_C1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>7</th>
      <td>alpha_C2</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>8</th>
      <td>alpha_C3</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>9</th>
      <td>beta_A1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>10</th>
      <td>beta_A2</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>11</th>
      <td>beta_A3</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>12</th>
      <td>beta_B1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>13</th>
      <td>beta_B2</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>14</th>
      <td>beta_B3</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>15</th>
      <td>beta_C1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>16</th>
      <td>beta_C2</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>17</th>
      <td>beta_C3</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>18</th>
      <td>pA1</td>
      <td>150.0</td>
    </tr>
    <tr>
      <th>19</th>
      <td>pA2</td>
      <td>250.0</td>
    </tr>
    <tr>
      <th>20</th>
      <td>pA3</td>
      <td>200.0</td>
    </tr>
    <tr>
      <th>21</th>
      <td>pB1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>22</th>
      <td>pB2</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>23</th>
      <td>pB3</td>
      <td>-0.0</td>
    </tr>
    <tr>
      <th>24</th>
      <td>pC1</td>
      <td>-0.0</td>
    </tr>
    <tr>
      <th>25</th>
      <td>pC2</td>
      <td>50.0</td>
    </tr>
    <tr>
      <th>26</th>
      <td>pC3</td>
      <td>-0.0</td>
    </tr>
    <tr>
      <th>27</th>
      <td>uA1</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>28</th>
      <td>uA2</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>29</th>
      <td>uA3</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>30</th>
      <td>uB1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>31</th>
      <td>uB2</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>32</th>
      <td>uB3</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>33</th>
      <td>uC1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>34</th>
      <td>uC2</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>35</th>
      <td>uC3</td>
      <td>0.0</td>
    </tr>
  </tbody>
</table>
</div>

<p>As it turns out, the optimal cost of scheduling the three units over the given planning horizon remains unchanged at <mark>$7100</mark>. What is interesting is that we are able to satisfy multiple additional constraints at the same total cost as MIP2! This fact is due to the (simplified) structure of our specific problem. In a real-life scenario, adding constraints can lead to increased total cost. Nevertheless, discussing the above problem gives us insight into how MIP can be used to model and solve similar, larger problems at scale.</p>

<h2 id="7-parametric-sensitivity-analysis-for-mip-">7. Parametric Sensitivity Analysis for MIP<a class="anchor" id="parametric_sensitivity_analysis_MIP"> </a></h2>

<p>As in the case of (LP) in Section 3, we would like to perform sensitivity analysis on the parameters of (MIP-3). However, sensitivity analysis on MIPs is not as straightforward as for LPs. The main reason is that results from Duality theory do not apply directly to the MIP case because we restrict some variables to be discrete (i.e. integers).</p>

<h3 id="by-computing-the-gradient-of-phi-1">By computing the gradient of \(\phi\)</h3>
<p>Parametric sensitivity analysis can still be performed by computing the gradient of the optimal value function \(\phi(b, c)\) at point values of \(b\) and \(c\) for a particular optimal solution \(x^*\). More concretely, suppose \(\overline{x}^*\) denotes the values of the integer variables at \(x^*\). Then <strong>fixing the integer variables at \(\overline{x}^*\) for our MIP yields an LP</strong>, and regular LP parametric analysis can be performed as discussed in Section 3.</p>

<p>Once again, tha assumption is that the perturbations to the parameters are small enough that the linearity of \(\phi\) holds and the integer part of the optimal solution does not change. There are methods to get around these assumptions by using the convexity and concavity of \(\phi\) with respect to \(b\) and \(c\) respectively, as we will see in the next section.</p>

<p>Before moving on, note that constants specifying the up-times and down-times (e.g. <code class="language-plaintext highlighter-rouge">UT_A</code>, <code class="language-plaintext highlighter-rouge">DT_A</code>) as well as those specifying the initial state (e.g. <code class="language-plaintext highlighter-rouge">uA0</code>) are all restricted to integer values. Therefore, sensitivity analysis for these parameters would not make sense. Moreover, we cannot compute the derivative of the optimal value function with respect to these parameters anyway.  As a result, we only consider parameters that can be varied continuously, viz.</p>
<ul>
  <li>the startup costs \(c^u_j\)</li>
  <li>the marginal (running) costs \(c_j\)</li>
  <li>the output range limits \(P_{j, min}, P_{j, max}\)</li>
  <li>the demand \(D_t\)</li>
</ul>

<h3 id="along-a-change-direction-1">Along a change direction</h3>
<p>Suppose we do not want to assume that the perturbations in \(b\) and \(c\) are small. Then, instead of directly computing the gradient of \(\phi(b, c)\), we will try to find functions that bound \(\phi\) from above and below as one of \(b\), \(c\) is varied in the direction of a given change vector while the other is held constant. We will then progressively tighten these bounds till \(\phi\) is completely determined.</p>

<p>Consider the Mixed Integer Program</p>

\[\text{minimize } c^Tx\\
\text{s.t. } Ax \ge b\\
x \ge 0\\
\overline{x}\in \mathbb{Z}\tag{P}\]

<p>where \(\overline{x}\) are restricted to be integer. We want to analyze the effect of perturbations in the $c$ vector on the optimal value function \(\phi(b, c)\) of (P). We fix the \(b\) vector. Perturbations in \(c\) can then be characterized parametrically by writing \(c = \hat{c} + \gamma g\), where \(g \in \mathbb{R}^n\) is a change vector and \(0 \le \gamma \le 1\). Then we can write</p>

\[\text{minimize } (\hat{c} + \gamma g)^Tx\\
\text{s.t. } Ax \ge b\\
x \ge 0\\
\overline{x}\in \mathbb{Z}\tag{$P_{\gamma}$}\]

<p>Next, we write the optimal value function as a function of \(\gamma\)</p>

\[z(\gamma) = \text{min }\left\{(\hat{c} + \gamma g)^T\mid Ax \ge b, x \ge 0, \overline{x}\in \mathbb{Z}\right\}\tag{1}\]

<p>The function \(z\) captures the changes in the optimal value of (\(P_{\gamma}\)) as the \(c\) vector is varied continuously along the direction \(g\). Let \(x(\gamma_1)\) denote the optimal solution of (\(P_\gamma\)) for \(\gamma=\gamma_1\), and let \(\overline{x}(\gamma_1)\) denote the integer part of the optimal solution. Since, changing \(\gamma_1\) does not change the feasible region, \(\overline{x}(\gamma_1)\) will be feasible for all \(0 \le \gamma_1 \le 1\). Now suppose we fix the values of the integer variables in (\(P_\gamma\)) at \(\overline{x}(\gamma_1)\). The resulting problem is a Linear Program and can be analyzed using tools from LP sensitivity analysis.</p>

<p>We define the <em>partial optimal value function</em></p>

\[z(\gamma, \overline{x}(\gamma_1)) = \text{min }\left\{(\hat{c} + \gamma g)^T\mid Ax \ge b, x \ge 0, \overline{x}=\overline{x}(\gamma_1)\right\}\tag{2}\]

<p>Here, \(z(\gamma, \overline{x}(\gamma_1))\) captures the changes in the optimal value of (\(P_\gamma\)) as the \(c\) vector is varied continuously along the direction \(g\) while keeping \(\overline{x}\) fixed at \(\overline{x}(\gamma_1)\). Note that \(z(\gamma, \overline{x}(\gamma_1))\) is a piecewise linear, concave function of \(\gamma\) [<a href="#References">4</a>]. We make two important observations:</p>

\[z(\gamma) \le z(\gamma, \overline{x}(\gamma_1))\tag{3}\ ,\ \forall\ 0 \le \gamma_1 \le 1\]

\[z(\gamma) = z(\gamma, \overline{x}(\gamma_1))\tag{4}\ \text{ whenever } \gamma = \gamma_1\]

<p>(3) and (4) follow from the monotone property of infima.</p>

<p><strong>Remark 1.</strong> The optimal value function of the MIP is bounded above by every partial optimal value function.</p>

<p><strong>Remark 2.</strong> Whenever \(\gamma = \gamma_1\), the optimal value function and the partial optimal value function coincide.</p>

<p><img src="../assets/files/images/z_gamma_bounds.png" width="500" length="500" /></p>

<p>Some important consequences of the above remarks are:</p>

<ul>
  <li>We can set \(\gamma_1 := \gamma\) and analyze the partial optimal value function at \(\gamma\) with the assurance that the partial optimal value function \(z(\gamma, \overline{x}(\gamma))\) is identical to the optimal value function of the original MIP at \(\gamma\). We can repeat this for different values of \(\gamma\) to get the point values of the optimal value function of the original MIP.</li>
  <li>Moreover, at fixed values of \(\gamma_1\), we can plot the corresponding (interpolated) partial optimal value functions which will all provide upper bounds on the optimal value function of the original MIP. We can then select the “best” upper bound.</li>
</ul>

<p>We now perform these steps for MIP3.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">c_params</span> <span class="o">=</span> <span class="p">[</span><span class="n">p</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">MIP3</span><span class="p">.</span><span class="n">parameters</span><span class="p">()</span> <span class="k">if</span> <span class="n">p</span><span class="p">.</span><span class="n">name</span><span class="p">()</span> <span class="ow">in</span> <span class="p">[</span>
    <span class="s">'cA'</span><span class="p">,</span>
    <span class="s">'cA_up'</span><span class="p">,</span>
    <span class="s">'cB'</span><span class="p">,</span>
    <span class="s">'cB_up'</span><span class="p">,</span>
    <span class="s">'cC'</span><span class="p">,</span>
    <span class="s">'cC_up'</span><span class="p">]]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">seed</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
<span class="n">c_change_vector</span> <span class="o">=</span> <span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">random</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">c_params</span><span class="p">))</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">)</span> <span class="o">*</span> <span class="mi">1000</span>

<span class="k">print</span><span class="p">(</span><span class="s">'change vector for c: '</span><span class="p">,</span> <span class="n">c_change_vector</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>change vector for c:  [ 392.86015144 -168.0201947   321.22912306 -458.30337427 -392.34332006
   95.05206421]
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gammas</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.25</span><span class="p">,</span> <span class="mf">0.50</span><span class="p">,</span> <span class="mf">0.75</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">]</span>
<span class="n">gammas_1</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.25</span><span class="p">,</span> <span class="mf">0.50</span><span class="p">,</span> <span class="mf">0.75</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">]</span>

<span class="n">z_MIP</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">d</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">g1</span> <span class="ow">in</span> <span class="n">gammas_1</span><span class="p">:</span>
    <span class="n">z</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="c1"># Perturb the original MIP by g1
</span>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">((</span><span class="n">c_params</span><span class="p">))):</span>
        <span class="n">c_params</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">value</span> <span class="o">+=</span> <span class="n">g1</span> <span class="o">*</span> <span class="n">c_change_vector</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>

    <span class="c1"># Solve perturbed MIP
</span>    <span class="n">MIP3</span><span class="p">.</span><span class="n">solve</span><span class="p">(</span><span class="n">warm_start</span><span class="o">=</span><span class="bp">True</span><span class="p">);</span>
    <span class="n">z_MIP</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">MIP3</span><span class="p">.</span><span class="n">value</span><span class="p">)</span>

    <span class="c1"># Peg the integer variables at current solution
</span>    <span class="n">integer_solution_cons</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">int_vars</span> <span class="o">=</span> <span class="p">[</span><span class="n">v</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">MIP3</span><span class="p">.</span><span class="n">variables</span><span class="p">()</span> <span class="k">if</span> <span class="n">v</span><span class="p">.</span><span class="n">attributes</span><span class="p">[</span><span class="s">'boolean'</span><span class="p">]]</span>
    <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">int_vars</span><span class="p">:</span>
        <span class="n">integer_solution_cons</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">v</span><span class="o">==</span><span class="n">v</span><span class="p">.</span><span class="n">value</span><span class="p">)</span>
        <span class="n">v</span><span class="p">.</span><span class="n">attributes</span><span class="p">[</span><span class="s">'boolean'</span><span class="p">]</span> <span class="o">=</span> <span class="bp">False</span>

    <span class="c1"># Generate parital LP
</span>    <span class="n">LP_new</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Problem</span><span class="p">(</span><span class="n">MIP3</span><span class="p">.</span><span class="n">objective</span><span class="p">,</span> <span class="n">MIP3</span><span class="p">.</span><span class="n">constraints</span> <span class="o">+</span> <span class="n">integer_solution_cons</span><span class="p">)</span>

    <span class="c1"># Perturb the partial LP by g
</span>    <span class="k">for</span> <span class="n">g</span> <span class="ow">in</span> <span class="n">gammas</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">((</span><span class="n">c_params</span><span class="p">))):</span>
            <span class="n">c_params</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">value</span> <span class="o">+=</span> <span class="n">g</span> <span class="o">*</span> <span class="n">c_change_vector</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="n">LP_new</span><span class="p">.</span><span class="n">solve</span><span class="p">(</span><span class="n">warm_start</span><span class="o">=</span><span class="bp">True</span><span class="p">);</span>
        <span class="n">z</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">LP_new</span><span class="p">.</span><span class="n">value</span><span class="p">)</span>
        
        <span class="c1"># Reset param values
</span>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">((</span><span class="n">c_params</span><span class="p">))):</span>
            <span class="n">c_params</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">value</span> <span class="o">-=</span> <span class="n">g</span> <span class="o">*</span> <span class="n">c_change_vector</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>

    <span class="n">d</span><span class="p">[</span><span class="n">g1</span><span class="p">]</span> <span class="o">=</span> <span class="n">z</span>
    
    <span class="c1"># Reset param values
</span>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">((</span><span class="n">c_params</span><span class="p">))):</span>
        <span class="n">c_params</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">value</span> <span class="o">-=</span> <span class="n">g1</span> <span class="o">*</span> <span class="n">c_change_vector</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>

    <span class="c1"># Revert to integer
</span>    <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">int_vars</span><span class="p">:</span>
        <span class="n">v</span><span class="p">.</span><span class="n">attributes</span><span class="p">[</span><span class="s">'boolean'</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="n">d</span><span class="p">.</span><span class="n">keys</span><span class="p">())</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>0.00</th>
      <th>0.25</th>
      <th>0.50</th>
      <th>0.75</th>
      <th>1.00</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0.00</th>
      <td>7099.999991</td>
      <td>47929.159250</td>
      <td>87258.318659</td>
      <td>126587.477956</td>
      <td>165916.637215</td>
    </tr>
    <tr>
      <th>0.25</th>
      <td>61148.494221</td>
      <td>87258.318659</td>
      <td>126587.477956</td>
      <td>165916.637215</td>
      <td>205245.796376</td>
    </tr>
    <tr>
      <th>0.50</th>
      <td>115196.988422</td>
      <td>126587.477956</td>
      <td>165916.637215</td>
      <td>205245.796376</td>
      <td>244574.955540</td>
    </tr>
    <tr>
      <th>0.75</th>
      <td>169245.482550</td>
      <td>165916.637215</td>
      <td>205245.796376</td>
      <td>244574.955540</td>
      <td>283904.114700</td>
    </tr>
    <tr>
      <th>1.00</th>
      <td>223293.976744</td>
      <td>205245.796376</td>
      <td>244574.955540</td>
      <td>283904.114700</td>
      <td>323233.273861</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="n">layout</span><span class="o">=</span><span class="s">'constrained'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">gammas_1</span><span class="p">,</span> <span class="n">z_MIP</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">'#1f77b4'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sa">r</span><span class="s">'$z(\gamma, \overline{x}(\gamma))$'</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">gammas</span><span class="p">,</span> <span class="n">d</span><span class="p">[</span><span class="mf">0.0</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="s">'$z(\gamma, \overline{x}(0.0))$'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">gammas</span><span class="p">,</span> <span class="n">d</span><span class="p">[</span><span class="mf">0.25</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="s">'$z(\gamma, \overline{x}(0.25))$'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">gammas</span><span class="p">,</span> <span class="n">d</span><span class="p">[</span><span class="mf">0.50</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="s">'$z(\gamma, \overline{x}(0.50))$'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">gammas</span><span class="p">,</span> <span class="n">d</span><span class="p">[</span><span class="mf">0.75</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="s">'$z(\gamma, \overline{x}(0.75))$'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">gammas</span><span class="p">,</span> <span class="n">d</span><span class="p">[</span><span class="mf">1.0</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="s">'$z(\gamma, \overline{x}(1.0))$'</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="sa">r</span><span class="s">'$\gamma$'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">"Upper bounds on MIP Optimal Value Function</span><span class="se">\n</span><span class="s"> (Along a change vector)"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;matplotlib.legend.Legend at 0x7fa1f0685910&gt;
</code></pre></div></div>

<p><img src="../assets/files/images/unit_commitment_problem_102_1.png" /></p>

<p>In the above figure, the scatter plot represent the exact point values of the optimal value function of MIP3. This is the function we are trying to fully determine. The line plots represent the partial optimal value functions corresponding to different values of \(\gamma_1\). As expected, each of these plots represents an upper bound on the optimal value function. An interesting point to note is that at for \(\gamma\) less than \(\approx 0.7\), the best upper bound is given by \(z(\gamma, \overline{x}(0.0))\) while for \(\gamma\) greater than \(\approx 0.7\), the best upper bound is given by \(z(\gamma, \overline{x}(0.25))\).</p>

<p>Key points:</p>
<ul>
  <li>In this case, we got lucky that the point values of the optimal value function indicate an almost linear plot. Hence, even a direct interpolation of the values may work. However, if the point values indicated a more complicated function, we would need a way to determine this function indirectly.</li>
  <li>Clearly, the current choices of \(\gamma_1 \in \{0.0, 0.25, 0.50, 0.75, 1\}\) lead to upper bounds that are not very tight. How do we choose better \(\gamma_1\)’s? As it turns out there are more effective ways to choose \(\gamma_1\) as discussed in [<a href="#References">4</a>].</li>
  <li>Even if we choose \(\gamma_1\) perfectly and determine the best upper bound function, do we know that this upper bound is actually achieved? Once again, it turns out that the best upper bound is actually achieved [<a href="#References">4</a>]</li>
  <li>Finally, here we only considered perturbations to the \(c\) vector. A similar analysis can be performed for the \(b\) vector as detailed in [<a href="#References">4</a>]</li>
</ul>

<h1 id="8-conclusion">8. Conclusion<a class="anchor" id="Conclusion"></a></h1>

<p>In this post we analyzed a prototype example of the Unit Commitment Problem. As we saw, this problem provides fertile ground for many ideas from Linear as well as Mixed Integer Programming. In particular, we examined innovative ways of modeling constraints. We also investigated ways of performing sensitivity analysis for MIPs - a harder endeavor than for LPs.</p>

<h1 id="9-references">9. References<a class="anchor" id="References"></a></h1>

<p>[1] M. Tuffaha and J. T. Gravdahl, <em>Mixed-integer formulation of unit commitment problem for power systems: Focus on start-up cost,</em> IECON 2013 - 39th Annual Conference of the IEEE Industrial Electronics Society, Vienna, Austria, 2013, pp. 8160-8165, doi: https://doi.org/10.1109/IECON.2013.6700498.</p>

<p>[2] https://www.youtube.com/watch?v=jS15dU_422Q</p>

<p>[3] Ward, J.E., Wendell, R.E. <em>Approaches to sensitivity analysis in linear programming.</em> Ann Oper Res 27, 3–38 (1990). URL: https://doi.org/10.1007/BF02055188</p>

<p>[4] Larry Jenkins, (1982) <em>Parametric Mixed Integer Programming: An Application to Solid Waste Management.</em> Management Science 28(11):1270-1284. URL: https://doi.org/10.1287/mnsc.28.11.1270</p>]]></content><author><name>Ayush Bharadwaj</name></author><summary type="html"><![CDATA[The Unit Commitment Problem (UCP) [1] in power systems is the problem of scheduling the optimal number of power generating units (or simply units) to meet the total demand in each time period (or slot) of a planning horizon. The UCP is an optimization problem that aims to minimize the running costs, startup costs and shutdown costs of the units while satisfying constraints that guarantee appropriate operating conditions for the units.]]></summary></entry><entry><title type="html">Network Optimization Case Study: Aiding Allies</title><link href="http://localhost:4000/network-optimization-case-study/" rel="alternate" type="text/html" title="Network Optimization Case Study: Aiding Allies" /><published>2023-05-18T00:00:00-07:00</published><updated>2023-05-18T00:00:00-07:00</updated><id>http://localhost:4000/network-optimization-case-study</id><content type="html" xml:base="http://localhost:4000/network-optimization-case-study/"><![CDATA[<p>[Source: Frederick S. Hillier and Gerald J. Lieberman.  <em>Introduction to Operations Research - 7th ed.</em>, 2000, McGraw-Hill, ISBN 0-07-232169-5]</p>

<p>A rebel army is attempting to overthrow the elected government of the Russian Federation. The United States government has decided to assist its ally by quickly sending troops and supplies to the Federation. A plan needs to be developed for shipping the troops and supplies most effectively. Depending on the overall measure of performance, the analysis requires formulating and solving a shortest-path problem, a minimum cost flow problem, or a maximum flow problem.</p>

<hr />
<p>Commander Votachev steps into the cold October night and deeply inhales the smoke from his cigarette, savoring its warmth. He surveys the destruction surrounding him — shattered windows, burning buildings, torn roads — and smiles. His two years of work training revolutionaries east of the Ural Mountains has proved successful; his troops now occupy seven strategically important cities in the Russian Federation: Kazan, Perm,Yekaterinburg, Ufa, Samara, Saratov, and Orenburg. His siege is not yet over, however. He looks to the west. Given the political and economic confusion in the Russian Federation at this time, he knows that his troops will be able to conquer Saint Petersburg and Moscow shortly. Commander Votachev will then be able to rule with the wisdom and control exhibited by his communist predecessors Lenin and Stalin.</p>

<p>Across the Pacific Ocean, a meeting of the top security and foreign policy advisers of the United States is in progress at the White House. The President has recently been briefed about the communist revolution masterminded by Commander Votachev and is determining a plan of action. The President reflects upon a similar October long ago in 1917, and he fears the possibility of a new age of radical Communist rule accompanied by chaos, bloodshed, escalating tensions, and possibly nuclear war. He therefore decides that the United States needs to respond and to respond quickly. Moscow has requested assistance from the United States military, and the President plans to send troops and supplies immediately.</p>

<p>The President turns to General Lankletter and asks him to describe the preparations being taken in the United States to send the necessary troops and supplies to the Russian Federation. General Lankletter informs the President that along with troops, weapons, ammunition, fuel, and supplies, aircraft, ships, and vehicles are being assembled at two port cities with airfields: Boston and Jacksonville. The aircraft and ships will transfer all troops and cargo across the Atlantic Ocean to the Eurasian continent. The general hands the President a list of the types of aircraft, ships, and vehicles being assembled along with a description of each type. The list is shown below.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Transportation Type</th>
      <th style="text-align: left">Name</th>
      <th style="text-align: left">Capacity</th>
      <th style="text-align: left">Speed</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Aircraft</td>
      <td style="text-align: left">C-141 Starlifter</td>
      <td style="text-align: left">150 tons</td>
      <td style="text-align: left">400 miles per hour</td>
    </tr>
    <tr>
      <td style="text-align: left">Ship</td>
      <td style="text-align: left">Transport</td>
      <td style="text-align: left">240 tons</td>
      <td style="text-align: left">35 miles per hour</td>
    </tr>
    <tr>
      <td style="text-align: left">Vehicle</td>
      <td style="text-align: left">Palletized Load System Truck</td>
      <td style="text-align: left">16,000 kilograms</td>
      <td style="text-align: left">60 miles per hour</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>All aircraft, ships, and vehicles are able to carry both troops and cargo.</li>
  <li>Once an aircraft or ship arrives in Europe, it stays there to support the armed forces.</li>
</ul>

<p>The President then turns to Tabitha Neal, who has been negotiating with the NATO countries for the last several hours to use their ports and airfields as stops to refuel and resupply before heading to the Russian Federation. She informs the President that the following ports and airfields in the NATO countries will be made available to the United States military.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Ports</th>
      <th style="text-align: left">Airfields</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Napoli</td>
      <td style="text-align: left">London</td>
    </tr>
    <tr>
      <td style="text-align: left">Hamburg</td>
      <td style="text-align: left">Berlin</td>
    </tr>
    <tr>
      <td style="text-align: left">Rotterdam</td>
      <td style="text-align: left">Istanbul</td>
    </tr>
  </tbody>
</table>

<p>The President stands and walks to the map of the world projected on a large screen in the middle of the room. He maps the progress of troops and cargo from the United States to three strategic cities in the Russian Federation that have not yet been seized by Commander Votachev. The three cities are Saint Petersburg, Moscow, and Rostov. He explains that the troops and cargo will be used both to defend the Russian cities and to launch a counterattack against Votachev to recapture the cities he currently occupies. The President also explains that:</p>

<ul>
  <li>All Starlifters and transports leave either Boston or Jacksonville.</li>
  <li>All transports that have traveled across the Atlantic must dock at one of the NATO ports to unload.</li>
  <li>Palletized load system trucks brought over in the transports will then carry all troops and materials unloaded from the ships at the NATO ports to the three strategic Russian cities not yet seized by Votachev - Saint Petersburg, Moscow, and Rostov.</li>
  <li>All Starlifters that have traveled across the Atlantic must land at one of the NATO airfields for refueling. The planes will then carry all troops and cargo from the NATO airfields to the three Russian cities.</li>
</ul>

<p><img src="../assets/files/images/aiding_allies_map.png" width="900" align="center" /></p>

<p>The different routes that may be taken by the troops and supplies to reach the Russian Federation from the United States are shown below:</p>

<p><img src="../assets/files/images/possible_routes_new.png" width="500" length="500" align="center" /></p>

<h2 id="scenario-1-when-time-is-of-the-essence">Scenario 1: When time is of the essence</h2>
<h3 id="the-shortest-path-problem">The shortest path problem</h3>
<p>Moscow and Washington do not know when Commander Votachev will launch his next attack. Leaders from the two countries have therefore agreed that troops should reach each of the three strategic Russian cities as quickly as possible.</p>

<p>The President has determined that the situation is so dire that cost is no object—as many Starlifters, transports, and trucks as are necessary will be used to transfer troops and cargo from the United States to Saint Petersburg, Moscow, and Rostov. Therefore,no limitations exist on the number of troops and amount of cargo that can be transferred between any cities.</p>

<p>The President has been given the following information about the length of the available routes between cities on the Atlantic leg:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">From</th>
      <th style="text-align: left">To</th>
      <th style="text-align: center">Length of route (km)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Boston</td>
      <td style="text-align: left">Berlin</td>
      <td style="text-align: center">7,250</td>
    </tr>
    <tr>
      <td style="text-align: left">Boston</td>
      <td style="text-align: left">Hamburg</td>
      <td style="text-align: center">8,250</td>
    </tr>
    <tr>
      <td style="text-align: left">Boston</td>
      <td style="text-align: left">Istanbul</td>
      <td style="text-align: center">8,300</td>
    </tr>
    <tr>
      <td style="text-align: left">Boston</td>
      <td style="text-align: left">London</td>
      <td style="text-align: center">6,200</td>
    </tr>
    <tr>
      <td style="text-align: left">Boston</td>
      <td style="text-align: left">Rotterdam</td>
      <td style="text-align: center">6,900</td>
    </tr>
    <tr>
      <td style="text-align: left">Boston</td>
      <td style="text-align: left">Napoli</td>
      <td style="text-align: center">7,950</td>
    </tr>
    <tr>
      <td style="text-align: left">Jacksonville</td>
      <td style="text-align: left">Berlin</td>
      <td style="text-align: center">9,200</td>
    </tr>
    <tr>
      <td style="text-align: left">Jacksonville</td>
      <td style="text-align: left">Hamburg</td>
      <td style="text-align: center">9,800</td>
    </tr>
    <tr>
      <td style="text-align: left">Jacksonville</td>
      <td style="text-align: left">Istanbul</td>
      <td style="text-align: center">10,100</td>
    </tr>
    <tr>
      <td style="text-align: left">Jacksonville</td>
      <td style="text-align: left">London</td>
      <td style="text-align: center">7,900</td>
    </tr>
    <tr>
      <td style="text-align: left">Jacksonville</td>
      <td style="text-align: left">Rotterdam</td>
      <td style="text-align: center">8,900</td>
    </tr>
    <tr>
      <td style="text-align: left">Jacksonville</td>
      <td style="text-align: left">Napoli</td>
      <td style="text-align: center">9,400</td>
    </tr>
  </tbody>
</table>

<p>and on the Eurasian leg:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">From</th>
      <th style="text-align: left">To</th>
      <th style="text-align: center">Length of route (km)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Berlin</td>
      <td style="text-align: left">Saint Petersburg</td>
      <td style="text-align: center">1,280</td>
    </tr>
    <tr>
      <td style="text-align: left">Hamburg</td>
      <td style="text-align: left">Saint Petersburg</td>
      <td style="text-align: center">1,880</td>
    </tr>
    <tr>
      <td style="text-align: left">Istanbul</td>
      <td style="text-align: left">Saint Petersburg</td>
      <td style="text-align: center">2,040</td>
    </tr>
    <tr>
      <td style="text-align: left">London</td>
      <td style="text-align: left">Saint Petersburg</td>
      <td style="text-align: center">1,980</td>
    </tr>
    <tr>
      <td style="text-align: left">Rotterdam</td>
      <td style="text-align: left">Saint Petersburg</td>
      <td style="text-align: center">2,200</td>
    </tr>
    <tr>
      <td style="text-align: left">Napoli</td>
      <td style="text-align: left">Saint Petersburg</td>
      <td style="text-align: center">2,970</td>
    </tr>
    <tr>
      <td style="text-align: left">Berlin</td>
      <td style="text-align: left">Moscow</td>
      <td style="text-align: center">1,600</td>
    </tr>
    <tr>
      <td style="text-align: left">Hamburg</td>
      <td style="text-align: left">Moscow</td>
      <td style="text-align: center">2,120</td>
    </tr>
    <tr>
      <td style="text-align: left">Istanbul</td>
      <td style="text-align: left">Moscow</td>
      <td style="text-align: center">1,700</td>
    </tr>
    <tr>
      <td style="text-align: left">London</td>
      <td style="text-align: left">Moscow</td>
      <td style="text-align: center">2,300</td>
    </tr>
    <tr>
      <td style="text-align: left">Rotterdam</td>
      <td style="text-align: left">Moscow</td>
      <td style="text-align: center">2,450</td>
    </tr>
    <tr>
      <td style="text-align: left">Napoli</td>
      <td style="text-align: left">Moscow</td>
      <td style="text-align: center">2,890</td>
    </tr>
    <tr>
      <td style="text-align: left">Berlin</td>
      <td style="text-align: left">Rostov</td>
      <td style="text-align: center">1,730</td>
    </tr>
    <tr>
      <td style="text-align: left">Hamburg</td>
      <td style="text-align: left">Rostov</td>
      <td style="text-align: center">2,470</td>
    </tr>
    <tr>
      <td style="text-align: left">Istanbul</td>
      <td style="text-align: left">Rostov</td>
      <td style="text-align: center">990</td>
    </tr>
    <tr>
      <td style="text-align: left">London</td>
      <td style="text-align: left">Rostov</td>
      <td style="text-align: center">2,860</td>
    </tr>
    <tr>
      <td style="text-align: left">Rotterdam</td>
      <td style="text-align: left">Rostov</td>
      <td style="text-align: center">2,760</td>
    </tr>
    <tr>
      <td style="text-align: left">Napoli</td>
      <td style="text-align: left">Rostov</td>
      <td style="text-align: center">2,800</td>
    </tr>
  </tbody>
</table>

<p>Given the distance and the speed of the transportation used between each pair of cities, how can the President most quickly move troops from the United States to each of the three strategic Russian cities?</p>

<h3 id="dijkstras-shortest-path-model">Dijkstra’s shortest path model</h3>
<p>Since Question 1 is only concerned with the minimum time taken by the troops to reach Russia, we can model this problem as a <em>shortest path problem</em> with each edge length representing the time taken to travel from the source node to the target node. The problem can then be solved using <em>Dijkstra’s shortest path algorithm</em>. We will use the helper classes and methods provided by the custom <a href="https://github.com/ayusbhar2/operations_research/tree/main/solver">solver</a> module to solve the problem.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="c1"># my solver module
</span><span class="kn">from</span> <span class="nn">solver.algorithms</span> <span class="kn">import</span> <span class="n">get_shortest_path</span>
<span class="kn">from</span> <span class="nn">solver.classes</span> <span class="kn">import</span> <span class="n">Edge</span><span class="p">,</span> <span class="n">Graph</span>
<span class="kn">from</span> <span class="nn">solver.utils</span> <span class="kn">import</span> <span class="n">get_result_summary</span><span class="p">,</span> <span class="n">get_variable</span><span class="p">,</span> <span class="n">prettify</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">seed</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>

<span class="n">AIR_SPEED_KMPH</span> <span class="o">=</span> <span class="mi">400</span> <span class="o">*</span> <span class="mf">1.60934</span>  <span class="c1"># from MPH to KMPH
</span><span class="n">WATER_SPEED_KMPH</span> <span class="o">=</span> <span class="mi">35</span> <span class="o">*</span> <span class="mf">1.60934</span>
<span class="n">LAND_SPEED_KMPH</span> <span class="o">=</span> <span class="mi">60</span> <span class="o">*</span> <span class="mf">1.60934</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Create the network graph with provided edges
</span><span class="n">graph</span> <span class="o">=</span> <span class="n">Graph</span><span class="p">([</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Boston'</span><span class="p">,</span> <span class="s">'Berlin'</span><span class="p">,</span> <span class="n">distance_km</span><span class="o">=</span><span class="mi">7250</span><span class="p">,</span> <span class="n">route_type</span><span class="o">=</span><span class="s">'air'</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Boston'</span><span class="p">,</span> <span class="s">'Hamburg'</span><span class="p">,</span> <span class="n">distance_km</span><span class="o">=</span><span class="mi">8250</span><span class="p">,</span> <span class="n">route_type</span><span class="o">=</span><span class="s">'sea'</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Boston'</span><span class="p">,</span> <span class="s">'Istanbul'</span><span class="p">,</span> <span class="n">distance_km</span><span class="o">=</span><span class="mi">8300</span><span class="p">,</span> <span class="n">route_type</span><span class="o">=</span><span class="s">'air'</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Boston'</span><span class="p">,</span> <span class="s">'London'</span><span class="p">,</span> <span class="n">distance_km</span><span class="o">=</span><span class="mi">6200</span><span class="p">,</span> <span class="n">route_type</span><span class="o">=</span><span class="s">'air'</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Boston'</span><span class="p">,</span> <span class="s">'Rotterdam'</span><span class="p">,</span> <span class="n">distance_km</span><span class="o">=</span><span class="mi">6900</span><span class="p">,</span> <span class="n">route_type</span><span class="o">=</span><span class="s">'sea'</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Boston'</span><span class="p">,</span> <span class="s">'Napoli'</span><span class="p">,</span> <span class="n">distance_km</span><span class="o">=</span><span class="mi">7950</span><span class="p">,</span> <span class="n">route_type</span><span class="o">=</span><span class="s">'sea'</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Jacksonville'</span><span class="p">,</span> <span class="s">'Berlin'</span><span class="p">,</span> <span class="n">distance_km</span><span class="o">=</span><span class="mi">9200</span><span class="p">,</span> <span class="n">route_type</span><span class="o">=</span><span class="s">'air'</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Jacksonville'</span><span class="p">,</span> <span class="s">'Hamburg'</span><span class="p">,</span> <span class="n">distance_km</span><span class="o">=</span><span class="mi">9800</span><span class="p">,</span> <span class="n">route_type</span><span class="o">=</span><span class="s">'sea'</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Jacksonville'</span><span class="p">,</span> <span class="s">'Istanbul'</span><span class="p">,</span> <span class="n">distance_km</span><span class="o">=</span><span class="mi">10100</span><span class="p">,</span> <span class="n">route_type</span><span class="o">=</span><span class="s">'air'</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Jacksonville'</span><span class="p">,</span> <span class="s">'London'</span><span class="p">,</span> <span class="n">distance_km</span><span class="o">=</span><span class="mi">7900</span><span class="p">,</span> <span class="n">route_type</span><span class="o">=</span><span class="s">'air'</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Jacksonville'</span><span class="p">,</span> <span class="s">'Rotterdam'</span><span class="p">,</span> <span class="n">distance_km</span><span class="o">=</span><span class="mi">8900</span><span class="p">,</span> <span class="n">route_type</span><span class="o">=</span><span class="s">'sea'</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Jacksonville'</span><span class="p">,</span> <span class="s">'Napoli'</span><span class="p">,</span> <span class="n">distance_km</span><span class="o">=</span><span class="mi">9400</span><span class="p">,</span> <span class="n">route_type</span><span class="o">=</span><span class="s">'sea'</span><span class="p">),</span>
    
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Berlin'</span><span class="p">,</span> <span class="s">'StPetersburg'</span><span class="p">,</span> <span class="n">distance_km</span><span class="o">=</span><span class="mi">1280</span><span class="p">,</span> <span class="n">route_type</span><span class="o">=</span><span class="s">'air'</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Hamburg'</span><span class="p">,</span> <span class="s">'StPetersburg'</span><span class="p">,</span> <span class="n">distance_km</span><span class="o">=</span><span class="mi">1880</span><span class="p">,</span> <span class="n">route_type</span><span class="o">=</span><span class="s">'land'</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Istanbul'</span><span class="p">,</span> <span class="s">'StPetersburg'</span><span class="p">,</span> <span class="n">distance_km</span><span class="o">=</span><span class="mi">2040</span><span class="p">,</span> <span class="n">route_type</span><span class="o">=</span><span class="s">'air'</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'London'</span><span class="p">,</span> <span class="s">'StPetersburg'</span><span class="p">,</span> <span class="n">distance_km</span><span class="o">=</span><span class="mi">1980</span><span class="p">,</span> <span class="n">route_type</span><span class="o">=</span><span class="s">'air'</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Rotterdam'</span><span class="p">,</span> <span class="s">'StPetersburg'</span><span class="p">,</span> <span class="n">distance_km</span><span class="o">=</span><span class="mi">2200</span><span class="p">,</span> <span class="n">route_type</span><span class="o">=</span><span class="s">'land'</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Napoli'</span><span class="p">,</span> <span class="s">'StPetersburg'</span><span class="p">,</span> <span class="n">distance_km</span><span class="o">=</span><span class="mi">2970</span><span class="p">,</span> <span class="n">route_type</span><span class="o">=</span><span class="s">'land'</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Berlin'</span><span class="p">,</span> <span class="s">'Moscow'</span><span class="p">,</span> <span class="n">distance_km</span><span class="o">=</span><span class="mi">1600</span><span class="p">,</span> <span class="n">route_type</span><span class="o">=</span><span class="s">'air'</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Hamburg'</span><span class="p">,</span> <span class="s">'Moscow'</span><span class="p">,</span> <span class="n">distance_km</span><span class="o">=</span><span class="mi">2120</span><span class="p">,</span> <span class="n">route_type</span><span class="o">=</span><span class="s">'land'</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Istanbul'</span><span class="p">,</span> <span class="s">'Moscow'</span><span class="p">,</span> <span class="n">distance_km</span><span class="o">=</span><span class="mi">1700</span><span class="p">,</span> <span class="n">route_type</span><span class="o">=</span><span class="s">'air'</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'London'</span><span class="p">,</span> <span class="s">'Moscow'</span><span class="p">,</span> <span class="n">distance_km</span><span class="o">=</span><span class="mi">2300</span><span class="p">,</span> <span class="n">route_type</span><span class="o">=</span><span class="s">'air'</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Rotterdam'</span><span class="p">,</span> <span class="s">'Moscow'</span><span class="p">,</span> <span class="n">distance_km</span><span class="o">=</span><span class="mi">2450</span><span class="p">,</span> <span class="n">route_type</span><span class="o">=</span><span class="s">'land'</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Napoli'</span><span class="p">,</span> <span class="s">'Moscow'</span><span class="p">,</span> <span class="n">distance_km</span><span class="o">=</span><span class="mi">2890</span><span class="p">,</span> <span class="n">route_type</span><span class="o">=</span><span class="s">'land'</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Berlin'</span><span class="p">,</span> <span class="s">'Rostov'</span><span class="p">,</span> <span class="n">distance_km</span><span class="o">=</span><span class="mi">1730</span><span class="p">,</span> <span class="n">route_type</span><span class="o">=</span><span class="s">'air'</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Hamburg'</span><span class="p">,</span> <span class="s">'Rostov'</span><span class="p">,</span> <span class="n">distance_km</span><span class="o">=</span><span class="mi">2470</span><span class="p">,</span> <span class="n">route_type</span><span class="o">=</span><span class="s">'land'</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Istanbul'</span><span class="p">,</span> <span class="s">'Rostov'</span><span class="p">,</span> <span class="n">distance_km</span><span class="o">=</span><span class="mi">990</span><span class="p">,</span> <span class="n">route_type</span><span class="o">=</span><span class="s">'air'</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'London'</span><span class="p">,</span> <span class="s">'Rostov'</span><span class="p">,</span> <span class="n">distance_km</span><span class="o">=</span><span class="mi">2860</span><span class="p">,</span> <span class="n">route_type</span><span class="o">=</span><span class="s">'air'</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Rotterdam'</span><span class="p">,</span> <span class="s">'Rostov'</span><span class="p">,</span> <span class="n">distance_km</span><span class="o">=</span><span class="mi">2760</span><span class="p">,</span> <span class="n">route_type</span><span class="o">=</span><span class="s">'land'</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Napoli'</span><span class="p">,</span> <span class="s">'Rostov'</span><span class="p">,</span> <span class="n">distance_km</span><span class="o">=</span><span class="mi">2800</span><span class="p">,</span> <span class="n">route_type</span><span class="o">=</span><span class="s">'land'</span><span class="p">),</span>
<span class="p">])</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Update all edges with a non-negative time-cost
</span><span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">.</span><span class="n">edges</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">edge</span><span class="p">.</span><span class="n">route_type</span> <span class="o">==</span> <span class="s">'air'</span><span class="p">:</span>
        <span class="n">time_hr</span> <span class="o">=</span> <span class="n">edge</span><span class="p">.</span><span class="n">distance_km</span> <span class="o">/</span> <span class="n">AIR_SPEED_KMPH</span>
    <span class="k">elif</span> <span class="n">edge</span><span class="p">.</span><span class="n">route_type</span> <span class="o">==</span> <span class="s">'sea'</span><span class="p">:</span>
        <span class="n">time_hr</span> <span class="o">=</span> <span class="n">edge</span><span class="p">.</span><span class="n">distance_km</span> <span class="o">/</span> <span class="n">WATER_SPEED_KMPH</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">time_hr</span> <span class="o">=</span> <span class="n">edge</span><span class="p">.</span><span class="n">distance_km</span> <span class="o">/</span> <span class="n">LAND_SPEED_KMPH</span>
    <span class="n">edge</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="n">time_hr</span><span class="p">)</span> <span class="c1"># edge cost is needed for shortest path algorithm
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">get_shortest_path</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="s">'Jacksonville'</span><span class="p">,</span> <span class="n">target_name</span><span class="o">=</span><span class="s">'StPetersburg'</span><span class="p">,</span> <span class="n">algorithm</span><span class="o">=</span><span class="s">'dijkstra'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(15.347906595250226, ['Jacksonville', 'London', 'StPetersburg'])
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">get_shortest_path</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="s">'Boston'</span><span class="p">,</span> <span class="n">target_name</span><span class="o">=</span><span class="s">'StPetersburg'</span><span class="p">,</span> <span class="n">algorithm</span><span class="o">=</span><span class="s">'dijkstra'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(12.707072464488547, ['Boston', 'London', 'StPetersburg'])
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">get_shortest_path</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="s">'Jacksonville'</span><span class="p">,</span> <span class="n">target_name</span><span class="o">=</span><span class="s">'Moscow'</span><span class="p">,</span> <span class="n">algorithm</span><span class="o">=</span><span class="s">'dijkstra'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(15.845004784570072, ['Jacksonville', 'London', 'Moscow'])
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">get_shortest_path</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="s">'Boston'</span><span class="p">,</span> <span class="n">target_name</span><span class="o">=</span><span class="s">'Moscow'</span><span class="p">,</span> <span class="n">algorithm</span><span class="o">=</span><span class="s">'dijkstra'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(13.204170653808394, ['Boston', 'London', 'Moscow'])
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">get_shortest_path</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="s">'Jacksonville'</span><span class="p">,</span> <span class="n">target_name</span><span class="o">=</span><span class="s">'Rostov'</span><span class="p">,</span> <span class="n">algorithm</span><span class="o">=</span><span class="s">'dijkstra'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(16.7149266158798, ['Jacksonville', 'London', 'Rostov'])
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">get_shortest_path</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="s">'Boston'</span><span class="p">,</span> <span class="n">target_name</span><span class="o">=</span><span class="s">'Rostov'</span><span class="p">,</span> <span class="n">algorithm</span><span class="o">=</span><span class="s">'dijkstra'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(13.949817937788161, ['Boston', 'Berlin', 'Rostov'])
</code></pre></div></div>

<p>From the above results we see that the fastest way to get troops and supplies to each of the three strategic Russian cities is:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Boston --&gt; London --&gt; Saint Petersburg (12.70 hr)</code></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Boston --&gt; London --&gt; Moscow (13.20 hr)</code></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Boston --&gt; Berlin --&gt; Rostov (13.95 hr)</code></p>
  </li>
</ul>

<h3 id="the-binary-integer-programming-model">The Binary Integer Programming model</h3>

<p>We can also model the above problem as a binary integer program as follows.</p>

<p>Parameters:</p>

\[c_{j, k} := \text{ the "cost" associated with edge } (j, k)\]

<p>Variables:</p>

\[x_i:= \begin{cases}
1 \text{ if node i is on the path}\\
0 \text{ otherwise}
\end{cases}\]

\[y_{j, k}:= \begin{cases}
1 \text{ if edge (j, k) is on the path}\\
0 \text{ otherwise}
\end{cases}\]

<p>Objective:</p>

\[\text{minimize} \sum_{j, k} y_{j, k} c_{j, k}\]

<p>Constraints:</p>

\[x_O := 1 \qquad\text{(Origin constraint)}\]

\[x_T := 1  \qquad\text{(Target constraint)}\]

\[\sum_{j} y_{j, i} \le 1 + M (1 - x_i)\ , \quad i \ne O \quad \text{(Inbound constraint 1)}\\
\sum_{j} y_{j, i} \ge 1 - M (1 - x_i)\ , \quad i \ne O \quad \text{(Inbound constraint 2)}\]

\[\sum_{k} y_{i, k} \le 1 + M (1 - x_i)\ , \quad i \ne T \quad \text{(Outbound constraint 1)}\\
\sum_{k} y_{i, k} \ge 1 - M(1 - x_i)\ , \quad i \ne T \quad \text{(Outbound constraint 2)}\]

\[x_j + x_k \ge 2 y_{j, k} \quad \forall\ j, k \quad \text{(Connectivity constraint)}\]

\[x_i , y_{j, k} \quad \text{binary}\]

<p>In order to understand how this formulation would work, let us consider the subgraph with a single source node, viz. Boston, and a single target node, viz. St. Petersburg.</p>

<p><img src="../assets/files/images/bip_formulation.png" width="500" /></p>

<p>Lets solve the above program with <code class="language-plaintext highlighter-rouge">cvxpy</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">cvxpy</span> <span class="k">as</span> <span class="n">cp</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="c1"># my custom solver module
</span><span class="kn">from</span> <span class="nn">solver.classes</span> <span class="kn">import</span> <span class="n">BinaryIntegerProblem</span>
<span class="kn">from</span> <span class="nn">solver.algorithms</span> <span class="kn">import</span> <span class="n">branch_and_bound</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#define function for conditional formatting
</span><span class="k">def</span> <span class="nf">cond_formatting</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">==</span> <span class="nb">int</span> <span class="ow">or</span> <span class="nb">type</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">==</span> <span class="nb">float</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="s">'background-color: lightgray'</span>
    <span class="k">return</span> <span class="bp">None</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_outbound_constraints</span><span class="p">(</span><span class="n">vertex_name</span><span class="p">,</span> <span class="n">graph</span><span class="p">):</span>
    <span class="n">s</span> <span class="o">=</span> <span class="s">'('</span>
    <span class="n">t</span> <span class="o">=</span> <span class="s">'('</span>
    <span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">.</span><span class="n">get_edges</span><span class="p">(</span><span class="n">source_name</span><span class="o">=</span><span class="n">vertex_name</span><span class="p">):</span>
        <span class="n">s</span> <span class="o">+=</span> <span class="s">'y_{}_{} + '</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">edge</span><span class="p">.</span><span class="n">source</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">edge</span><span class="p">.</span><span class="n">target</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
        <span class="n">t</span> <span class="o">+=</span> <span class="s">'y_{}_{} + '</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">edge</span><span class="p">.</span><span class="n">source</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">edge</span><span class="p">.</span><span class="n">target</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="p">[:</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">s</span> <span class="o">+</span> <span class="s">') &lt;= 1 + M * (1 - x_{})'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">vertex_name</span><span class="p">)</span>
    
    <span class="n">t</span> <span class="o">=</span> <span class="n">t</span><span class="p">[:</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
    <span class="n">t</span> <span class="o">=</span> <span class="n">t</span> <span class="o">+</span> <span class="s">') &gt;= 1 - M * (1 - x_{})'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">vertex_name</span><span class="p">)</span>
        
    <span class="k">return</span> <span class="n">s</span><span class="p">,</span> <span class="n">t</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_inbound_constraints</span><span class="p">(</span><span class="n">vertex_name</span><span class="p">,</span> <span class="n">graph</span><span class="p">):</span>
    <span class="n">s</span> <span class="o">=</span> <span class="s">'('</span>
    <span class="n">t</span> <span class="o">=</span> <span class="s">'('</span>
    <span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">.</span><span class="n">get_edges</span><span class="p">(</span><span class="n">target_name</span><span class="o">=</span><span class="n">vertex_name</span><span class="p">):</span>
        <span class="n">s</span> <span class="o">+=</span> <span class="s">'y_{}_{} + '</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">edge</span><span class="p">.</span><span class="n">source</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">edge</span><span class="p">.</span><span class="n">target</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
        <span class="n">t</span> <span class="o">+=</span> <span class="s">'y_{}_{} + '</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">edge</span><span class="p">.</span><span class="n">source</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">edge</span><span class="p">.</span><span class="n">target</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="p">[:</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">s</span> <span class="o">+</span> <span class="s">') &lt;= 1 + M * (1 - x_{})'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">vertex_name</span><span class="p">)</span>
    
    <span class="n">t</span> <span class="o">=</span> <span class="n">t</span><span class="p">[:</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>
    <span class="n">t</span> <span class="o">=</span> <span class="n">t</span> <span class="o">+</span> <span class="s">') &gt;= 1 - M * (1 - x_{})'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">vertex_name</span><span class="p">)</span>
        
    <span class="k">return</span> <span class="n">s</span><span class="p">,</span> <span class="n">t</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_connectivity_constraints</span><span class="p">(</span><span class="n">edge</span><span class="p">):</span>
    <span class="n">s</span> <span class="o">=</span> <span class="s">'x_{s} + x_{t} &gt;= 2 * y_{s}_{t}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">s</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">source</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">target</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">s</span>    
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Parameters
</span>
<span class="n">M</span> <span class="o">=</span> <span class="mi">1000000</span>
<span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">.</span><span class="n">edges</span><span class="p">:</span>
    <span class="k">exec</span><span class="p">(</span><span class="s">'c_{s}_{t} = edge.cost'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">s</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">source</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">target</span><span class="p">.</span><span class="n">name</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Variables
</span>
<span class="n">variables</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">.</span><span class="n">edges</span><span class="p">:</span>
    <span class="k">exec</span><span class="p">(</span><span class="s">'y_{s}_{t} = cp.Variable(1, boolean=True, name="y_{s}_{t}")'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span>
        <span class="n">s</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">source</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">target</span><span class="p">.</span><span class="n">name</span><span class="p">))</span>
    <span class="k">exec</span><span class="p">(</span><span class="s">'variables.append(y_{s}_{t})'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">s</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">source</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">target</span><span class="p">.</span><span class="n">name</span><span class="p">))</span>

<span class="k">for</span> <span class="n">vertex</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">.</span><span class="n">vertices</span><span class="p">:</span>
    <span class="k">exec</span><span class="p">(</span><span class="s">'x_{v} = cp.Variable(1, boolean=True, name="x_{v}")'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">v</span><span class="o">=</span><span class="n">vertex</span><span class="p">.</span><span class="n">name</span><span class="p">))</span>
    <span class="k">exec</span><span class="p">(</span><span class="s">'variables.append(x_{v})'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">v</span><span class="o">=</span><span class="n">vertex</span><span class="p">.</span><span class="n">name</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Constraints
</span>
<span class="n">constraints_bip</span> <span class="o">=</span> <span class="p">[</span>
    <span class="c1"># origin and destination constraints
</span>    <span class="n">x_Boston</span> <span class="o">==</span> <span class="mi">1</span><span class="p">,</span>
    <span class="n">x_Jacksonville</span> <span class="o">==</span> <span class="mi">0</span><span class="p">,</span>
    <span class="n">x_StPetersburg</span> <span class="o">==</span> <span class="mi">1</span><span class="p">,</span>
    <span class="n">x_Moscow</span> <span class="o">==</span> <span class="mi">0</span><span class="p">,</span>
    <span class="n">x_Rostov</span> <span class="o">==</span> <span class="mi">0</span><span class="p">,</span>
<span class="p">]</span>

<span class="c1"># inbound and outbound constraints
</span><span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">.</span><span class="n">vertices</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">v</span><span class="p">.</span><span class="n">name</span> <span class="o">!=</span> <span class="s">'Boston'</span> <span class="ow">and</span> <span class="n">v</span><span class="p">.</span><span class="n">name</span> <span class="o">!=</span> <span class="s">'Jacksonville'</span><span class="p">:</span>  <span class="c1"># not a source node
</span>        <span class="n">s</span><span class="p">,</span> <span class="n">t</span> <span class="o">=</span> <span class="n">get_inbound_constraints</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">graph</span><span class="p">)</span>
        <span class="n">constraints_bip</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">eval</span><span class="p">(</span><span class="n">s</span><span class="p">))</span>
        <span class="n">constraints_bip</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">eval</span><span class="p">(</span><span class="n">t</span><span class="p">))</span>
    <span class="k">if</span> <span class="n">v</span><span class="p">.</span><span class="n">name</span> <span class="o">!=</span> <span class="s">'StPetersburg'</span> <span class="ow">and</span> <span class="n">v</span><span class="p">.</span><span class="n">name</span> <span class="o">!=</span> <span class="s">'Moscow'</span> <span class="ow">and</span> <span class="n">v</span><span class="p">.</span><span class="n">name</span> <span class="o">!=</span> <span class="s">'Rostov'</span><span class="p">:</span>  <span class="c1"># not a target node
</span>        <span class="n">s</span><span class="p">,</span> <span class="n">t</span> <span class="o">=</span> <span class="n">get_outbound_constraints</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">graph</span><span class="p">)</span>
        <span class="n">constraints_bip</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">eval</span><span class="p">(</span><span class="n">s</span><span class="p">))</span>
        <span class="n">constraints_bip</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">eval</span><span class="p">(</span><span class="n">t</span><span class="p">))</span>

<span class="c1"># connectivity constraints
</span><span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">.</span><span class="n">edges</span><span class="p">:</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">get_connectivity_constraints</span><span class="p">(</span><span class="n">edge</span><span class="p">)</span>
    <span class="n">constraints_bip</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">eval</span><span class="p">(</span><span class="n">s</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Objective
</span>
<span class="n">obj_str</span> <span class="o">=</span> <span class="s">''</span>
<span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">.</span><span class="n">edges</span><span class="p">:</span>
    <span class="n">obj_str</span> <span class="o">+=</span> <span class="s">'c_{s}_{t} * y_{s}_{t} + '</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">s</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">source</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">target</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>

<span class="n">obj_str</span> <span class="o">=</span> <span class="n">obj_str</span><span class="p">[:</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>

<span class="n">objective_bip</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Minimize</span><span class="p">(</span><span class="nb">eval</span><span class="p">(</span><span class="n">obj_str</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Model
</span>
<span class="n">bip</span> <span class="o">=</span> <span class="n">BinaryIntegerProblem</span><span class="p">(</span><span class="n">objective_bip</span><span class="p">,</span> <span class="n">constraints_bip</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bip</span><span class="p">.</span><span class="n">solve</span><span class="p">(</span><span class="n">verbose</span><span class="o">=</span><span class="bp">True</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>===============================================================================
                                     CVXPY                                     
                                     v1.3.1                                    
===============================================================================
(CVXPY) Jun 07 07:08:40 PM: Your problem has 41 variables, 69 constraints, and 0 parameters.
(CVXPY) Jun 07 07:08:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Jun 07 07:08:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Jun 07 07:08:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Jun 07 07:08:40 PM: Compiling problem (target solver=GLPK_MI).
(CVXPY) Jun 07 07:08:40 PM: Reduction chain: Dcp2Cone -&gt; CvxAttr2Constr -&gt; ConeMatrixStuffing -&gt; GLPK_MI
(CVXPY) Jun 07 07:08:40 PM: Applying reduction Dcp2Cone
(CVXPY) Jun 07 07:08:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Jun 07 07:08:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Jun 07 07:08:40 PM: Applying reduction GLPK_MI
(CVXPY) Jun 07 07:08:40 PM: Finished problem compilation (took 1.239e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Jun 07 07:08:40 PM: Invoking solver GLPK_MI  to obtain a solution.
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------      0: obj =   0.000000000e+00 inf =   2.000e+00 (2)
      7: obj =   1.270707246e+01 inf =   0.000e+00 (0)
*    15: obj =   1.270707246e+01 inf =   0.000e+00 (0)
+    15: mip =     not found yet &gt;=              -inf        (1; 0)
+    15: &gt;&gt;&gt;&gt;&gt;   1.270707246e+01 &gt;=   1.270707246e+01   0.0% (1; 0)
+    15: mip =   1.270707246e+01 &gt;=     tree is empty   0.0% (0; 1)

(CVXPY) Jun 07 07:08:40 PM: Problem status: optimal
(CVXPY) Jun 07 07:08:40 PM: Optimal value: 1.271e+01
(CVXPY) Jun 07 07:08:40 PM: Compilation took 1.239e-01 seconds
(CVXPY) Jun 07 07:08:40 PM: Solver (including time spent in interface) took 8.249e-04 seconds
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">summary</span> <span class="o">=</span> <span class="n">get_result_summary</span><span class="p">(</span><span class="n">bip</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">summary</span><span class="p">[</span><span class="s">'status'</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'optimal'
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">summary</span><span class="p">[</span><span class="s">'optimal_value'</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>12.707072464488547
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df</span> <span class="o">=</span> <span class="n">prettify</span><span class="p">(</span><span class="n">summary</span><span class="p">[</span><span class="s">'optimal_solution'</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df</span><span class="p">.</span><span class="n">style</span><span class="p">.</span><span class="n">applymap</span><span class="p">(</span><span class="n">cond_formatting</span><span class="p">)</span>
</code></pre></div></div>

<style type="text/css">
#T_f391d_row1_col1, #T_f391d_row5_col1, #T_f391d_row10_col1, #T_f391d_row17_col1, #T_f391d_row34_col1 {
  background-color: lightgray;
}
</style>

<table id="T_f391d_">
  <thead>
    <tr>
      <th class="blank level0">&nbsp;</th>
      <th class="col_heading level0 col0">variable</th>
      <th class="col_heading level0 col1">value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th id="T_f391d_level0_row0" class="row_heading level0 row0">0</th>
      <td id="T_f391d_row0_col0" class="data row0 col0">x_Berlin</td>
      <td id="T_f391d_row0_col1" class="data row0 col1">0.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row1" class="row_heading level0 row1">1</th>
      <td id="T_f391d_row1_col0" class="data row1 col0">x_Boston</td>
      <td id="T_f391d_row1_col1" class="data row1 col1">1.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row2" class="row_heading level0 row2">2</th>
      <td id="T_f391d_row2_col0" class="data row2 col0">x_Hamburg</td>
      <td id="T_f391d_row2_col1" class="data row2 col1">0.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row3" class="row_heading level0 row3">3</th>
      <td id="T_f391d_row3_col0" class="data row3 col0">x_Istanbul</td>
      <td id="T_f391d_row3_col1" class="data row3 col1">0.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row4" class="row_heading level0 row4">4</th>
      <td id="T_f391d_row4_col0" class="data row4 col0">x_Jacksonville</td>
      <td id="T_f391d_row4_col1" class="data row4 col1">0.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row5" class="row_heading level0 row5">5</th>
      <td id="T_f391d_row5_col0" class="data row5 col0">x_London</td>
      <td id="T_f391d_row5_col1" class="data row5 col1">1.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row6" class="row_heading level0 row6">6</th>
      <td id="T_f391d_row6_col0" class="data row6 col0">x_Moscow</td>
      <td id="T_f391d_row6_col1" class="data row6 col1">0.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row7" class="row_heading level0 row7">7</th>
      <td id="T_f391d_row7_col0" class="data row7 col0">x_Napoli</td>
      <td id="T_f391d_row7_col1" class="data row7 col1">0.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row8" class="row_heading level0 row8">8</th>
      <td id="T_f391d_row8_col0" class="data row8 col0">x_Rostov</td>
      <td id="T_f391d_row8_col1" class="data row8 col1">0.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row9" class="row_heading level0 row9">9</th>
      <td id="T_f391d_row9_col0" class="data row9 col0">x_Rotterdam</td>
      <td id="T_f391d_row9_col1" class="data row9 col1">0.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row10" class="row_heading level0 row10">10</th>
      <td id="T_f391d_row10_col0" class="data row10 col0">x_StPetersburg</td>
      <td id="T_f391d_row10_col1" class="data row10 col1">1.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row11" class="row_heading level0 row11">11</th>
      <td id="T_f391d_row11_col0" class="data row11 col0">y_Berlin_Moscow</td>
      <td id="T_f391d_row11_col1" class="data row11 col1">0.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row12" class="row_heading level0 row12">12</th>
      <td id="T_f391d_row12_col0" class="data row12 col0">y_Berlin_Rostov</td>
      <td id="T_f391d_row12_col1" class="data row12 col1">0.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row13" class="row_heading level0 row13">13</th>
      <td id="T_f391d_row13_col0" class="data row13 col0">y_Berlin_StPetersburg</td>
      <td id="T_f391d_row13_col1" class="data row13 col1">0.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row14" class="row_heading level0 row14">14</th>
      <td id="T_f391d_row14_col0" class="data row14 col0">y_Boston_Berlin</td>
      <td id="T_f391d_row14_col1" class="data row14 col1">0.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row15" class="row_heading level0 row15">15</th>
      <td id="T_f391d_row15_col0" class="data row15 col0">y_Boston_Hamburg</td>
      <td id="T_f391d_row15_col1" class="data row15 col1">0.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row16" class="row_heading level0 row16">16</th>
      <td id="T_f391d_row16_col0" class="data row16 col0">y_Boston_Istanbul</td>
      <td id="T_f391d_row16_col1" class="data row16 col1">0.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row17" class="row_heading level0 row17">17</th>
      <td id="T_f391d_row17_col0" class="data row17 col0">y_Boston_London</td>
      <td id="T_f391d_row17_col1" class="data row17 col1">1.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row18" class="row_heading level0 row18">18</th>
      <td id="T_f391d_row18_col0" class="data row18 col0">y_Boston_Napoli</td>
      <td id="T_f391d_row18_col1" class="data row18 col1">0.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row19" class="row_heading level0 row19">19</th>
      <td id="T_f391d_row19_col0" class="data row19 col0">y_Boston_Rotterdam</td>
      <td id="T_f391d_row19_col1" class="data row19 col1">0.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row20" class="row_heading level0 row20">20</th>
      <td id="T_f391d_row20_col0" class="data row20 col0">y_Hamburg_Moscow</td>
      <td id="T_f391d_row20_col1" class="data row20 col1">0.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row21" class="row_heading level0 row21">21</th>
      <td id="T_f391d_row21_col0" class="data row21 col0">y_Hamburg_Rostov</td>
      <td id="T_f391d_row21_col1" class="data row21 col1">0.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row22" class="row_heading level0 row22">22</th>
      <td id="T_f391d_row22_col0" class="data row22 col0">y_Hamburg_StPetersburg</td>
      <td id="T_f391d_row22_col1" class="data row22 col1">0.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row23" class="row_heading level0 row23">23</th>
      <td id="T_f391d_row23_col0" class="data row23 col0">y_Istanbul_Moscow</td>
      <td id="T_f391d_row23_col1" class="data row23 col1">0.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row24" class="row_heading level0 row24">24</th>
      <td id="T_f391d_row24_col0" class="data row24 col0">y_Istanbul_Rostov</td>
      <td id="T_f391d_row24_col1" class="data row24 col1">0.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row25" class="row_heading level0 row25">25</th>
      <td id="T_f391d_row25_col0" class="data row25 col0">y_Istanbul_StPetersburg</td>
      <td id="T_f391d_row25_col1" class="data row25 col1">0.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row26" class="row_heading level0 row26">26</th>
      <td id="T_f391d_row26_col0" class="data row26 col0">y_Jacksonville_Berlin</td>
      <td id="T_f391d_row26_col1" class="data row26 col1">0.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row27" class="row_heading level0 row27">27</th>
      <td id="T_f391d_row27_col0" class="data row27 col0">y_Jacksonville_Hamburg</td>
      <td id="T_f391d_row27_col1" class="data row27 col1">0.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row28" class="row_heading level0 row28">28</th>
      <td id="T_f391d_row28_col0" class="data row28 col0">y_Jacksonville_Istanbul</td>
      <td id="T_f391d_row28_col1" class="data row28 col1">0.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row29" class="row_heading level0 row29">29</th>
      <td id="T_f391d_row29_col0" class="data row29 col0">y_Jacksonville_London</td>
      <td id="T_f391d_row29_col1" class="data row29 col1">0.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row30" class="row_heading level0 row30">30</th>
      <td id="T_f391d_row30_col0" class="data row30 col0">y_Jacksonville_Napoli</td>
      <td id="T_f391d_row30_col1" class="data row30 col1">0.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row31" class="row_heading level0 row31">31</th>
      <td id="T_f391d_row31_col0" class="data row31 col0">y_Jacksonville_Rotterdam</td>
      <td id="T_f391d_row31_col1" class="data row31 col1">0.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row32" class="row_heading level0 row32">32</th>
      <td id="T_f391d_row32_col0" class="data row32 col0">y_London_Moscow</td>
      <td id="T_f391d_row32_col1" class="data row32 col1">0.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row33" class="row_heading level0 row33">33</th>
      <td id="T_f391d_row33_col0" class="data row33 col0">y_London_Rostov</td>
      <td id="T_f391d_row33_col1" class="data row33 col1">0.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row34" class="row_heading level0 row34">34</th>
      <td id="T_f391d_row34_col0" class="data row34 col0">y_London_StPetersburg</td>
      <td id="T_f391d_row34_col1" class="data row34 col1">1.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row35" class="row_heading level0 row35">35</th>
      <td id="T_f391d_row35_col0" class="data row35 col0">y_Napoli_Moscow</td>
      <td id="T_f391d_row35_col1" class="data row35 col1">0.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row36" class="row_heading level0 row36">36</th>
      <td id="T_f391d_row36_col0" class="data row36 col0">y_Napoli_Rostov</td>
      <td id="T_f391d_row36_col1" class="data row36 col1">0.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row37" class="row_heading level0 row37">37</th>
      <td id="T_f391d_row37_col0" class="data row37 col0">y_Napoli_StPetersburg</td>
      <td id="T_f391d_row37_col1" class="data row37 col1">0.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row38" class="row_heading level0 row38">38</th>
      <td id="T_f391d_row38_col0" class="data row38 col0">y_Rotterdam_Moscow</td>
      <td id="T_f391d_row38_col1" class="data row38 col1">0.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row39" class="row_heading level0 row39">39</th>
      <td id="T_f391d_row39_col0" class="data row39 col0">y_Rotterdam_Rostov</td>
      <td id="T_f391d_row39_col1" class="data row39 col1">0.000000</td>
    </tr>
    <tr>
      <th id="T_f391d_level0_row40" class="row_heading level0 row40">40</th>
      <td id="T_f391d_row40_col0" class="data row40 col0">y_Rotterdam_StPetersburg</td>
      <td id="T_f391d_row40_col1" class="data row40 col1">0.000000</td>
    </tr>
  </tbody>
</table>

<p>The above result confirms what we already knew from the previous section - the fastest path from Boston to StPetersburg is <code class="language-plaintext highlighter-rouge">Boston --&gt; London --&gt; Saint Petersburg (12.70 hr)</code>. We can solve similar fomulations for each source-target pair to get the desired results.</p>

<p>It should not come as a surprise that the above problem could be modeled both as a BIP and a Dijkstra’s shortest path problem. In fact both these problems are solved using an algorithm that falls into the <strong>Dynamic Programming</strong> paradigm.</p>

<p>It is worth noting that most BIP solvers use some variation of the Branch and Bound algorithm which recursively solves repeated LP relaxations of the original BIP with the simplex method. Since the simplex algorithm is a polynomial time algorithm, the average total running time for the original BIP is close to polynomial in the size of the problem (i.e. number of variables). Let \(N: =\)number of vertices and \(M:=\) number of edges in the graph. Then, from the above formulation, we note that the total number of variables is \(M + N\). The average running time of the Branch and Bound algorithm is given by \(O(M + N)^p\), \(p &gt; 1\). On the other hand, Dijkstra’s shortest path algorithm has a running time of \(O(MN)\).</p>

<p>However, while the BIP formulation only works for a single source-destination pair at a time, Dijkstra’s algorithm can return the shortest path from a source node to <em>all</em> the other nodes in a single run. Hence, for larger problems, it may be advantageous to use Dijkstra’s algortihm instead of a BIP formulation.</p>

<h2 id="scenario-2-when-money-is-an-object">Scenario 2: When money <em>is</em> an object</h2>
<h3 id="a-minimum-cost-flow-problem">A minimum cost flow problem</h3>

<p>The President encounters only one problem with his first plan: he has to sell the military deployment to Congress. Under the War Powers Act, the President is required to consult with Congress before introducing troops into hostilities or situations where hostilities will occur. If Congress does not give authorization to the President for such use of troops, the President must withdraw troops after 60 days. Congress also has the power to decrease the 60-day time period by passing a concurrent resolution.</p>

<p>The President knows that Congress will not authorize significant spending for another country’s war, especially when voters have paid so much attention to decreasing the national debt. He therefore decides that he needs to find a way to get the needed troops and supplies to Saint Petersburg, Moscow, and Rostov at the minimum cost.</p>

<p>Each Russian city has contacted Washington to communicate the number of troops and supplies the city needs at a minimum for reinforcement. After analyzing the requests, General Lankletter has converted the requests from numbers of troops, gallons of gasoline, etc., to tons of cargo for easier planning. The requirements are listed below.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">City</th>
      <th style="text-align: left">Requirements</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Saint Petersburg</td>
      <td style="text-align: left">320,000 tons</td>
    </tr>
    <tr>
      <td style="text-align: left">Moscow</td>
      <td style="text-align: left">440,000 tons</td>
    </tr>
    <tr>
      <td style="text-align: left">Rostov</td>
      <td style="text-align: left">240,000 tons</td>
    </tr>
  </tbody>
</table>

<p>Both in Boston and Jacksonville there are 500,000 tons of the necessary cargo available. When the United States decides to send a plane, ship, or truck between two cities, several costs occur—fuel costs, labor costs, maintenance costs, and appropriate port or airfield taxes and tariffs. These costs are listed below.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">From</th>
      <th style="text-align: left">To</th>
      <th style="text-align: left">Cost</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Boston</td>
      <td style="text-align: left">Berlin</td>
      <td style="text-align: left">$50,000 per Starlifter</td>
    </tr>
    <tr>
      <td style="text-align: left">Boston</td>
      <td style="text-align: left">Hamburg</td>
      <td style="text-align: left">$30,000 per transport</td>
    </tr>
    <tr>
      <td style="text-align: left">Boston</td>
      <td style="text-align: left">Istanbul</td>
      <td style="text-align: left">$55,000 per Starlifter</td>
    </tr>
    <tr>
      <td style="text-align: left">Boston</td>
      <td style="text-align: left">London</td>
      <td style="text-align: left">$45,000 per Starlifter</td>
    </tr>
    <tr>
      <td style="text-align: left">Boston</td>
      <td style="text-align: left">Rotterdam</td>
      <td style="text-align: left">$30,000 per transport</td>
    </tr>
    <tr>
      <td style="text-align: left">Boston</td>
      <td style="text-align: left">Napoli</td>
      <td style="text-align: left">$32,000 per transport</td>
    </tr>
    <tr>
      <td style="text-align: left">Jacksonville</td>
      <td style="text-align: left">Berlin</td>
      <td style="text-align: left">$57,000 per Starlifter</td>
    </tr>
    <tr>
      <td style="text-align: left">Jacksonville</td>
      <td style="text-align: left">Hamburg</td>
      <td style="text-align: left">$48,000 per transport</td>
    </tr>
    <tr>
      <td style="text-align: left">Jacksonville</td>
      <td style="text-align: left">Istanbul</td>
      <td style="text-align: left">$61,000 per Starlifter</td>
    </tr>
    <tr>
      <td style="text-align: left">Jacksonville</td>
      <td style="text-align: left">London</td>
      <td style="text-align: left">$49,000 per Starlifter</td>
    </tr>
    <tr>
      <td style="text-align: left">Jacksonville</td>
      <td style="text-align: left">Rotterdam</td>
      <td style="text-align: left">$44,000 per transport</td>
    </tr>
    <tr>
      <td style="text-align: left">Jacksonville</td>
      <td style="text-align: left">Napoli</td>
      <td style="text-align: left">$56,000 per transport</td>
    </tr>
    <tr>
      <td style="text-align: left">Berlin</td>
      <td style="text-align: left">Saint Petersburg</td>
      <td style="text-align: left">$24,000 per Starlifter</td>
    </tr>
    <tr>
      <td style="text-align: left">Hamburg</td>
      <td style="text-align: left">Saint Petersburg</td>
      <td style="text-align: left">$3,000 per truck</td>
    </tr>
    <tr>
      <td style="text-align: left">Istanbul</td>
      <td style="text-align: left">Saint Petersburg</td>
      <td style="text-align: left">$28,000 per Starlifter</td>
    </tr>
    <tr>
      <td style="text-align: left">London</td>
      <td style="text-align: left">Saint Petersburg</td>
      <td style="text-align: left">$22,000 per Starlifter</td>
    </tr>
    <tr>
      <td style="text-align: left">Rotterdam</td>
      <td style="text-align: left">Saint Petersburg</td>
      <td style="text-align: left">$3,000 per truck</td>
    </tr>
    <tr>
      <td style="text-align: left">Napoli</td>
      <td style="text-align: left">Saint Petersburg</td>
      <td style="text-align: left">$ 5,000 per truck</td>
    </tr>
    <tr>
      <td style="text-align: left">Berlin</td>
      <td style="text-align: left">Moscow</td>
      <td style="text-align: left">$22,000 per Starlifter</td>
    </tr>
    <tr>
      <td style="text-align: left">Hamburg</td>
      <td style="text-align: left">Moscow</td>
      <td style="text-align: left">$ 4,000 per truck</td>
    </tr>
    <tr>
      <td style="text-align: left">Istanbul</td>
      <td style="text-align: left">Moscow</td>
      <td style="text-align: left">$25,000 per Starlifter</td>
    </tr>
    <tr>
      <td style="text-align: left">London</td>
      <td style="text-align: left">Moscow</td>
      <td style="text-align: left">$19,000 per Starlifter</td>
    </tr>
    <tr>
      <td style="text-align: left">Rotterdam</td>
      <td style="text-align: left">Moscow</td>
      <td style="text-align: left">$ 5,000 per truck</td>
    </tr>
    <tr>
      <td style="text-align: left">Napoli</td>
      <td style="text-align: left">Moscow</td>
      <td style="text-align: left">$ 5,000 per truck</td>
    </tr>
    <tr>
      <td style="text-align: left">Berlin</td>
      <td style="text-align: left">Rostov</td>
      <td style="text-align: left">$23,000 per Starlifter</td>
    </tr>
    <tr>
      <td style="text-align: left">Hamburg</td>
      <td style="text-align: left">Rostov</td>
      <td style="text-align: left">$ 7,000 per truck</td>
    </tr>
    <tr>
      <td style="text-align: left">Istanbul</td>
      <td style="text-align: left">Rostov</td>
      <td style="text-align: left">$ 2,000 per Starlifter</td>
    </tr>
    <tr>
      <td style="text-align: left">London</td>
      <td style="text-align: left">Rostov</td>
      <td style="text-align: left">$ 4,000 per Starlifter</td>
    </tr>
    <tr>
      <td style="text-align: left">Rotterdam</td>
      <td style="text-align: left">Rostov</td>
      <td style="text-align: left">$ 8,000 per truck</td>
    </tr>
    <tr>
      <td style="text-align: left">Napoli</td>
      <td style="text-align: left">Rostov</td>
      <td style="text-align: left">$ 9,000 per truck</td>
    </tr>
  </tbody>
</table>

<p>The President faces a number of restrictions when trying to satisfy the requirements. Early winter weather in northern Russia has brought a deep freeze with much snow. Therefore, General Lankletter is opposed to sending truck convoys in the area.</p>

<ul>
  <li>He convinces the President to supply Saint Petersburg only through the air.</li>
  <li>Moreover, the truck routes into Rostov are quite limited, so that from each port at most 2,500 trucks can be sent to Rostov.</li>
  <li>The Ukrainian government is very sensitive about American airplanes flying through their air space. It restricts the U.S. military to at most 200 flights from Berlin to Rostov and to at most 200 flights from London to Rostov. (The U.S. military does not want to fly around the Ukraine and is thus restricted by the Ukrainian limitations.)</li>
</ul>

<p>How does the President satisfy each Russian city’s military requirements at minimum cost?</p>

<h3 id="an-lp-model">An LP model</h3>

<p>Our scenario lends itself well to a standard minimum cost flow formulation. Boston and Jacksonville are the <em>supply nodes</em>, Saint Petersburg, Moscow and Rostov are the <em>demand nodes</em> and every other node is a <em>transshipment node</em>. Each edge has a cost per unit of cargo associated with it, and some of the edges have maximum capacities as specified in the scenario.</p>

<p><img src="../assets/files/images/possible_routes_new.png" width="600" length="600" align="center" /></p>

<p>Let us write the mathematical model for this minimum cost flow problem.</p>

<p>Parameters:</p>

\[n := \text{number of nodes in the network}\]

\[c_{i, j}:= \text{cost (\$ / ton) of transportation along (i, j)}\]

\[u_{i, j} := \text{maximum capacity (ton) of the edge (i, j)}\]

\[b_i:= \text{net amount of cargo (tons) generated at node i}\]

<p>Variables:</p>

\[x_{i, j} := \text{tons of cargo transported along the edge (i, j)}\]

<p>Objective:</p>

\[\text{minimize}\ \sum_{i=1}^n \sum_{j=1}^n c_{i, j} x_{i, j}\]

<p>Constraints:</p>

\[\sum_{j=1}^n x_{i,j} - \sum_{j=1}^n x_{j, i} = b_i\ \quad i = 1, ..., n \quad \text{(Node Flow)}\]

\[x_{i, j} \le u_{i, j} \quad \text{(Capacity)}\]

\[x_{i, j}\ge 0\quad \text{(Non-negativity)}\]

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># cleanup
</span><span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">.</span><span class="n">edges</span><span class="p">:</span>
    <span class="n">edge</span><span class="p">.</span><span class="n">delete_attr</span><span class="p">(</span><span class="s">'cost'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Parameters
</span><span class="n">ROUTE_TYPE_TO_VEHICLE</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">'air'</span><span class="p">:</span> <span class="s">'Starlifter'</span><span class="p">,</span>
    <span class="s">'sea'</span><span class="p">:</span> <span class="s">'Transport'</span><span class="p">,</span>
    <span class="s">'land'</span><span class="p">:</span> <span class="s">'Truck'</span><span class="p">,</span>
<span class="p">}</span>
<span class="n">VEHICLE_CAPACITY_TONS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">'Starlifter'</span><span class="p">:</span><span class="mi">150</span><span class="p">,</span>
    <span class="s">'Transport'</span><span class="p">:</span> <span class="mi">240</span><span class="p">,</span>
    <span class="s">'Truck'</span><span class="p">:</span> <span class="mi">16</span><span class="p">,</span>
<span class="p">}</span>
<span class="n">ROSTOV_TRUCK_NUM_LIMIT</span> <span class="o">=</span> <span class="mi">2500</span>
<span class="n">BERLIN_TO_ROSTOV_FLIGHT_NUM_LIMIT</span> <span class="o">=</span> <span class="mi">200</span>
<span class="n">LONDON_TO_ROSTOV_FLIGHT_NUM_LIMIT</span> <span class="o">=</span> <span class="mi">200</span>

<span class="n">SUPPLY_AT_BOSTON</span> <span class="o">=</span> <span class="mi">500000</span>
<span class="n">SUPPLY_AT_JACKSONVILLE</span> <span class="o">=</span> <span class="mi">500000</span>
<span class="n">DEMAND_AT_STPETERSBURG</span> <span class="o">=</span> <span class="mi">320000</span>
<span class="n">DEMAND_AT_MOSCOW</span> <span class="o">=</span> <span class="mi">440000</span>
<span class="n">DEMAND_AT_ROSTOV</span> <span class="o">=</span> <span class="mi">240000</span>

<span class="n">SUPPLY_NODES</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Boston'</span><span class="p">,</span> <span class="s">'Jacksonville'</span><span class="p">]</span>
<span class="n">DEMAND_NODES</span> <span class="o">=</span> <span class="p">[</span><span class="s">'StPetersburg'</span><span class="p">,</span> <span class="s">'Moscow'</span><span class="p">,</span> <span class="s">'Rostov'</span><span class="p">]</span>

<span class="n">EDGE_COSTS_PER_VEHICLE</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">(</span><span class="s">'Boston'</span><span class="p">,</span> <span class="s">'Berlin'</span><span class="p">):</span> <span class="mi">50000</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Boston'</span><span class="p">,</span> <span class="s">'Hamburg'</span><span class="p">):</span> <span class="mi">30000</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Boston'</span><span class="p">,</span> <span class="s">'Istanbul'</span><span class="p">):</span> <span class="mi">55000</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Boston'</span><span class="p">,</span> <span class="s">'London'</span><span class="p">):</span> <span class="mi">45000</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Boston'</span><span class="p">,</span> <span class="s">'Rotterdam'</span><span class="p">):</span> <span class="mi">30000</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Boston'</span><span class="p">,</span> <span class="s">'Napoli'</span><span class="p">):</span> <span class="mi">32000</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Jacksonville'</span><span class="p">,</span> <span class="s">'Berlin'</span><span class="p">):</span> <span class="mi">57000</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Jacksonville'</span><span class="p">,</span> <span class="s">'Hamburg'</span><span class="p">):</span> <span class="mi">48000</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Jacksonville'</span><span class="p">,</span> <span class="s">'Istanbul'</span><span class="p">):</span> <span class="mi">61000</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Jacksonville'</span><span class="p">,</span> <span class="s">'London'</span><span class="p">):</span> <span class="mi">49000</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Jacksonville'</span><span class="p">,</span> <span class="s">'Rotterdam'</span><span class="p">):</span> <span class="mi">44000</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Jacksonville'</span><span class="p">,</span> <span class="s">'Napoli'</span><span class="p">):</span> <span class="mi">56000</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Berlin'</span><span class="p">,</span> <span class="s">'StPetersburg'</span><span class="p">):</span> <span class="mi">24000</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Hamburg'</span><span class="p">,</span> <span class="s">'StPetersburg'</span><span class="p">):</span> <span class="mi">3000</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Istanbul'</span><span class="p">,</span> <span class="s">'StPetersburg'</span><span class="p">):</span> <span class="mi">28000</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'London'</span><span class="p">,</span> <span class="s">'StPetersburg'</span><span class="p">):</span> <span class="mi">22000</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Rotterdam'</span><span class="p">,</span> <span class="s">'StPetersburg'</span><span class="p">):</span> <span class="mi">3000</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Napoli'</span><span class="p">,</span> <span class="s">'StPetersburg'</span><span class="p">):</span> <span class="mi">5000</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Berlin'</span><span class="p">,</span> <span class="s">'Moscow'</span><span class="p">):</span> <span class="mi">22000</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Hamburg'</span><span class="p">,</span> <span class="s">'Moscow'</span><span class="p">):</span> <span class="mi">4000</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Istanbul'</span><span class="p">,</span> <span class="s">'Moscow'</span><span class="p">):</span> <span class="mi">25000</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'London'</span><span class="p">,</span> <span class="s">'Moscow'</span><span class="p">):</span> <span class="mi">19000</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Rotterdam'</span><span class="p">,</span> <span class="s">'Moscow'</span><span class="p">):</span> <span class="mi">5000</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Napoli'</span><span class="p">,</span> <span class="s">'Moscow'</span><span class="p">):</span> <span class="mi">5000</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Berlin'</span><span class="p">,</span> <span class="s">'Rostov'</span><span class="p">):</span> <span class="mi">23000</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Hamburg'</span><span class="p">,</span> <span class="s">'Rostov'</span><span class="p">):</span> <span class="mi">7000</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Istanbul'</span><span class="p">,</span> <span class="s">'Rostov'</span><span class="p">):</span> <span class="mi">2000</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'London'</span><span class="p">,</span> <span class="s">'Rostov'</span><span class="p">):</span> <span class="mi">4000</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Rotterdam'</span><span class="p">,</span> <span class="s">'Rostov'</span><span class="p">):</span> <span class="mi">8000</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Napoli'</span><span class="p">,</span> <span class="s">'Rostov'</span><span class="p">):</span> <span class="mi">9000</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># computing edge costs
</span>
<span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">EDGE_COSTS_PER_VEHICLE</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>  
    <span class="n">edge</span> <span class="o">=</span> <span class="n">graph</span><span class="p">.</span><span class="n">get_edge</span><span class="p">(</span><span class="n">k</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">k</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
    <span class="n">cost_per_vehicle</span> <span class="o">=</span> <span class="n">c</span>
    <span class="n">vehicle</span> <span class="o">=</span> <span class="n">ROUTE_TYPE_TO_VEHICLE</span><span class="p">[</span><span class="n">edge</span><span class="p">.</span><span class="n">route_type</span><span class="p">]</span>  
    <span class="n">vehicle_capacity_tons</span> <span class="o">=</span> <span class="n">VEHICLE_CAPACITY_TONS</span><span class="p">[</span><span class="n">vehicle</span><span class="p">]</span>
    <span class="n">cost_per_ton</span> <span class="o">=</span> <span class="n">cost_per_vehicle</span> <span class="o">/</span> <span class="n">vehicle_capacity_tons</span>
    <span class="n">edge</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">cost_per_ton</span><span class="o">=</span><span class="n">cost_per_ton</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># computing edge capacities
</span>
<span class="c1">## start with infinite edge cpacities
</span><span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">.</span><span class="n">edges</span><span class="p">:</span>
    <span class="n">edge</span><span class="p">.</span><span class="n">capacity_tons</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">inf</span>
    
<span class="c1">## Saint Petersburg is only reachable through air
</span><span class="n">edges_to_StPetersburg</span> <span class="o">=</span> <span class="n">graph</span><span class="p">.</span><span class="n">get_edges</span><span class="p">(</span><span class="n">target_name</span><span class="o">=</span><span class="s">'StPetersburg'</span><span class="p">)</span>
<span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">edges_to_StPetersburg</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">edge</span><span class="p">.</span><span class="n">route_type</span> <span class="o">==</span> <span class="s">'land'</span><span class="p">:</span>
        <span class="n">edge</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">capacity_tons</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>

<span class="c1">## Limited # of trucks to Rostov
</span><span class="n">edges_to_Rostov</span> <span class="o">=</span> <span class="n">graph</span><span class="p">.</span><span class="n">get_edges</span><span class="p">(</span><span class="n">target_name</span><span class="o">=</span><span class="s">'Rostov'</span><span class="p">)</span>
<span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">edges_to_Rostov</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">edge</span><span class="p">.</span><span class="n">route_type</span> <span class="o">==</span> <span class="s">'land'</span><span class="p">:</span>
        <span class="n">capacity_tons</span> <span class="o">=</span> <span class="n">ROSTOV_TRUCK_NUM_LIMIT</span> <span class="o">*</span> <span class="n">VEHICLE_CAPACITY_TONS</span><span class="p">[</span><span class="s">'Truck'</span><span class="p">]</span>
        <span class="n">edge</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">capacity_tons</span><span class="o">=</span><span class="n">capacity_tons</span><span class="p">)</span>

<span class="c1">## Limited # of flights over Ukrain
</span><span class="n">edge_Ber_Ros</span> <span class="o">=</span> <span class="n">graph</span><span class="p">.</span><span class="n">get_edge</span><span class="p">(</span><span class="s">'Berlin'</span><span class="p">,</span> <span class="s">'Rostov'</span><span class="p">)</span>
<span class="n">edge_Ber_Ros</span><span class="p">.</span><span class="n">capacity_tons</span> <span class="o">=</span> <span class="n">BERLIN_TO_ROSTOV_FLIGHT_NUM_LIMIT</span> <span class="o">*</span> <span class="n">VEHICLE_CAPACITY_TONS</span><span class="p">[</span><span class="s">'Starlifter'</span><span class="p">]</span>

<span class="n">edge_Lon_Ros</span> <span class="o">=</span> <span class="n">graph</span><span class="p">.</span><span class="n">get_edge</span><span class="p">(</span><span class="s">'London'</span><span class="p">,</span> <span class="s">'Rostov'</span><span class="p">)</span>
<span class="n">edge_Lon_Ros</span><span class="p">.</span><span class="n">capacity_tons</span> <span class="o">=</span> <span class="n">LONDON_TO_ROSTOV_FLIGHT_NUM_LIMIT</span> <span class="o">*</span> <span class="n">VEHICLE_CAPACITY_TONS</span><span class="p">[</span><span class="s">'Starlifter'</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">'Edge | Route_Type | Cost($/ton) | Limit(tons)'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">'---- | ---------- | ----------- | -----------'</span><span class="p">)</span>
<span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">.</span><span class="n">edges</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'{s}-{t} | {r} | {c} | {capacity}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span>
    <span class="n">s</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">source</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">target</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
        <span class="n">r</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">route_type</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="nb">round</span><span class="p">(</span><span class="n">edge</span><span class="p">.</span><span class="n">cost_per_ton</span><span class="p">),</span>
            <span class="n">capacity</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">capacity_tons</span>
    <span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Edge | Route_Type | Cost($/ton) | Limit(tons)
---- | ---------- | ----------- | -----------
Jacksonville-Istanbul | air | 407.0 | inf
Hamburg-Rostov | land | 438.0 | 40000
Jacksonville-Berlin | air | 380.0 | inf
London-StPetersburg | air | 147.0 | inf
Hamburg-StPetersburg | land | 188.0 | 0
London-Rostov | air | 27.0 | 30000
Napoli-Moscow | land | 312.0 | inf
Boston-Istanbul | air | 367.0 | inf
Jacksonville-Rotterdam | sea | 183.0 | inf
Boston-Berlin | air | 333.0 | inf
Boston-Napoli | sea | 133.0 | inf
Jacksonville-Hamburg | sea | 200.0 | inf
Hamburg-Moscow | land | 250.0 | inf
Rotterdam-Moscow | land | 312.0 | inf
Napoli-Rostov | land | 562.0 | 40000
Istanbul-Moscow | air | 167.0 | inf
Rotterdam-Rostov | land | 500.0 | 40000
Boston-London | air | 300.0 | inf
London-Moscow | air | 127.0 | inf
Boston-Rotterdam | sea | 125.0 | inf
Berlin-StPetersburg | air | 160.0 | inf
Jacksonville-Napoli | sea | 233.0 | inf
Napoli-StPetersburg | land | 312.0 | 0
Jacksonville-London | air | 327.0 | inf
Berlin-Rostov | air | 153.0 | 30000
Rotterdam-StPetersburg | land | 188.0 | 0
Berlin-Moscow | air | 147.0 | inf
Istanbul-Rostov | air | 13.0 | inf
Istanbul-StPetersburg | air | 187.0 | inf
Boston-Hamburg | sea | 125.0 | inf
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Variables
</span>
<span class="n">variables</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">.</span><span class="n">edges</span><span class="p">:</span>
    <span class="k">exec</span><span class="p">(</span><span class="s">'x_{s}_{t} = cp.Variable(1, nonneg=True, name="x_{s}_{t}")'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span>
        <span class="n">s</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">source</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">target</span><span class="p">.</span><span class="n">name</span><span class="p">))</span>
    <span class="k">exec</span><span class="p">(</span><span class="s">'variables.append(x_{s}_{t})'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span>
        <span class="n">s</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">source</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">target</span><span class="p">.</span><span class="n">name</span><span class="p">))</span>

<span class="p">[</span><span class="n">v</span><span class="p">.</span><span class="n">name</span><span class="p">()</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">variables</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>['x_Jacksonville_Istanbul',
 'x_Hamburg_Rostov',
 'x_Jacksonville_Berlin',
 'x_London_StPetersburg',
 'x_Hamburg_StPetersburg',
 'x_London_Rostov',
 'x_Napoli_Moscow',
 'x_Boston_Istanbul',
 'x_Jacksonville_Rotterdam',
 'x_Boston_Berlin',
 'x_Boston_Napoli',
 'x_Jacksonville_Hamburg',
 'x_Hamburg_Moscow',
 'x_Rotterdam_Moscow',
 'x_Napoli_Rostov',
 'x_Istanbul_Moscow',
 'x_Rotterdam_Rostov',
 'x_Boston_London',
 'x_London_Moscow',
 'x_Boston_Rotterdam',
 'x_Berlin_StPetersburg',
 'x_Jacksonville_Napoli',
 'x_Napoli_StPetersburg',
 'x_Jacksonville_London',
 'x_Berlin_Rostov',
 'x_Rotterdam_StPetersburg',
 'x_Berlin_Moscow',
 'x_Istanbul_Rostov',
 'x_Istanbul_StPetersburg',
 'x_Boston_Hamburg']
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Objective
</span>
<span class="n">obj_str</span> <span class="o">=</span> <span class="s">''</span>
<span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">.</span><span class="n">edges</span><span class="p">:</span>
    <span class="n">cost</span> <span class="o">=</span> <span class="n">edge</span><span class="p">.</span><span class="n">cost_per_ton</span>
    <span class="n">obj_str</span> <span class="o">+=</span> <span class="s">'+ {c} * x_{s}_{t}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">s</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">source</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">target</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="n">cost</span><span class="p">)</span>
    
<span class="k">exec</span><span class="p">(</span><span class="s">'obj_min_cost_flow = cp.Minimize({})'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">obj_str</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Constraints
</span>
<span class="c1">## flow constraints
</span>
<span class="n">node_flow_constraints</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">.</span><span class="n">vertices</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">v</span><span class="p">.</span><span class="n">name</span> <span class="o">==</span> <span class="s">'Boston'</span><span class="p">:</span>  <span class="c1"># supply node
</span>        <span class="n">b</span> <span class="o">=</span> <span class="n">SUPPLY_AT_BOSTON</span>
    <span class="k">elif</span> <span class="n">v</span><span class="p">.</span><span class="n">name</span> <span class="o">==</span> <span class="s">'Jacksonville'</span><span class="p">:</span>  <span class="c1"># supply node
</span>        <span class="n">b</span> <span class="o">=</span> <span class="n">SUPPLY_AT_JACKSONVILLE</span>
    <span class="k">elif</span> <span class="n">v</span><span class="p">.</span><span class="n">name</span> <span class="o">==</span> <span class="s">'StPetersburg'</span><span class="p">:</span>  <span class="c1"># demand node
</span>        <span class="n">b</span> <span class="o">=</span>  <span class="o">-</span><span class="mi">1</span> <span class="o">*</span> <span class="n">DEMAND_AT_STPETERSBURG</span>
    <span class="k">elif</span> <span class="n">v</span><span class="p">.</span><span class="n">name</span> <span class="o">==</span> <span class="s">'Moscow'</span><span class="p">:</span>  <span class="c1"># demand node
</span>        <span class="n">b</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">*</span> <span class="n">DEMAND_AT_MOSCOW</span>
    <span class="k">elif</span> <span class="n">v</span><span class="p">.</span><span class="n">name</span> <span class="o">==</span> <span class="s">'Rostov'</span><span class="p">:</span>  <span class="c1"># demand node
</span>        <span class="n">b</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">*</span> <span class="n">DEMAND_AT_ROSTOV</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">b</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># transshipment node
</span>    <span class="n">v</span><span class="p">.</span><span class="n">add_attr</span><span class="p">(</span><span class="n">b</span><span class="o">=</span><span class="n">b</span><span class="p">)</span>
        
    <span class="n">constr_out_str</span> <span class="o">=</span> <span class="s">''</span>
    <span class="n">constr_in_str</span> <span class="o">=</span> <span class="s">''</span>
    <span class="c1"># outbound
</span>    <span class="k">if</span> <span class="n">v</span><span class="p">.</span><span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">DEMAND_NODES</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">.</span><span class="n">get_edges</span><span class="p">(</span><span class="n">source_name</span><span class="o">=</span><span class="n">v</span><span class="p">.</span><span class="n">name</span><span class="p">):</span>
            <span class="n">constr_out_str</span> <span class="o">+=</span> <span class="s">'x_{s}_{t} + '</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span>
                <span class="n">s</span><span class="o">=</span><span class="n">v</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">target</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
        <span class="n">constr_out_str</span> <span class="o">=</span> <span class="n">constr_out_str</span><span class="p">[:</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span> 
    <span class="c1"># inbound
</span>    <span class="k">if</span> <span class="n">v</span><span class="p">.</span><span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">SUPPLY_NODES</span><span class="p">:</span>
        <span class="n">constr_in_str</span> <span class="o">=</span> <span class="s">''</span>
        <span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">.</span><span class="n">get_edges</span><span class="p">(</span><span class="n">target_name</span><span class="o">=</span><span class="n">v</span><span class="p">.</span><span class="n">name</span><span class="p">):</span>
            <span class="n">constr_in_str</span> <span class="o">+=</span> <span class="s">' - x_{s}_{t}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">s</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">source</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="n">v</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>

    <span class="n">constr_str</span> <span class="o">=</span> <span class="n">constr_out_str</span> <span class="o">+</span> <span class="n">constr_in_str</span> <span class="o">+</span> <span class="s">' == {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
    <span class="n">constr</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">(</span><span class="n">constr_str</span><span class="p">)</span>
    <span class="n">node_flow_constraints</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">constr</span><span class="p">)</span>
    
<span class="c1">## edge capacity constraints
</span>
<span class="n">capacity_constraints</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">.</span><span class="n">edges</span><span class="p">:</span>
    <span class="n">constr</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">(</span><span class="s">'x_{s}_{t} &lt;= edge.capacity_tons'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span>
        <span class="n">s</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">source</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">target</span><span class="p">.</span><span class="n">name</span><span class="p">))</span>
    <span class="n">capacity_constraints</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">constr</span><span class="p">)</span>
</code></pre></div></div>

<p>Note that the above problem satisfies the <strong>Feasible Solution Property</strong> of minimum cost flow problems. viz. the problem has a feasible solution only if \(\sum_{i = 1}^n b_i = 0\). Clearly in our case, this is true because the total supply at Boston and Jacksonville is equal to the total demand at St Petersburg, Moscow and Rostov, viz. \(500,000\) tons.</p>

<p>It is also worth noting that we do not need to restrict \(x_{i, j}\) to be integers. This follows from the <strong>Integer Solutions Property</strong> of minimum cost flow problems. This property implies that if \(b_i\) and \(u_{i, j}\) are integers, then so is every feasible solution of the problem. Hence, we can get away by formulating the above problem as a Linear Program and not an Integer Program!</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Model
</span><span class="n">prob_min_cost_flow</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Problem</span><span class="p">(</span><span class="n">obj_min_cost_flow</span><span class="p">,</span> <span class="n">node_flow_constraints</span> <span class="o">+</span> <span class="n">capacity_constraints</span><span class="p">)</span>
<span class="n">prob_min_cost_flow</span><span class="p">.</span><span class="n">solve</span><span class="p">(</span><span class="n">solver</span><span class="o">=</span><span class="n">cp</span><span class="p">.</span><span class="n">GLPK</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>===============================================================================
                                     CVXPY                                     
                                     v1.3.1                                    
===============================================================================
(CVXPY) Jun 07 07:08:40 PM: Your problem has 30 variables, 41 constraints, and 0 parameters.
(CVXPY) Jun 07 07:08:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Jun 07 07:08:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Jun 07 07:08:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Jun 07 07:08:40 PM: Compiling problem (target solver=GLPK).
(CVXPY) Jun 07 07:08:40 PM: Reduction chain: Dcp2Cone -&gt; CvxAttr2Constr -&gt; ConeMatrixStuffing -&gt; GLPK
(CVXPY) Jun 07 07:08:40 PM: Applying reduction Dcp2Cone
(CVXPY) Jun 07 07:08:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Jun 07 07:08:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Jun 07 07:08:40 PM: Applying reduction GLPK
(CVXPY) Jun 07 07:08:40 PM: Finished problem compilation (took 1.044e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Jun 07 07:08:40 PM: Invoking solver GLPK  to obtain a solution.
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Jun 07 07:08:40 PM: Problem status: optimal
GLPK Simplex Optimizer 5.0
71 rows, 30 columns, 120 non-zeros
      0: obj =               nan inf =   2.000e+06 (5)
      5: obj =               nan inf =   0.000e+00 (0)
*    31: obj =               nan inf =   0.000e+00 (0)
OPTIMAL LP SOLUTION FOUND
(CVXPY) Jun 07 07:08:40 PM: Optimal value: 4.129e+08
(CVXPY) Jun 07 07:08:40 PM: Compilation took 1.044e-01 seconds
(CVXPY) Jun 07 07:08:40 PM: Solver (including time spent in interface) took 7.927e-04 seconds





412866666.6666666
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">summary</span> <span class="o">=</span> <span class="n">get_result_summary</span><span class="p">(</span><span class="n">prob_min_cost_flow</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">summary</span><span class="p">[</span><span class="s">'status'</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'optimal'
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">summary</span><span class="p">[</span><span class="s">'optimal_value'</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>412866666.6666666
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df</span> <span class="o">=</span> <span class="n">prettify</span><span class="p">(</span><span class="n">summary</span><span class="p">[</span><span class="s">'optimal_solution'</span><span class="p">])</span>
<span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">.</span><span class="n">value</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">]</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>variable</th>
      <th>value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>4</th>
      <td>x_Boston_Hamburg</td>
      <td>440000.0</td>
    </tr>
    <tr>
      <th>5</th>
      <td>x_Boston_Istanbul</td>
      <td>60000.0</td>
    </tr>
    <tr>
      <th>9</th>
      <td>x_Hamburg_Moscow</td>
      <td>440000.0</td>
    </tr>
    <tr>
      <th>13</th>
      <td>x_Istanbul_Rostov</td>
      <td>210000.0</td>
    </tr>
    <tr>
      <th>17</th>
      <td>x_Jacksonville_Istanbul</td>
      <td>150000.0</td>
    </tr>
    <tr>
      <th>18</th>
      <td>x_Jacksonville_London</td>
      <td>350000.0</td>
    </tr>
    <tr>
      <th>22</th>
      <td>x_London_Rostov</td>
      <td>30000.0</td>
    </tr>
    <tr>
      <th>23</th>
      <td>x_London_StPetersburg</td>
      <td>320000.0</td>
    </tr>
  </tbody>
</table>
</div>

<p>Hence we conclude that the United States can meet the cargo requirements at three Russian cities at a minimum cost of <strong>$ 412,866,667</strong> while honoring all the specified restrictions. The corresponding optimal solution is shown below:
 <img src="../assets/files/images/min_cost_flow_optimal_soln.png" width="600" length="600" align="center" /></p>

<h2 id="scenario-3-when-you-cannot-do-everything-do-the-best-you-can">Scenario 3: When you cannot do everything, do the best you can!</h2>
<h3 id="a-maximum-flow-problem">A maximum flow problem</h3>

<p>Once the President releases the number of planes, ships, and trucks that will travel between the United States and the Russian Federation, Tabitha Neal contacts each of the American cities and NATO countries to indicate the number of planes to expect at the airfields, the number of ships to expect at the docks, and the number of trucks to expect traveling across the roads. Unfortunately, Tabitha learns that several additional restrictions exist which cannot be immediately eliminated. Because of airfield congestion and unalterable flight schedules, only a limited number of planes may be sent between any two cities. These plane limitations are given below.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">From</th>
      <th style="text-align: left">To</th>
      <th style="text-align: left">Maximum</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Boston</td>
      <td style="text-align: left">Berlin</td>
      <td style="text-align: left">300 airplanes</td>
    </tr>
    <tr>
      <td style="text-align: left">Boston</td>
      <td style="text-align: left">Istanbul</td>
      <td style="text-align: left">500 airplanes</td>
    </tr>
    <tr>
      <td style="text-align: left">Boston</td>
      <td style="text-align: left">London</td>
      <td style="text-align: left">500 airplanes</td>
    </tr>
    <tr>
      <td style="text-align: left">Jacksonville</td>
      <td style="text-align: left">Berlin</td>
      <td style="text-align: left">500 airplanes</td>
    </tr>
    <tr>
      <td style="text-align: left">Jacksonville</td>
      <td style="text-align: left">Istanbul</td>
      <td style="text-align: left">700 airplanes</td>
    </tr>
    <tr>
      <td style="text-align: left">Jacksonville</td>
      <td style="text-align: left">London</td>
      <td style="text-align: left">600 airplanes</td>
    </tr>
    <tr>
      <td style="text-align: left">Berlin</td>
      <td style="text-align: left">Saint Petersburg</td>
      <td style="text-align: left">500 airplanes</td>
    </tr>
    <tr>
      <td style="text-align: left">Istanbul</td>
      <td style="text-align: left">Saint Petersburg</td>
      <td style="text-align: left">0 airplanes</td>
    </tr>
    <tr>
      <td style="text-align: left">London</td>
      <td style="text-align: left">Saint Petersburg</td>
      <td style="text-align: left">1,000 airplanes</td>
    </tr>
    <tr>
      <td style="text-align: left">Berlin</td>
      <td style="text-align: left">Moscow</td>
      <td style="text-align: left">300 airplanes</td>
    </tr>
    <tr>
      <td style="text-align: left">Istanbul</td>
      <td style="text-align: left">Moscow</td>
      <td style="text-align: left">100 airplanes</td>
    </tr>
    <tr>
      <td style="text-align: left">London</td>
      <td style="text-align: left">Moscow</td>
      <td style="text-align: left">200 airplanes</td>
    </tr>
    <tr>
      <td style="text-align: left">Berlin</td>
      <td style="text-align: left">Rostov</td>
      <td style="text-align: left">0 airplanes</td>
    </tr>
    <tr>
      <td style="text-align: left">Istanbul</td>
      <td style="text-align: left">Rostov</td>
      <td style="text-align: left">900 airplanes</td>
    </tr>
    <tr>
      <td style="text-align: left">London</td>
      <td style="text-align: left">Rostov</td>
      <td style="text-align: left">100 airplanes</td>
    </tr>
  </tbody>
</table>

<p>In addition, because some countries fear that citizens will become alarmed if too many military trucks travel the public highways, they object to a large number of trucks traveling through their countries. These objections mean that a limited number of trucks are able to travel between certain ports and Russian cities. These limitations are listed below.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">From</th>
      <th style="text-align: left">To</th>
      <th style="text-align: left">Maximum</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Rotterdam</td>
      <td style="text-align: left">Moscow</td>
      <td style="text-align: left">600 trucks</td>
    </tr>
    <tr>
      <td style="text-align: left">Rotterdam</td>
      <td style="text-align: left">Rostov</td>
      <td style="text-align: left">750 trucks</td>
    </tr>
    <tr>
      <td style="text-align: left">Hamburg</td>
      <td style="text-align: left">Moscow</td>
      <td style="text-align: left">700 trucks</td>
    </tr>
    <tr>
      <td style="text-align: left">Hamburg</td>
      <td style="text-align: left">Rostov</td>
      <td style="text-align: left">500 trucks</td>
    </tr>
    <tr>
      <td style="text-align: left">Napoli</td>
      <td style="text-align: left">Moscow</td>
      <td style="text-align: left">1,500 trucks</td>
    </tr>
    <tr>
      <td style="text-align: left">Napoli</td>
      <td style="text-align: left">Rostov</td>
      <td style="text-align: left">1,400 trucks</td>
    </tr>
  </tbody>
</table>

<p>Tabitha learns that all shipping lanes have no capacity limits, owing to the American control of the Atlantic Ocean.
The President realizes that because of all the restrictions <strong>he will not be able to satisfy all the reinforcement requirements of the three Russian cities</strong>. He decides to disregard the cost issue and instead to maximize the total amount of cargo he can get to the Russian cities.</p>

<p>How does the President maximize the total amount of cargo that reaches the Russian Federation?</p>

<h3 id="an-lp-formulation">An LP formulation</h3>

<p>The current scenario appears very similar to the standard <em>Maximum Flow</em> problem where we want to maximize the flow through a network while honoring the capacity of each edge in the network. Next, we note that <strong>the maximum flow problem is just a special case of the minimum cost flow problem</strong> and we can reuse the model in the previous section with the following modifications.</p>
<ol>
  <li>We add a new Source node \(S\) with total supply of 1 million tons and a new target node \(T\) with total demand of 1 million tons.</li>
  <li>We add a direct edge from the \(S\) to \(T\) with infinite cost and infinite capacity.</li>
  <li>We assign zero cost to all edges in the network except the edge \(S\)–&gt;\(T\).</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">M</span> <span class="o">=</span> <span class="mf">1.0e10</span>
<span class="n">SUPPLY_UPPER_BOUND_TONS</span> <span class="o">=</span> <span class="mi">1000000</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Add fictitious source and target
</span><span class="n">graph</span><span class="p">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">Edge</span><span class="p">(</span><span class="s">'S'</span><span class="p">,</span> <span class="s">'Boston'</span><span class="p">))</span>
<span class="n">graph</span><span class="p">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">Edge</span><span class="p">(</span><span class="s">'S'</span><span class="p">,</span> <span class="s">'Jacksonville'</span><span class="p">))</span>

<span class="n">graph</span><span class="p">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">Edge</span><span class="p">(</span><span class="s">'StPetersburg'</span><span class="p">,</span> <span class="s">'T'</span><span class="p">))</span>
<span class="n">graph</span><span class="p">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">Edge</span><span class="p">(</span><span class="s">'Moscow'</span><span class="p">,</span> <span class="s">'T'</span><span class="p">))</span>
<span class="n">graph</span><span class="p">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">Edge</span><span class="p">(</span><span class="s">'Rostov'</span><span class="p">,</span> <span class="s">'T'</span><span class="p">))</span>

<span class="c1"># Add a direct edge from the  𝑆 to  𝑇
</span><span class="n">graph</span><span class="p">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">Edge</span><span class="p">(</span><span class="s">'S'</span><span class="p">,</span> <span class="s">'T'</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Make all edge costs zero
</span><span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">.</span><span class="n">edges</span><span class="p">:</span>
    <span class="n">edge</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">cost_per_ton</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
    
<span class="c1"># Assign infinite cost to S--&gt;T
</span><span class="n">s_t</span> <span class="o">=</span> <span class="n">graph</span><span class="p">.</span><span class="n">get_edge</span><span class="p">(</span><span class="s">'S'</span><span class="p">,</span> <span class="s">'T'</span><span class="p">)</span>
<span class="n">s_t</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">cost_per_ton</span><span class="o">=</span><span class="n">M</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Initialize all edge capacities to infinity
</span><span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">.</span><span class="n">edges</span><span class="p">:</span>
    <span class="n">edge</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">capacity_vehicle_units</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="n">inf</span><span class="p">)</span>
    <span class="n">edge</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">capacity_tons</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="n">inf</span><span class="p">)</span>
    
<span class="c1"># Assign edge cpacities in vehicle count and tons
</span><span class="n">EDGE_CAPACITIES_IN_VEHICLE_NUMS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">(</span><span class="s">'Boston'</span><span class="p">,</span> <span class="s">'Berlin'</span><span class="p">):</span> <span class="mi">300</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Boston'</span><span class="p">,</span> <span class="s">'Istanbul'</span><span class="p">):</span> <span class="mi">500</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Boston'</span><span class="p">,</span> <span class="s">'London'</span><span class="p">):</span> <span class="mi">500</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Jacksonville'</span><span class="p">,</span> <span class="s">'Berlin'</span><span class="p">):</span> <span class="mi">500</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Jacksonville'</span><span class="p">,</span> <span class="s">'Istanbul'</span><span class="p">):</span> <span class="mi">700</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Jacksonville'</span><span class="p">,</span> <span class="s">'London'</span><span class="p">):</span> <span class="mi">600</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Berlin'</span><span class="p">,</span> <span class="s">'StPetersburg'</span><span class="p">):</span> <span class="mi">500</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Istanbul'</span><span class="p">,</span> <span class="s">'StPetersburg'</span><span class="p">):</span> <span class="mi">0</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'London'</span><span class="p">,</span> <span class="s">'StPetersburg'</span><span class="p">):</span> <span class="mi">1000</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Berlin'</span><span class="p">,</span> <span class="s">'Moscow'</span><span class="p">):</span> <span class="mi">300</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Istanbul'</span><span class="p">,</span> <span class="s">'Moscow'</span><span class="p">):</span> <span class="mi">100</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'London'</span><span class="p">,</span> <span class="s">'Moscow'</span><span class="p">):</span> <span class="mi">200</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Berlin'</span><span class="p">,</span> <span class="s">'Rostov'</span><span class="p">):</span> <span class="mi">0</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Istanbul'</span><span class="p">,</span> <span class="s">'Rostov'</span><span class="p">):</span> <span class="mi">900</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'London'</span><span class="p">,</span> <span class="s">'Rostov'</span><span class="p">):</span> <span class="mi">100</span><span class="p">,</span>

    <span class="p">(</span><span class="s">'Rotterdam'</span><span class="p">,</span> <span class="s">'Moscow'</span><span class="p">):</span> <span class="mi">600</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Rotterdam'</span><span class="p">,</span> <span class="s">'Rostov'</span><span class="p">):</span> <span class="mi">750</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Hamburg'</span><span class="p">,</span> <span class="s">'Moscow'</span><span class="p">):</span> <span class="mi">700</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Hamburg'</span><span class="p">,</span> <span class="s">'Rostov'</span><span class="p">):</span> <span class="mi">500</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Napoli'</span><span class="p">,</span> <span class="s">'Moscow'</span><span class="p">):</span> <span class="mi">1500</span><span class="p">,</span>
    <span class="p">(</span><span class="s">'Napoli'</span><span class="p">,</span> <span class="s">'Rostov'</span><span class="p">):</span> <span class="mi">1400</span><span class="p">,</span>
<span class="p">}</span>
<span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">EDGE_CAPACITIES_IN_VEHICLE_NUMS</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
    <span class="n">edge</span> <span class="o">=</span> <span class="n">graph</span><span class="p">.</span><span class="n">get_edge</span><span class="p">(</span><span class="n">k</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">k</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
    <span class="n">edge</span><span class="p">.</span><span class="n">capacity_vehicle_units</span> <span class="o">=</span> <span class="n">c</span>

    <span class="n">vehicle</span> <span class="o">=</span> <span class="n">ROUTE_TYPE_TO_VEHICLE</span><span class="p">[</span><span class="n">edge</span><span class="p">.</span><span class="n">route_type</span><span class="p">]</span>
    <span class="n">vehicle_capacity_tons</span> <span class="o">=</span> <span class="n">VEHICLE_CAPACITY_TONS</span><span class="p">[</span><span class="n">vehicle</span><span class="p">]</span>

    <span class="n">edge_capacity_tons</span> <span class="o">=</span> <span class="n">edge</span><span class="p">.</span><span class="n">capacity_vehicle_units</span> <span class="o">*</span> <span class="n">vehicle_capacity_tons</span>
    <span class="n">edge</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">capacity_tons</span><span class="o">=</span><span class="n">edge_capacity_tons</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Variables
</span><span class="n">variables</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">.</span><span class="n">edges</span><span class="p">:</span>
    <span class="k">exec</span><span class="p">(</span><span class="s">'x_{s}_{t} = cp.Variable(1, nonneg=True, name="x_{s}_{t}")'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span>
        <span class="n">s</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">source</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">target</span><span class="p">.</span><span class="n">name</span><span class="p">))</span>
    <span class="k">exec</span><span class="p">(</span><span class="s">'variables.append(x_{s}_{t})'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span>
        <span class="n">s</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">source</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">target</span><span class="p">.</span><span class="n">name</span><span class="p">))</span>

<span class="nb">sorted</span><span class="p">([</span><span class="n">v</span><span class="p">.</span><span class="n">name</span><span class="p">()</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">variables</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>['x_Berlin_Moscow',
 'x_Berlin_Rostov',
 'x_Berlin_StPetersburg',
 'x_Boston_Berlin',
 'x_Boston_Hamburg',
 'x_Boston_Istanbul',
 'x_Boston_London',
 'x_Boston_Napoli',
 'x_Boston_Rotterdam',
 'x_Hamburg_Moscow',
 'x_Hamburg_Rostov',
 'x_Hamburg_StPetersburg',
 'x_Istanbul_Moscow',
 'x_Istanbul_Rostov',
 'x_Istanbul_StPetersburg',
 'x_Jacksonville_Berlin',
 'x_Jacksonville_Hamburg',
 'x_Jacksonville_Istanbul',
 'x_Jacksonville_London',
 'x_Jacksonville_Napoli',
 'x_Jacksonville_Rotterdam',
 'x_London_Moscow',
 'x_London_Rostov',
 'x_London_StPetersburg',
 'x_Moscow_T',
 'x_Napoli_Moscow',
 'x_Napoli_Rostov',
 'x_Napoli_StPetersburg',
 'x_Rostov_T',
 'x_Rotterdam_Moscow',
 'x_Rotterdam_Rostov',
 'x_Rotterdam_StPetersburg',
 'x_S_Boston',
 'x_S_Jacksonville',
 'x_S_T',
 'x_StPetersburg_T']
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Objective
</span><span class="n">obj_str</span> <span class="o">=</span> <span class="s">''</span>
<span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">graph</span><span class="p">.</span><span class="n">edges</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">.</span><span class="n">source</span><span class="p">.</span><span class="n">name</span><span class="p">):</span>
    <span class="n">obj_str</span> <span class="o">+=</span> <span class="s">'+ {c} * x_{s}_{t}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span>
        <span class="n">s</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">source</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">target</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">cost_per_ton</span><span class="p">)</span>
    
<span class="k">exec</span><span class="p">(</span><span class="s">'obj_max_flow = cp.Minimize({})'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">obj_str</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="n">obj_max_flow</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>minimize 0.0 @ x_Berlin_StPetersburg + 0.0 @ x_Berlin_Rostov + 0.0 @ x_Berlin_Moscow + 0.0 @ x_Boston_Istanbul + 0.0 @ x_Boston_Berlin + 0.0 @ x_Boston_Napoli + 0.0 @ x_Boston_London + 0.0 @ x_Boston_Rotterdam + 0.0 @ x_Boston_Hamburg + 0.0 @ x_Hamburg_Rostov + 0.0 @ x_Hamburg_StPetersburg + 0.0 @ x_Hamburg_Moscow + 0.0 @ x_Istanbul_Moscow + 0.0 @ x_Istanbul_Rostov + 0.0 @ x_Istanbul_StPetersburg + 0.0 @ x_Jacksonville_Istanbul + 0.0 @ x_Jacksonville_Berlin + 0.0 @ x_Jacksonville_Rotterdam + 0.0 @ x_Jacksonville_Hamburg + 0.0 @ x_Jacksonville_Napoli + 0.0 @ x_Jacksonville_London + 0.0 @ x_London_StPetersburg + 0.0 @ x_London_Rostov + 0.0 @ x_London_Moscow + 0.0 @ x_Moscow_T + 0.0 @ x_Napoli_Moscow + 0.0 @ x_Napoli_Rostov + 0.0 @ x_Napoli_StPetersburg + 0.0 @ x_Rostov_T + 0.0 @ x_Rotterdam_Moscow + 0.0 @ x_Rotterdam_Rostov + 0.0 @ x_Rotterdam_StPetersburg + 10000000000.0 @ x_S_T + 0.0 @ x_S_Jacksonville + 0.0 @ x_S_Boston + 0.0 @ x_StPetersburg_T
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Constraints
## Update the node flow constraints
</span><span class="n">node_flow_constraints</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">graph</span><span class="p">.</span><span class="n">vertices</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">.</span><span class="n">name</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">v</span><span class="p">.</span><span class="n">name</span> <span class="o">==</span> <span class="s">'S'</span><span class="p">:</span>  <span class="c1"># supply node
</span>        <span class="n">b</span> <span class="o">=</span> <span class="n">SUPPLY_UPPER_BOUND_TONS</span>
    <span class="k">elif</span> <span class="n">v</span><span class="p">.</span><span class="n">name</span> <span class="o">==</span> <span class="s">'T'</span><span class="p">:</span>  <span class="c1"># demand node
</span>        <span class="n">b</span> <span class="o">=</span>  <span class="o">-</span><span class="mi">1</span> <span class="o">*</span> <span class="n">SUPPLY_UPPER_BOUND_TONS</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">b</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># transshipment node
</span>    <span class="n">v</span><span class="p">.</span><span class="n">add_attr</span><span class="p">(</span><span class="n">b</span><span class="o">=</span><span class="n">b</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'{}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">v</span><span class="p">))</span>
    
    <span class="n">constr_out_str</span> <span class="o">=</span> <span class="s">''</span>
    <span class="n">constr_in_str</span> <span class="o">=</span> <span class="s">''</span>
    <span class="c1"># outbound
</span>    <span class="k">if</span> <span class="n">v</span><span class="p">.</span><span class="n">name</span> <span class="o">!=</span> <span class="s">'T'</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">.</span><span class="n">get_edges</span><span class="p">(</span><span class="n">source_name</span><span class="o">=</span><span class="n">v</span><span class="p">.</span><span class="n">name</span><span class="p">):</span>
            <span class="n">constr_out_str</span> <span class="o">+=</span> <span class="s">'x_{s}_{t} + '</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span>
                <span class="n">s</span><span class="o">=</span><span class="n">v</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">target</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
        <span class="n">constr_out_str</span> <span class="o">=</span> <span class="n">constr_out_str</span><span class="p">[:</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span> 
    <span class="c1"># inbound
</span>    <span class="k">if</span> <span class="n">v</span><span class="p">.</span><span class="n">name</span> <span class="o">!=</span> <span class="s">'S'</span><span class="p">:</span>
        <span class="n">constr_in_str</span> <span class="o">=</span> <span class="s">''</span>
        <span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">.</span><span class="n">get_edges</span><span class="p">(</span><span class="n">target_name</span><span class="o">=</span><span class="n">v</span><span class="p">.</span><span class="n">name</span><span class="p">):</span>
            <span class="n">constr_in_str</span> <span class="o">+=</span> <span class="s">' - x_{s}_{t}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">s</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">source</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="n">v</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>

    <span class="n">constr_str</span> <span class="o">=</span> <span class="n">constr_out_str</span> <span class="o">+</span> <span class="n">constr_in_str</span> <span class="o">+</span> <span class="s">' == {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
    <span class="n">constr</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">(</span><span class="n">constr_str</span><span class="p">)</span>
    <span class="n">node_flow_constraints</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">constr</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'{}</span><span class="se">\n</span><span class="s">'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">constr</span><span class="p">))</span>   
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Vertex: Berlin
x_Berlin_StPetersburg + x_Berlin_Rostov + x_Berlin_Moscow + -x_Jacksonville_Berlin + -x_Boston_Berlin == 0.0

Vertex: Boston
x_Boston_Istanbul + x_Boston_Berlin + x_Boston_Napoli + x_Boston_London + x_Boston_Rotterdam + x_Boston_Hamburg + -x_S_Boston == 0.0

Vertex: Hamburg
x_Hamburg_Rostov + x_Hamburg_StPetersburg + x_Hamburg_Moscow + -x_Jacksonville_Hamburg + -x_Boston_Hamburg == 0.0

Vertex: Istanbul
x_Istanbul_Moscow + x_Istanbul_Rostov + x_Istanbul_StPetersburg + -x_Jacksonville_Istanbul + -x_Boston_Istanbul == 0.0

Vertex: Jacksonville
x_Jacksonville_Istanbul + x_Jacksonville_Berlin + x_Jacksonville_Rotterdam + x_Jacksonville_Hamburg + x_Jacksonville_Napoli + x_Jacksonville_London + -x_S_Jacksonville == 0.0

Vertex: London
x_London_StPetersburg + x_London_Rostov + x_London_Moscow + -x_Boston_London + -x_Jacksonville_London == 0.0

Vertex: Moscow
x_Moscow_T + -x_Napoli_Moscow + -x_Hamburg_Moscow + -x_Rotterdam_Moscow + -x_Istanbul_Moscow + -x_London_Moscow + -x_Berlin_Moscow == 0.0

Vertex: Napoli
x_Napoli_Moscow + x_Napoli_Rostov + x_Napoli_StPetersburg + -x_Boston_Napoli + -x_Jacksonville_Napoli == 0.0

Vertex: Rostov
x_Rostov_T + -x_Hamburg_Rostov + -x_London_Rostov + -x_Napoli_Rostov + -x_Rotterdam_Rostov + -x_Berlin_Rostov + -x_Istanbul_Rostov == 0.0

Vertex: Rotterdam
x_Rotterdam_Moscow + x_Rotterdam_Rostov + x_Rotterdam_StPetersburg + -x_Jacksonville_Rotterdam + -x_Boston_Rotterdam == 0.0

Vertex: S
x_S_T + x_S_Jacksonville + x_S_Boston == 1000000.0

Vertex: StPetersburg
x_StPetersburg_T + -x_London_StPetersburg + -x_Hamburg_StPetersburg + -x_Berlin_StPetersburg + -x_Napoli_StPetersburg + -x_Rotterdam_StPetersburg + -x_Istanbul_StPetersburg == 0.0

Vertex: T
-x_StPetersburg_T + -x_S_T + -x_Moscow_T + -x_Rostov_T == -1000000.0
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## Update the edge capacity constraints
</span><span class="n">capacity_constraints</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">graph</span><span class="p">.</span><span class="n">edges</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">.</span><span class="n">source</span><span class="p">.</span><span class="n">name</span><span class="p">):</span>
    <span class="n">constr</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">(</span><span class="s">'x_{s}_{t} &lt;= edge.capacity_tons'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span>
        <span class="n">s</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">source</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">target</span><span class="p">.</span><span class="n">name</span><span class="p">))</span>
    <span class="n">capacity_constraints</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">constr</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">constr</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>x_Berlin_StPetersburg &lt;= 75000.0
x_Berlin_Rostov &lt;= 0.0
x_Berlin_Moscow &lt;= 45000.0
x_Boston_Istanbul &lt;= 75000.0
x_Boston_Berlin &lt;= 45000.0
x_Boston_Napoli &lt;= inf
x_Boston_London &lt;= 75000.0
x_Boston_Rotterdam &lt;= inf
x_Boston_Hamburg &lt;= inf
x_Hamburg_Rostov &lt;= 8000.0
x_Hamburg_StPetersburg &lt;= inf
x_Hamburg_Moscow &lt;= 11200.0
x_Istanbul_Moscow &lt;= 15000.0
x_Istanbul_Rostov &lt;= 135000.0
x_Istanbul_StPetersburg &lt;= 0.0
x_Jacksonville_Istanbul &lt;= 105000.0
x_Jacksonville_Berlin &lt;= 75000.0
x_Jacksonville_Rotterdam &lt;= inf
x_Jacksonville_Hamburg &lt;= inf
x_Jacksonville_Napoli &lt;= inf
x_Jacksonville_London &lt;= 90000.0
x_London_StPetersburg &lt;= 150000.0
x_London_Rostov &lt;= 15000.0
x_London_Moscow &lt;= 30000.0
x_Moscow_T &lt;= inf
x_Napoli_Moscow &lt;= 24000.0
x_Napoli_Rostov &lt;= 22400.0
x_Napoli_StPetersburg &lt;= inf
x_Rostov_T &lt;= inf
x_Rotterdam_Moscow &lt;= 9600.0
x_Rotterdam_Rostov &lt;= 12000.0
x_Rotterdam_StPetersburg &lt;= inf
x_S_T &lt;= inf
x_S_Jacksonville &lt;= inf
x_S_Boston &lt;= inf
x_StPetersburg_T &lt;= inf
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">prob_max_flow</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Problem</span><span class="p">(</span><span class="n">obj_max_flow</span><span class="p">,</span> <span class="n">node_flow_constraints</span> <span class="o">+</span> <span class="n">capacity_constraints</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">prob_max_flow</span><span class="p">.</span><span class="n">solve</span><span class="p">(</span><span class="n">solver</span><span class="o">=</span><span class="n">cp</span><span class="p">.</span><span class="n">GLPK</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>===============================================================================
                                     CVXPY                                     
                                     v1.3.1                                    
===============================================================================
(CVXPY) Jun 07 07:08:41 PM: Your problem has 36 variables, 49 constraints, and 0 parameters.
(CVXPY) Jun 07 07:08:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Jun 07 07:08:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Jun 07 07:08:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Jun 07 07:08:41 PM: Compiling problem (target solver=GLPK).
(CVXPY) Jun 07 07:08:41 PM: Reduction chain: Dcp2Cone -&gt; CvxAttr2Constr -&gt; ConeMatrixStuffing -&gt; GLPK
(CVXPY) Jun 07 07:08:41 PM: Applying reduction Dcp2Cone
(CVXPY) Jun 07 07:08:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Jun 07 07:08:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Jun 07 07:08:41 PM: Applying reduction GLPK
(CVXPY) Jun 07 07:08:41 PM: Finished problem compilation (took 1.826e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Jun 07 07:08:41 PM: Invoking solver GLPK  to obtain a solution.
GLPK Simplex Optimizer 5.0
85 rows, 36 columns, 144 non-zeros
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Jun 07 07:08:41 PM: Problem status: optimal
      0: obj =               nan inf =   2.000e+06 (2)
      1: obj =               nan inf =   0.000e+00 (0)
*    27: obj =               nan inf =   0.000e+00 (0)
OPTIMAL LP SOLUTION FOUND
(CVXPY) Jun 07 07:08:41 PM: Optimal value: 0.000e+00
(CVXPY) Jun 07 07:08:41 PM: Compilation took 1.826e-01 seconds
(CVXPY) Jun 07 07:08:41 PM: Solver (including time spent in interface) took 8.690e-04 seconds





0.0
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">summary</span> <span class="o">=</span> <span class="n">get_result_summary</span><span class="p">(</span><span class="n">prob_max_flow</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">summary</span><span class="p">[</span><span class="s">'status'</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'optimal'
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">summary</span><span class="p">[</span><span class="s">'optimal_value'</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0.0
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df</span> <span class="o">=</span> <span class="n">prettify</span><span class="p">(</span><span class="n">summary</span><span class="p">[</span><span class="s">'optimal_solution'</span><span class="p">])</span>
<span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">.</span><span class="n">value</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">].</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="s">'variable'</span><span class="p">)</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>variable</th>
      <th>value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>x_Berlin_Moscow</td>
      <td>45000.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>x_Boston_Berlin</td>
      <td>45000.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>x_Boston_Hamburg</td>
      <td>692000.0</td>
    </tr>
    <tr>
      <th>5</th>
      <td>x_Boston_Istanbul</td>
      <td>75000.0</td>
    </tr>
    <tr>
      <th>6</th>
      <td>x_Boston_London</td>
      <td>45000.0</td>
    </tr>
    <tr>
      <th>7</th>
      <td>x_Boston_Napoli</td>
      <td>46400.0</td>
    </tr>
    <tr>
      <th>8</th>
      <td>x_Boston_Rotterdam</td>
      <td>21600.0</td>
    </tr>
    <tr>
      <th>9</th>
      <td>x_Hamburg_Moscow</td>
      <td>11200.0</td>
    </tr>
    <tr>
      <th>10</th>
      <td>x_Hamburg_Rostov</td>
      <td>8000.0</td>
    </tr>
    <tr>
      <th>11</th>
      <td>x_Hamburg_StPetersburg</td>
      <td>672800.0</td>
    </tr>
    <tr>
      <th>12</th>
      <td>x_Istanbul_Moscow</td>
      <td>15000.0</td>
    </tr>
    <tr>
      <th>13</th>
      <td>x_Istanbul_Rostov</td>
      <td>135000.0</td>
    </tr>
    <tr>
      <th>17</th>
      <td>x_Jacksonville_Istanbul</td>
      <td>75000.0</td>
    </tr>
    <tr>
      <th>21</th>
      <td>x_London_Moscow</td>
      <td>30000.0</td>
    </tr>
    <tr>
      <th>22</th>
      <td>x_London_Rostov</td>
      <td>15000.0</td>
    </tr>
    <tr>
      <th>24</th>
      <td>x_Moscow_T</td>
      <td>134800.0</td>
    </tr>
    <tr>
      <th>25</th>
      <td>x_Napoli_Moscow</td>
      <td>24000.0</td>
    </tr>
    <tr>
      <th>26</th>
      <td>x_Napoli_Rostov</td>
      <td>22400.0</td>
    </tr>
    <tr>
      <th>28</th>
      <td>x_Rostov_T</td>
      <td>192400.0</td>
    </tr>
    <tr>
      <th>29</th>
      <td>x_Rotterdam_Moscow</td>
      <td>9600.0</td>
    </tr>
    <tr>
      <th>30</th>
      <td>x_Rotterdam_Rostov</td>
      <td>12000.0</td>
    </tr>
    <tr>
      <th>32</th>
      <td>x_S_Boston</td>
      <td>925000.0</td>
    </tr>
    <tr>
      <th>33</th>
      <td>x_S_Jacksonville</td>
      <td>75000.0</td>
    </tr>
    <tr>
      <th>35</th>
      <td>x_StPetersburg_T</td>
      <td>672800.0</td>
    </tr>
  </tbody>
</table>
</div>

<p>The optimal soution is shown below</p>

<p><img src="../assets/files/images/max_flow_optimal_solution_new.png" width="700" length="700" /></p>

<p>Points to note:</p>
<ul>
  <li>The total cargo (1 million tons) shipped from the US reaches the Russian Federation.</li>
  <li>However, as expected, the individual requirements of the three cities from the previous scenario could not be satisfied. E.g. the total cargo reaching Rostov is 192,400 tons while the cargo requirement at Rostov from the previous scenario was 240,000 tons.</li>
  <li>The above optimal solution is not unique. In other words, ignoring all costs, there are other ways to send all of the cargo from US to the Russian Federation.</li>
</ul>

<p>Hence, we conclude that if the President could choose to ignore the edge costs and the individual city requirements in the interest of making sure that all the intended cargo reaches the Russian Federation, the above solution will accomplish that. However, a logical question is: <em>what would the above solution cost?</em></p>

<p>In order to answer this question, we use the edge costs specified in the previous scenario.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">EDGE_COSTS_PER_VEHICLE</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>  
    <span class="n">edge</span> <span class="o">=</span> <span class="n">graph</span><span class="p">.</span><span class="n">get_edge</span><span class="p">(</span><span class="n">k</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">k</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
    <span class="n">cost_per_vehicle</span> <span class="o">=</span> <span class="n">c</span>
    <span class="n">vehicle</span> <span class="o">=</span> <span class="n">ROUTE_TYPE_TO_VEHICLE</span><span class="p">[</span><span class="n">edge</span><span class="p">.</span><span class="n">route_type</span><span class="p">]</span>  
    <span class="n">vehicle_capacity_tons</span> <span class="o">=</span> <span class="n">VEHICLE_CAPACITY_TONS</span><span class="p">[</span><span class="n">vehicle</span><span class="p">]</span>
    <span class="n">cost_per_ton</span> <span class="o">=</span> <span class="n">cost_per_vehicle</span> <span class="o">/</span> <span class="n">vehicle_capacity_tons</span>
    <span class="n">edge</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">cost_per_ton</span><span class="o">=</span><span class="n">cost_per_ton</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">obj_str</span> <span class="o">=</span> <span class="s">''</span>
<span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">.</span><span class="n">edges</span><span class="p">:</span>
    <span class="n">cost</span> <span class="o">=</span> <span class="n">edge</span><span class="p">.</span><span class="n">cost_per_ton</span>
    <span class="n">obj_str</span> <span class="o">+=</span> <span class="s">'+ {c} * x_{s}_{t}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">s</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">source</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">target</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="n">cost</span><span class="p">)</span>
    
<span class="k">exec</span><span class="p">(</span><span class="s">'obj_min_cost_flow = cp.Minimize({})'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">obj_str</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">obj_min_cost_flow</span><span class="p">.</span><span class="n">value</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>358536666.6666666
</code></pre></div></div>

<p>As seen above, the optimal solution for the maximum cost flow problem shown above has a cost of <strong>$ 358,536,667</strong>. By contrast, the optimal solution to the minimum cost flow model is <strong>$ 412,866,667</strong>. This may seem counterintuitive because we expect that trying to minimize the total cost should give a smaller optimal value. However, the reason for the above disparity is that in the minimum cost flow problem, we were trying to satisfy the demand constraints at each of the three demand nodes - Saint Petersburg, Moscow and Rostov. However, in the maximum flow problem, we relaxed these constraints and were able to achieve an overall cheaper solution!</p>

<h2 id="scenario-4-re-establishing-communications">Scenario 4: Re-establishing communications</h2>

<h3 id="a-minimum-spanning-tree-mst-problem">A minimum spanning tree (MST) problem</h3>
<p>Even before all American troops and supplies had reached Saint Petersburg, Moscow, and Rostov, infighting among Commander Votachev’s troops about whether to make the next attack against Saint Petersburg or against Moscow split the revolutionaries. Troops from Moscow easily overcame the vulnerable revolutionaries. Commander Votachev was imprisoned, and the next step became rebuilding the seven cities razed by his armies.</p>

<p>The President’s top priority is to help the Russian government to reestablish communications between the seven Russian cities and Moscow at minimum cost. The price of installing communication lines between any two Russian cities varies given the cost of shipping wire to the area, the level of destruction in the area, and the roughness of the terrain.
Luckily, a city is able to communicate with all others if it is connected only indirectly to every other city. Saint Petersburg and Rostov are already connected to Moscow, so if any of the seven cities is connected to Saint Petersburg or Rostov, it will also be connected to Moscow. The cost of replacing communication lines between two given cities for which this is possible is shown below.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Between</th>
      <th style="text-align: right">Cost($)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">Saint Petersburg and Kazan</td>
      <td style="text-align: right">210,000</td>
    </tr>
    <tr>
      <td style="text-align: left">Saint Petersburg and Perm</td>
      <td style="text-align: right">185,000</td>
    </tr>
    <tr>
      <td style="text-align: left">Saint Petersburg and Ufa</td>
      <td style="text-align: right">225,000</td>
    </tr>
    <tr>
      <td style="text-align: left">Moscow and Ufa</td>
      <td style="text-align: right">310,000</td>
    </tr>
    <tr>
      <td style="text-align: left">Moscow and Samara</td>
      <td style="text-align: right">195,000</td>
    </tr>
    <tr>
      <td style="text-align: left">Moscow and Orenburg</td>
      <td style="text-align: right">440,000</td>
    </tr>
    <tr>
      <td style="text-align: left">Moscow and Saratov</td>
      <td style="text-align: right">140,000</td>
    </tr>
    <tr>
      <td style="text-align: left">Rostov and Saratov</td>
      <td style="text-align: right">200,000</td>
    </tr>
    <tr>
      <td style="text-align: left">Rostov and Orenburg</td>
      <td style="text-align: right">120,000</td>
    </tr>
    <tr>
      <td style="text-align: left">Kazan and Perm</td>
      <td style="text-align: right">150,000</td>
    </tr>
    <tr>
      <td style="text-align: left">Kazan and Ufa</td>
      <td style="text-align: right">105,000</td>
    </tr>
    <tr>
      <td style="text-align: left">Kazan and Samara</td>
      <td style="text-align: right">95,000</td>
    </tr>
    <tr>
      <td style="text-align: left">Perm and Yekaterinburg</td>
      <td style="text-align: right">85,000</td>
    </tr>
    <tr>
      <td style="text-align: left">Perm and Ufa</td>
      <td style="text-align: right">125,000</td>
    </tr>
    <tr>
      <td style="text-align: left">Yekaterinburg and Ufa</td>
      <td style="text-align: right">125,000</td>
    </tr>
    <tr>
      <td style="text-align: left">Ufa and Samara</td>
      <td style="text-align: right">100,000</td>
    </tr>
    <tr>
      <td style="text-align: left">Ufa and Orenburg</td>
      <td style="text-align: right">75,000</td>
    </tr>
    <tr>
      <td style="text-align: left">Saratov and Samara</td>
      <td style="text-align: right">100,000</td>
    </tr>
    <tr>
      <td style="text-align: left">Saratov and Orenburg</td>
      <td style="text-align: right">95,000</td>
    </tr>
  </tbody>
</table>

<p>The minimum spanning tree problem can be solved in multiple ways. One way is to set it up as a Binary Integer Programming problem and then use a Branch and Bound algorithm to solve it. (We will see how this formulation works later.)</p>

<p>A more efficient way, especially for larger problems with sparse graphs, is to use the specialized minimum spanning tree (MST) algorithm which is more lightweight and well suited for an MST problem in the standard form (which is the case for us.) We will directly use the custom implementation of the MST algorithm from the <code class="language-plaintext highlighter-rouge">solver</code> module.</p>

<h3 id="the-mst-algorithm">The MST algorithm</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">edge_list</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'StPetersburg'</span><span class="p">,</span>  <span class="s">'Kazan'</span><span class="p">,</span> <span class="n">cost</span><span class="o">=</span><span class="mi">210000</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'StPetersburg'</span><span class="p">,</span>  <span class="s">'Perm'</span><span class="p">,</span> <span class="n">cost</span><span class="o">=</span><span class="mi">185000</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'StPetersburg'</span><span class="p">,</span>  <span class="s">'Ufa'</span><span class="p">,</span> <span class="n">cost</span><span class="o">=</span><span class="mi">225000</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Moscow'</span><span class="p">,</span>  <span class="s">'Ufa'</span><span class="p">,</span> <span class="n">cost</span><span class="o">=</span><span class="mi">310000</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Moscow'</span><span class="p">,</span>  <span class="s">'Samara'</span><span class="p">,</span> <span class="n">cost</span><span class="o">=</span><span class="mi">195000</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Moscow'</span><span class="p">,</span>  <span class="s">'Orenburg'</span><span class="p">,</span> <span class="n">cost</span><span class="o">=</span><span class="mi">440000</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Moscow'</span><span class="p">,</span>  <span class="s">'Saratov'</span><span class="p">,</span> <span class="n">cost</span><span class="o">=</span><span class="mi">140000</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Rostov'</span><span class="p">,</span>  <span class="s">'Saratov'</span><span class="p">,</span> <span class="n">cost</span><span class="o">=</span><span class="mi">200000</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Rostov'</span><span class="p">,</span>  <span class="s">'Orenburg'</span><span class="p">,</span> <span class="n">cost</span><span class="o">=</span><span class="mi">120000</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Kazan'</span><span class="p">,</span>  <span class="s">'Perm'</span><span class="p">,</span> <span class="n">cost</span><span class="o">=</span><span class="mi">150000</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Kazan'</span><span class="p">,</span>  <span class="s">'Ufa'</span><span class="p">,</span> <span class="n">cost</span><span class="o">=</span><span class="mi">105000</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Kazan'</span><span class="p">,</span>  <span class="s">'Samara'</span><span class="p">,</span> <span class="n">cost</span><span class="o">=</span><span class="mi">95000</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Perm'</span><span class="p">,</span>  <span class="s">'Yekaterinburg'</span><span class="p">,</span> <span class="n">cost</span><span class="o">=</span><span class="mi">85000</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Perm'</span><span class="p">,</span>  <span class="s">'Ufa'</span><span class="p">,</span> <span class="n">cost</span><span class="o">=</span><span class="mi">125000</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Yekaterinburg'</span><span class="p">,</span>  <span class="s">'Ufa'</span><span class="p">,</span> <span class="n">cost</span><span class="o">=</span><span class="mi">125000</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Ufa'</span><span class="p">,</span>  <span class="s">'Samara'</span><span class="p">,</span> <span class="n">cost</span><span class="o">=</span><span class="mi">100000</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Ufa'</span><span class="p">,</span>  <span class="s">'Orenburg'</span><span class="p">,</span> <span class="n">cost</span><span class="o">=</span><span class="mi">75000</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Saratov'</span><span class="p">,</span>  <span class="s">'Samara'</span><span class="p">,</span> <span class="n">cost</span><span class="o">=</span><span class="mi">100000</span><span class="p">),</span>
    <span class="n">Edge</span><span class="p">(</span><span class="s">'Saratov'</span><span class="p">,</span>  <span class="s">'Orenburg'</span><span class="p">,</span> <span class="n">cost</span><span class="o">=</span><span class="mi">95000</span><span class="p">),</span>
<span class="p">]</span>
<span class="n">graph</span> <span class="o">=</span> <span class="n">Graph</span><span class="p">(</span><span class="n">edge_list</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># make it an undirected graph
</span><span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">edge_list</span><span class="p">:</span>
    <span class="n">reverse_edge</span> <span class="o">=</span> <span class="n">Edge</span><span class="p">(</span>
        <span class="n">edge</span><span class="p">.</span><span class="n">target</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">edge</span><span class="p">.</span><span class="n">source</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">cost</span><span class="o">=</span><span class="n">edge</span><span class="p">.</span><span class="n">cost</span><span class="p">)</span>
    <span class="n">graph</span><span class="p">.</span><span class="n">add_edge</span><span class="p">(</span><span class="n">reverse_edge</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">.</span><span class="n">vertices</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Vertex: Kazan
Vertex: Samara
Vertex: Perm
Vertex: StPetersburg
Vertex: Orenburg
Vertex: Rostov
Vertex: Moscow
Vertex: Saratov
Vertex: Ufa
Vertex: Yekaterinburg
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">solver.algorithms</span> <span class="kn">import</span> <span class="n">get_minimum_spanning_tree</span>

<span class="n">tree</span> <span class="o">=</span> <span class="n">get_minimum_spanning_tree</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="n">key_attr</span><span class="o">=</span><span class="s">'cost'</span><span class="p">)</span>
<span class="n">total_cost</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">edge</span><span class="p">.</span><span class="n">cost</span> <span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">tree</span><span class="p">.</span><span class="n">edges</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">edge</span> <span class="ow">in</span> <span class="n">tree</span><span class="p">.</span><span class="n">edges</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">edge</span><span class="p">,</span> <span class="n">edge</span><span class="p">.</span><span class="n">cost</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Edge: Ufa-&gt;Yekaterinburg 125000
Edge: Perm-&gt;StPetersburg 185000
Edge: Orenburg-&gt;Ufa 75000
Edge: Kazan-&gt;Samara 95000
Edge: Saratov-&gt;Moscow 140000
Edge: Yekaterinburg-&gt;Perm 85000
Edge: Samara-&gt;Saratov 100000
Edge: Orenburg-&gt;Rostov 120000
Edge: Saratov-&gt;Orenburg 95000
</code></pre></div></div>

<p>The Minimum Spanning Tree is shown below:</p>

<p><img src="../assets/files/images/spanning_tree_solution.png" width="600" length="600" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">total_cost</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1020000
</code></pre></div></div>

<h3 id="the-bip-cutset-formulation-of-mst">The BIP (cutset) formulation of MST</h3>

<p>Given the undirected graph, we can formulate the MST problem as a BIP. Shown below is one of multiple ways this can be done. This particular formulation is called the <em>cutset</em> formulation.</p>

<p>Parameters:</p>

\[c_{i, j}:= \text{ Cost associated with edge (i, j)}\]

<p>Variables:</p>

\[y_{i, j}:= \begin{cases}1 \text{ if edge (i, j) is chosen}\\0 \text{ otherwise}\end{cases}\]

<p>Objective:</p>

\[\text{Minimize }\sum_{i=1}^n \sum_{j = 1}^n c_{i,j} y_{i, j}\]

<p>Constraints:</p>

\[y_{i, j} = y_{j, i}\quad , \forall\ i, j\qquad \text{(Symmetry)}\]

\[\sum_{i=1}^n \sum_{j=1}^n y_{i, j} = 2 (n - 1)\qquad \text{(Tree)}\]

\[\sum_{(i, j)\  \in \ \delta(S)} y_{j, i} \ge 1 \quad , \forall\ S \subset V, S\ne V, S \ne \emptyset \quad \text{(Connectivity)}\]

<p>where \(V\) the set of vertices of the graph, and \(\delta(S)\) is the <em>cutset</em> of S containing edges that have one end in \(S\) and the other in \(V \backslash S\).</p>

<p>It is worth noting that the number of connectivity constraints equals the total number of non-empty, proper subsets \(S\) of \(V\). This number is precisely \(2^n - 2\) where \(n = \mid V \mid\). As we can see, <strong>the number of connectivity constraints grows exponentially with the number of vertices in the graph</strong>. This makes the BIP formulation of the MST practically intractable and we will not go any further with this approach.</p>

<h1 id="references">References</h1>

<p>Notebook available at:</p>

<p>https://github.com/ayusbhar2/optimization/blob/main/applications/network_optimization/network_optimization.ipynb</p>]]></content><author><name>Ayush Bharadwaj</name></author><summary type="html"><![CDATA[[Source: Frederick S. Hillier and Gerald J. Lieberman. Introduction to Operations Research - 7th ed., 2000, McGraw-Hill, ISBN 0-07-232169-5] A rebel army is attempting to overthrow the elected government of the Russian Federation. The United States government has decided to assist its ally by quickly sending troops and supplies to the Federation. A plan needs to be developed for shipping the troops and supplies most effectively. Depending on the overall measure of performance, the analysis requires formulating and solving a shortest-path problem, a minimum cost flow problem, or a maximum flow problem.]]></summary></entry><entry><title type="html">Verifying Neural Network Robustness with Linear Programming</title><link href="http://localhost:4000/verifying-neural-nertwork-robustness-using-linear-programming/" rel="alternate" type="text/html" title="Verifying Neural Network Robustness with Linear Programming" /><published>2023-05-17T00:00:00-07:00</published><updated>2023-05-17T00:00:00-07:00</updated><id>http://localhost:4000/verifying-neural-nertwork-robustness-using-linear-programming</id><content type="html" xml:base="http://localhost:4000/verifying-neural-nertwork-robustness-using-linear-programming/"><![CDATA[<p><em>Robustness</em> is a desirable property in a neural network. Informally, robustness can be described as ‘resilience to perturbations in the input’. Said differently, a neural network is robust if small changes to the input produce small or no changes to the output. In particular, if the network is a classifier, robustness means that inputs close to each other should be assigned the same class by the network.</p>

<p>Ensuring robustness of networks is important because neural networks are vulnerable to adversarial examples produced by small perturbations in the input. E.g. small changes in the image of a chihuahua can lead a network to <a href="https://www.freecodecamp.org/news/chihuahua-or-muffin-my-search-for-the-best-computer-vision-api-cbda4d6b425d/">classify it as a chocolate chip muffin</a>.</p>

<p>In the subsequent sections, we will make the notion of robustness more precise. We will then explore how we can verify the robustness of a <em>trained</em> neural network using a very popular idea from mathematical optimization, viz. <em>Linear Programming</em>.</p>

<h1 id="problem-setup">Problem setup</h1>

<p>Suppose we are given a fully connected, feed forward <em>K-class classifier</em> neural network that was trained using the ReLU activation function. Note that the weights and biases of this network are fixed. Suppose the network accepts real vectors of length \(n\) as inputs and let \(F: \mathbb{R}^n \longrightarrow \{1, 2, ..., K\}\) represent the network classification function. Then we can write \(F\) as a composition of a <em>network output function</em> and a <em>labeling function</em> as described below.</p>

<p>Let \(W_i\) and \(b_i\) represent the weight matrix and the bias vector of the \(i\)th layer respectively. Then we can write the output of the \(i\)th layer recursively as follows:</p>

\[\begin{equation} \tag{1}
    z_{i} = \phi(W_{i} z_{i-1} + b_{i}) = \phi \circ \omega_i(z_{i - 1})
\end{equation}\]

<p>where \(\omega_i\) represents the affine transformation corresponding to the \(i\)th layer and \(\phi\) represents the “vectorized” version of the activation function, i.e. \(\phi(x_1, ..., x_n) = (\phi(x_1), ..., \phi(x_n))\). The network output function \(f_W: \mathbb{R}^n \longrightarrow \mathbb{R}^K\) is defined as:</p>

\[\begin{equation}\tag{2}
    f_W(x) = \phi \circ \omega_{H+1} \circ \dots \circ \phi \circ \omega_1(x)
\end{equation}\]

<p>where \(H\) is the number of hidden layers in the network. The labeling function \(\pi: \mathbb{R}^K \longrightarrow \{1, 2, ..., K\}\) is defined as:</p>

\[\begin{equation}\tag{3}
\pi(y) = \underset{i = 1, ... , K}{\text{arg max}}\ y_i
\end{equation}\]

<p>where \(K\) is the number of classes. For a given input \(x_0\), we have:</p>

\[\begin{equation}\tag{4}
    F(x_0) = \pi(f_W(x_0)) = l_0
\end{equation}\]

<p>with \(l_0\) is the class label assigned to \(x_0\) by the network. It is worth noting that we can use a different labeling function here, e.g. <em>softmax</em>, without affecting our analysis as long as the labeling function of choice is non-decreasing.</p>

<p><img src="../assets/files/images/pi_fw.png" width="350" length="350" align="center" /></p>

<h2 id="polyhedron-induced-by-a-class-label">Polyhedron induced by a class label</h2>

<p>Suppose our classifier network has \(K\) class labels. The co-domain \(\mathbb{R}^K\) of the output function can be partitioned into \(K\) polyhedra. Consider the half-space \(\mathcal{H}_{l &gt; i}\) of all the points in \(\mathbb{R}^K\) where the \(l\)th component is greater than the \(i\)th component.</p>

\[\begin{equation}\tag{5}
    \mathcal{H}_{l &gt; i} := \{y \in \mathbb{R}^K : y_l &gt; y_i\}
\end{equation}\]

<p>Suppose we fix \(l\) and take the intersection of all half-spaces \(\mathcal{H}_{l &gt; i}\), \(i \ne l\). We get the set \(S_l\) of points where the \(l\)th component is greater than every other component. (For simplicity, we assume that there are no ties among the components of \(y\), i.e. \(i \ne j \implies y_i \ne y_j\).)</p>

\[\begin{equation}\tag{6}
    S_l := \bigcap_{i \ne l} \mathcal{H}_{l &gt; i} = \{y \in \mathbb{R}^K: y_l &gt; y_i, i \ne l\}
\end{equation}\]

<p>Note that:</p>
<ul>
  <li>\(S_l\) is an intersection of half-spaces and is therefore a polyhedron.</li>
  <li>\(S_i \bigcap S_j = \emptyset\) for \(i \ne j\).</li>
  <li>\(\{S_1, ..., S_K\}\) forms a partition of \(\mathbb{R}^K\).</li>
</ul>

<p><strong>Definition</strong> <strong><em>[Polyhedron induced by a class label].</em></strong> <em>Suppose we are given a K-class classifier network and a class label \(l \in \{1, 2, ..., K\}\). Then we say that the set</em></p>

\[S_{l} = \{y \in \mathbb{R}^K: y_{l} &gt; y_i, i \ne l\}\]

<p><em>is the polyhedron induced by the class label \(l\).</em></p>

<p><strong>Remark.</strong> The output function maps an input to the corresponding induced polyhedron. Let \(x_0 \in \mathbb{R}^n\) be an input to a classifier network with classification function \(F\) and output function \(f_W\). Then,</p>

\[\begin{equation*}
     F(x_0) = l_0 \iff f_W(x_0) \subset S_{l_0}
\end{equation*}\]

<p>In other words, the network assigns the class label \(l_0\) to the input \(x_0\) if and only if \(f_W(x_0)\) lies inside the polyhedron induced by \(l_0\).</p>

<p><img src="../assets/files/images/pi_maps_Si_to_i.png" width="500" length="500" align="center" /></p>

<h2 id="formalizing-robustness-for-classifier-networks">Formalizing robustness for classifier networks</h2>
<p>Recall that we say a classifier network is robust if small perturbations to an input do not affect its classification. Let us define a set that contains all “small” perturbations of the reference input \(x_0\). We will call this set the <em>region of interest</em>. For our purposes, we will choose this set to be the \(\epsilon\)-ball around the refence input \(x_0\).</p>

<p><strong>Definition</strong> <strong><em>[Region of inerest around an input].</em></strong> <em>Let \(x_0 \in \mathbb{R}^n\) be a reference input. Then the set</em></p>

\[\mathcal{B}_{\infty}(x_0, \epsilon) = \{x: \parallel x - x_0 \parallel_{\infty} \le \epsilon \}\]

<p><em>is called the region of interest around \(x_0\).</em></p>

<p><strong>Definition</strong> <strong><em>[Safety set induced by an input].</em></strong> <em>Suppose the network assigns the class label \(l_0\) to a reference input \(x_0\). Then the set \(S_{l_0}\) is called the safety set induced by \(x_0\).</em></p>

<p>For our network to be robust, it must assign the same class to all points in \(\mathcal{B}_{\infty}(x_0, \epsilon)\) i.e. \(F(x) = F(x_0) = l_0\) for all \(x \in \mathcal{B}_{\infty}(x_0, \epsilon)\). This is equivalent to saying \(f_W(x) \in S_{l_0}\) for all \(x \in \mathcal{B}_{\infty}(x_0, \epsilon)\). In other words, we want the image of the region of interest to lie inside the safety set induced by \(x_0\). The verification problem then reduces to asking the below set membership question:</p>

\[\begin{equation*}
    f_W(\mathcal{B}_{\infty}(x_0, \epsilon)) \stackrel{?}{\subset} S_{l_0}
\end{equation*}\]

<p>We are now ready to give a formal definition of robustness.</p>

<p><strong>Definition</strong> <strong><em>[\(\epsilon\)-robustness].</em></strong> <em>We say that a neural network is \(\epsilon\)-robust at \(x_0\) if and only if</em></p>

\[\begin{equation*}
    f_W(\mathcal{B}_\infty (x_0, \epsilon)) \subset S_{l_0}
\end{equation*}\]

<p><strong>Definition</strong> <strong><em>[Adversarial example].</em></strong> <em>A point \(\tilde{x} \in \mathbb{R}^n\) is said to be an adversarial example if</em></p>

\[\begin{equation*}
    \tilde{x} \in \mathcal{B}_\infty (x_0, \epsilon),\ \ f_W(\tilde{x}) \notin S_{l_0}
\end{equation*}\]

<p>The two-class classifier network shown in the figure below is not \(\epsilon\)-robust at \(x_0\) since \(\tilde{x}\) is an adversarial example.</p>

<p><img src="../assets/files/images/adversarial_example.png" width="500" length="500" align="center" /></p>

<p>It is worth noting that a network is \(\epsilon\)-robust if and only if an adversarial example does not exist.</p>

<h1 id="verification-as-an-optimization-problem">Verification as an optimization problem</h1>
<p>Recall that, given a trained \(H\)-hidden-layer neural network with the output function \(f_W\), a reference input point \(x_0\) and a positive \(\epsilon\), we want to answer the following question:</p>

<p>Does the image of the region of inteterest lie inside the safety set?</p>

\[\begin{equation*}
    f_W(\mathcal{B}_\infty(x_0, \epsilon)) \stackrel{?}{\subset} S_{l_0}
\end{equation*}\]

<p>Or, equivalently, does there exist an adversarial example?</p>

\[\begin{equation*}
    \stackrel{?}{\exists} \tilde{x} \in \mathcal{B}_\infty(x_0, \epsilon)\ s.\ t.\ f_W(\tilde{x}) \notin S_{l_0}
\end{equation*}\]

<p>which is the same as solving the following satisfiability problem in optimization</p>

\[\begin{gather}\tag{7}
    \text{Find}\ z_0\\
    \text{s.t.}\ z_0 \in \mathcal{B}_\infty(x_0, \epsilon)\\
    z_{H + 1} = f_W(z_0)\\
    z_{H+1} \notin S_{l_0}
\end{gather}\]

<p>where \(z_0 \in \mathbb{R}^n\) and \(z_{H+1} \in \mathbb{R}^K\) are the decision variables. Now, let \(\tilde{z_i}\) and \(z_i\) denote the denote the pre- and post-activation output of the \(i\)th layer of the network. In other words</p>

\[\begin{equation}\tag{eq_z_i_z_i_hat}
    \begin{split}
        \tilde{z_i} &amp;= W_i z_{i -1} + b_i ,\qquad i = 1, ..., H + 1\\
        z_i &amp;= ReLU(\tilde{z_i}), \qquad i = 1, ..., H + 1
    \end{split}
\end{equation}\]

<p>Then we can replace the constraint \(z_{H+1} = f_W(z_0)\) in (7) with the equations (eq_z_i_z_i_hat). This gives us the following equivalent form of the satisfiability problem</p>

\[\begin{gather}
\text{Find}\ z_0\\
\text{s.t.}\ z_0 \in \mathcal{B}_\infty(x_0, \epsilon) \tag{8}\\
\tilde{z_i} = W_i z_{i -1} + b_i \quad i = 1, ..., H + 1 \tag{9}\\
    z_i = ReLU(\tilde{z_i})  \quad i = 1, ..., H + 1 \tag{10}\\
    z_{H+1} \notin S_{l_0} \tag{11}
\end{gather}\]

<p>where \(z_0, \tilde{z_1}, z_1, \tilde{z_2}, z_2, ..., \tilde{z}_{H+1}, z_{H+1}\) are the decision variables. We will refer to (8) as the <em>region of interest constraint</em>, (9) as the <em>affine constraint</em>, (10) as the <em>ReLU constraint</em>, and (11) as the <em>safety set constraint</em>. We will sometimes refer to (9) and (10) together as the <em>network constraint</em> and write it as \(z_{H+1} = f_W(z_0)\).</p>

<p>Note that if the above optimization problem is feasible then our network is not robust. Conversely, if the problem is infeasible then our network is robust. Also note that the above problem is not a convex optimization problem. This is because, the ReLU and safety set constraints are not convex. This non-convexity of constraints makes it hard to solve the above optimization problem in its current form. Next, we will replace these non-convex constraints with their convex formulations / approximations.</p>

<h2 id="convexifying-the-relu-constraint">Convexifying the ReLU constraint.</h2>

<p>Note that \(f_W\) is not a convex function. However, we know that \(f_W\) is <em>piece-wise affine</em>. Suppose we can find a convex set \(\chi' \subset \mathbb{R}^n\), such that \(f_W\) is affine on \(\chi'\). Then, we can replace the network constraint constraint \(z_{H+1} = f_W(z_0)\) with the following convex approximation:</p>

\[\begin{equation}\tag{12}
    z_{H+1} = f_W|_{\chi'}(z_0) 
\end{equation}\]

<p>where \(f_W\mid_{\chi'}\) is the restriction of \(f_W\) to \(\chi'\). But how do we even begin to look for such a \(\chi'\)? As a starting point, it is helpful to note that we want \(\chi' \bigcap \mathcal{B}_\infty(x_0, \epsilon)\) to be non-empty. This is to ensure that (12) above does not conflict with (8). Said differently, we want \(\chi'\) to contain \(x_0\) as well as points that are “close” to \(x_0\). We will use this idea to find the desired \(\chi'\).</p>

<p>Observe that as our reference input \(x_0\) propagates through the network, it causes some neurons to be “activated” in each layer while others remain inactive. For a given input this activation pattern is fixed. Now, the main idea is that <em>points that are close to \(x_0\) are likely to produce the same activation pattern as \(x_0\)</em>. So, it might be useful to look for a set that contains all inputs that produce the same activation pattern as \(x_0\). Using the notation introduced in (eq_z_i_z_i_hat), the pre- and post-activation outputs of the \(i\)th layer produced by our reference input \(x_0\) are</p>

\[\begin{equation*}
    \begin{split}
        \tilde{x}_i &amp;= W_i {x}_{i-1} + b_i ,\qquad i = 1, ..., H + 1\\
        {x}_i &amp;= ReLU(\tilde{x}_i) ,\qquad i = 1, ..., H + 1\\
    \end{split}
\end{equation*}\]

<p>We say that the \(j\)th neuron in the \(i\)th layer is <em>activated</em> by the reference input \(x_0\) if the \(j\)th component of \(x_i\) is positive, i.e. \((x_i)_j &gt; 0\). The activation status of the \(j\)th neuron in the \(i\)th layer can be described by a binary constant</p>

\[\begin{equation*}
    \delta_{i,j} =
    \begin{cases}
        1 \quad\text{if}\ (\tilde{x}_i)_j &gt; 0\\
        0 \quad\text{if}\ (\tilde{x}_i)_j \le 0
    \end{cases}
\end{equation*}\]

<p>The activation pattern of the \(i\)th layer can then be expressed succinctly by the following diagonal matrix</p>

\[\begin{equation*}
    \Delta_i :=
    \begin{pmatrix}
        \delta_{i,1} &amp; 0 &amp; 0 &amp; 0 &amp; 0\\
        0 &amp; \delta_{i,2} &amp; 0 &amp; 0 &amp; 0\\
        \vdots &amp; \vdots &amp; \vdots &amp; \vdots &amp; \vdots\\
        0 &amp; 0 &amp; 0 &amp; 0 &amp; \delta_{i,d_i}\\
    \end{pmatrix} 
\end{equation*}\]

<p>where \(d_i\) is the number of neurons in the \(i\)th layer. Note that the linear operator \(\Delta_i: \mathbb{R}^{d_i} \longrightarrow \mathbb{R}^{d_i}\) is nothing but a projection map. Now, recall the definition of the network output function \(f_W\) given in (2) where \(\phi\) is chosen to be \(ReLU\). Suppose we were to replace the composition \(\phi \circ \omega_i\) with the composition \(\Delta_i \circ \omega_i\) in (2). The resulting output function, \(f_{W_0}\), is given by</p>

\[\begin{equation*}\tag{13}
    f_{W_0} = \Delta_{H+1} \circ \omega_{H+1} \circ \dots \circ \Delta_1 \circ \omega_1
\end{equation*}\]

<p>We make some important observations about \(f_{W_0}\).</p>

<ul>
  <li>\(f_{W_0}\) is an affine function</li>
  <li>\(f_{W_0}(z) = f_W(z)\) for every \(z\) that produces the same activation pattern as \(x_0\).</li>
</ul>

<p>The first point follows from the fact that \(f_{W_0}\) is a composition of affine functions. The second point follows from the fact that, in computing the network output, \(f_{W_0}\) only considers neurons that were activated by the reference input \(x_0\) and ignores all other neurons (do you see why?). From the above observations, it seems that a good candidate for \(\chi'\) may be:</p>

\[\begin{equation*}
\begin{split}
     \chi' &amp;= \{z \in \mathbb{R}^n : z\ \text{produces the same activation pattern as } x_0 \}\\
     &amp;= \{z \in \mathbb{R}^n: f_W(z) = f_{W_0}(z)\}
\end{split}
\end{equation*}\]

<p>So, finding \(\chi'\) simply reduces to solving the equation \(f_W(z) = f_{W_0}(z)\), i.e.</p>

\[\begin{equation*}
    \phi \circ \omega_{H+1} \circ \dots \circ \phi \circ \omega_1(z) = \Delta_{H+1} \circ \omega_{H+1} \circ \dots \circ \Delta_1 \circ \omega_1(z)
\end{equation*}\]

<p>which can be written as</p>

\[\begin{equation*}
    \phi \circ \omega_i (z_{i-1}) = \Delta_i \circ \omega_i (z_{i - 1})\ ,\ i = 1, ..., H+1
\end{equation*}\]

<p>which is equivalent to solving for \(z_0, z_1, ..., z_{H+1}\) in</p>

\[\begin{equation}\tag{14}
    ReLU(W_i z_{i-1} + b_i) = \Delta_i (W_i z_{i-1} + b_i)\ ,\ i = 1, ..., H+1
\end{equation}\]

<p>Solving (14) directly is hard. Fortunately, (14) has the below equivalent affine formulation.</p>

\[\begin{equation}\tag{15}
 (2 \Delta_i - I)(W_i z_{i -1} + b_i) \ge 0\ ,\ i = 1, ..., H+1
\end{equation}\]

<p>It can be shown that every \(z_0, z_1, ..., z_{H+1}\) that is a solution to (14) is also a solution to (15) and vice-versa. Substituting \(\tilde{z}_i = W_i z_{i -1} + b_i\) in (15), we can approximate the ReLU constraint (10) by the following <em>convex</em> constraints</p>

\[\begin{equation*}\tag{eq_convexified_relu}
\begin{split}
    (2 \Delta_i - I)\tilde{z}_i &amp;\ge 0 \\
    z_i = \Delta_i &amp;\tilde{z}_{i}
\end{split}
\end{equation*}\]

<h2 id="convexifying-the-safety-set-constraint">Convexifying the safety set constraint</h2>

<p>Note that the safety set constraint (11) imples that if a feasible solution to our satisfiability problem exists then it must lie outside \(S_{l_0}\), i.e. it must lie inside \(\mathbb{R}^K \backslash S_{l_0}\). Recall that \(S_{l_0}\) is the polyhedron induced by the class label \(l_0\). In other words, \(S_{l_0}\) is the set of points where the largest component is at index \(l_0\). Therefore, \(\mathbb{R}^K \backslash S_{l_0}\) is the set of points where the largest component is at some index \(l' \ne l_0\).</p>

<p>Instead of looking everywhere inside \(\mathbb{R}^K \backslash S_{l_0}\) (which is a non-convex set), we start by looking in the region where the component at index \(l'\) is greater than the component at index \(l_0\). This set is simply the half space \(\mathcal{H}_{l_0 &lt; l'}\). We can now replace (11}) with the below convex constraint:</p>

\[\begin{equation*}
    z_{H+1} \in \mathcal{H}_{l_0 &lt; l'}
\end{equation*}\]

<p>Repeating the above process for each \(l' \ne l_0\) gives us \(K-1\) convex problems that can be solved easily one at a time.</p>

<h1 id="putting-it-all-together">Putting it all together</h1>
<p>We now write down our original (non-convex) satisfiability problem</p>

\[\begin{gather*}
    \text{Find}\ z_0\\
    \text{s.t.}\ z_0 \in \mathcal{B}_\infty(x_0, \epsilon)\\
    \tilde{z_i} = W_i z_{i -1} + b_i \qquad &amp;i = 1, ..., H + 1 \\ \tag{Non-Conv}
        z_i = ReLU(\tilde{z_i})  \qquad &amp;i = 1, ..., H + 1 \\
        z_{H+1} \notin S_{l_0}
\end{gather*}\]

<p>and its convex modification</p>

\[\begin{gather*}
    \text{Find}\ z_0\\
    \text{s.t.}\ z_0 \in \mathcal{B}_\infty(x_0, \epsilon)\\
    \tilde{z_i} = W_i z_{i -1} + b_i \qquad &amp;i = 1, ..., H + 1 \\ \tag{Conv}
        (2 \Delta_i - I)\tilde{z}_i \ge 0 \qquad &amp;i = 1, ..., H + 1\\
        z_i = \Delta_i \tilde{z}_i  \qquad &amp;i = 1, ..., H + 1 \\
        z_{H+1} \in \mathcal{H}_{l_0 &lt; l'}
\end{gather*}\]

<p>where (Conv) must be solved \(K -1\) times with varying \(l'\). Note that (Conv) is a convex (in fact affine) problem and can be easily solved with the help of any Linear Programming solver.</p>

<h1 id="conclusion">Conclusion</h1>
<p>In this post we defined the notion of robustness of a neural network and formulated the verificaion of robustness as an optimization problem. We then proposed a convex, LP approximation of this problem which can be solved easily with any linear programming solver.</p>

<p>It should be noted that the above robustness verification approach of solving a convex approximation of the original problem, is not complete. In other words, the feasibility of the  approximation (Conv) certifies <em>non-robustness</em>. However, infeasibility of (Conv) does <em>not</em> certify <em>robustness</em>. Even so, this approach can be used to quickly determine if a network is certifiably non-robust at a given point by locating an adversarial example. (For an illustration of using the above approach to verify neural network robustness, check out the alpha version of my project <a href="https://pypi.org/project/verifiNN/">verifiNN</a>.)</p>

<h1 id="references">References</h1>

<p>[1] Michael Andrew Roark. <em>Formal Verification of Neural Networks via Optimization Methods.</em> Masters Thesis (2022). Department of Mathematics, San Francisco State University. URL: https://doi.org/10.46569/20.500.12680/4t64gv41s</p>

<p>[2] Changliu Liu, et al. <em>Algorithms for Verifying Deep Neural Networks.</em> (2020) URL: https://arxiv.org/abs/1903.06758</p>

<p>[3] Mahyar Fazlyab, et al. <em>Safety Verification and Robustness Analysis of Neural Networks via Quadratic Constraints and Semidefinite Programming.</em> (2021) URL: 
https://doi.org/10.48550/arXiv.1903.01287</p>]]></content><author><name>Ayush Bharadwaj</name></author><summary type="html"><![CDATA[Robustness is a desirable property in a neural network. Informally, robustness can be described as ‘resilience to perturbations in the input’. Said differently, a neural network is robust if small changes to the input produce small or no changes to the output. In particular, if the network is a classifier, robustness means that inputs close to each other should be assigned the same class by the network.]]></summary></entry></feed>