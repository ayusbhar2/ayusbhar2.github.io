<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-05-19T18:46:50-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Algebra, Geometry and Applications of Optimization</title><subtitle></subtitle><author><name>Ayush Bharadwaj</name></author><entry><title type="html">Solving the Unit Commitment Problem with Mixed Integer Programming</title><link href="http://localhost:4000/unit-commitment-problem/" rel="alternate" type="text/html" title="Solving the Unit Commitment Problem with Mixed Integer Programming" /><published>2023-05-18T00:00:00-07:00</published><updated>2023-05-18T00:00:00-07:00</updated><id>http://localhost:4000/unit-commitment-problem</id><content type="html" xml:base="http://localhost:4000/unit-commitment-problem/"><![CDATA[<p>The Unit Commitment Problem (UCP) [1] in power systems is the problem of scheduling the optimal number of power generating units (or simply units) to meet the total demand in each time period (or slot) of a planning horizon. The UCP is an optimization problem that aims to minmize the running costs, startup costs and shutdown costs of the units while satisfying constraints that guarantee appropriate operating conditions for the units.</p>

<p>The UCP can be formulated in a number of ways:</p>
<ul>
  <li>combinatorial approach</li>
  <li>priority list / heuristic approach</li>
  <li>dynamic programming</li>
  <li>Lagrangian relaxation</li>
  <li><strong>Mixed Integer Programming (MIP)</strong></li>
</ul>

<p>In this post we will consider the MIP approach since it is the state of the art for the UCP. Other approaches do not scale to any reasonable sized problem. We will consider a small but salient example [2] which has most features of a real life UCP.</p>

<h1 id="example">Example</h1>
<p>We are given three units -  A, B and C - with their corresponding costs and operational constraints. The hourly demand  profile over a three-period planning horizon is also given. We want to find the optimal schedule that minimizes the total cost, meets the hourly demand requirements and satisfies the operational constraints.</p>

<table>
  <thead>
    <tr>
      <th>Unit</th>
      <th>P_min (MW)</th>
      <th>P_max (MW)</th>
      <th>Min up (hr)</th>
      <th>Min down (hr)</th>
      <th>No-load cost ($)</th>
      <th>Marginal cost ($/MWh)</th>
      <th>Startup cost ($)</th>
      <th>Initial status</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>A</td>
      <td>150</td>
      <td>250</td>
      <td>3</td>
      <td>3</td>
      <td>0</td>
      <td>10</td>
      <td>1000</td>
      <td>ON</td>
    </tr>
    <tr>
      <td>B</td>
      <td>50</td>
      <td>100</td>
      <td>2</td>
      <td>1</td>
      <td>0</td>
      <td>12</td>
      <td>600</td>
      <td>OFF</td>
    </tr>
    <tr>
      <td>C</td>
      <td>10</td>
      <td>50</td>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>20</td>
      <td>100</td>
      <td>OFF</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th>Period</th>
      <th>Demand (MW)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>150</td>
    </tr>
    <tr>
      <td>2</td>
      <td>300</td>
    </tr>
    <tr>
      <td>3</td>
      <td>200</td>
    </tr>
  </tbody>
</table>

<p>We must call out the features of a real-life UCP that our example does NOT capture.</p>
<ul>
  <li>Ignores unit rampup constraints</li>
  <li>Ignores reserve constraints and costs of reserves.</li>
  <li>Ignores environmental constraints.</li>
  <li>Ignores transmission network constraints.</li>
  <li>Assumes marginal costs remain constant over the planning horizon.</li>
  <li>Assumes constant startup costs. (Startup costs are often modeled by the approximationo of an exponential function of time)</li>
  <li>Assumes zero cool-down costs</li>
  <li>Assumes zero No-load costs</li>
</ul>

<p>In a real-life UCP some of the above features can cause non-trivial complications. However, our simplified example will serve us well for illustrative purposes.</p>

<h1 id="a-simple-economic-dispatch-model-with-lp">A simple economic dispatch model with LP</h1>

<p>Let us start by making some relaxations to our problem (in subsequent sections, we will strike out these relaxations one by one).</p>
<ol>
  <li>All units are running and available at all times (i.e. we don’t have the choice to turn a unit ON/OFF.)</li>
  <li>Startup costs are ignored.</li>
  <li>Minimum up- and down-time constraints do not apply.</li>
</ol>

<p>Now, we are interested in finding the optimal power output of each unit in each time period that minimizes the total marginal cost.</p>

<p>Parameters:</p>

<p>\(c_j\) := Marginal cost of running unit \(j\) ($/MWh)</p>

<p>\(D_t\) := Total demand in time slot \(t\) (MW)</p>

<p>\(P_{j, min}\) := Minimum recommended power output for unit \(j\) (MW)</p>

<p>\(P_{j, max}\) := Maximum recommended power output for unit \(j\) (MW)</p>

<p>\(J\) := Indexed set of all generators (a.k.a. units)</p>

<p>\(T\) := Indexed set of all time slots/periods (a.k.a. planning horizon)</p>

<p>Variables:</p>

<p>\(p_{j,t}\) := Power output of unit \(j\) in time slot \(t\) (MW)</p>

<p>Since we are only considering the marginal costs of runnint the units, the objective is pretty straightforward</p>

\[\text{minimize} \sum_{t\in T} \sum_{j \in J} c_j p_{j, t}\]

<p>There are two sets of constraints we need to consider. The power output of each generating unit must be within the recommended output range. And the total power output of all generating units must satisfy the demand in each time period. We can write these constraints as follows:</p>

\[P_{j, min} \le p_{j, t} \le P_{j, max}\ \text{(Output Range)}\\
\sum_{j \in J} p_{j, t} \ge D_t\ \text{(Demand)}\\\]

<p>We get the following model</p>

\[\text{minimize} \sum_{t\in T} \sum_{j \in J} c_j p_{j, t}\\
    \text{s.t.}\quad P_{j, min} \le p_{j, t} \le P_{j, max}\\ \tag{LP}
     \sum_{j \in J} p_{j, t} \ge D_t\]

<p>Let us solve (LP) using <code class="language-plaintext highlighter-rouge">cvxpy</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">cvxpy</span> <span class="k">as</span> <span class="n">cp</span>
<span class="kn">import</span> <span class="nn">cvxopt</span> <span class="k">as</span> <span class="n">cv</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="kn">from</span> <span class="nn">solver.utils</span> <span class="kn">import</span> <span class="n">get_result_summary</span><span class="p">,</span> <span class="n">prettify</span>

<span class="c1"># parameters
</span><span class="n">cA</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span> <span class="n">cB</span> <span class="o">=</span> <span class="mi">12</span><span class="p">;</span> <span class="n">cC</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>

<span class="n">p_min_A</span> <span class="o">=</span> <span class="mi">150</span>
<span class="n">p_min_B</span> <span class="o">=</span> <span class="mi">50</span>
<span class="n">p_min_C</span> <span class="o">=</span> <span class="mi">10</span>

<span class="n">p_max_A</span> <span class="o">=</span> <span class="mi">250</span>
<span class="n">p_max_B</span> <span class="o">=</span> <span class="mi">100</span>
<span class="n">p_max_C</span> <span class="o">=</span> <span class="mi">50</span>

<span class="n">D1</span> <span class="o">=</span> <span class="mi">150</span><span class="p">;</span> <span class="n">D2</span> <span class="o">=</span> <span class="mi">300</span><span class="p">;</span> <span class="n">D3</span> <span class="o">=</span> <span class="mi">200</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#variables
</span><span class="n">pA1</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">nonneg</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'pA1'</span><span class="p">)</span>
<span class="n">pA2</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">nonneg</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'pA2'</span><span class="p">)</span>
<span class="n">pA3</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">nonneg</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'pA3'</span><span class="p">)</span>

<span class="n">pB1</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">nonneg</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'pB1'</span><span class="p">)</span>
<span class="n">pB2</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">nonneg</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'pB2'</span><span class="p">)</span>
<span class="n">pB3</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">nonneg</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'pB3'</span><span class="p">)</span>

<span class="n">pC1</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">nonneg</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'pC1'</span><span class="p">)</span>
<span class="n">pC2</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">nonneg</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'pC2'</span><span class="p">)</span>
<span class="n">pC3</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">nonneg</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'pC3'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">obj_LP</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Minimize</span><span class="p">(</span>
    <span class="n">cA</span> <span class="o">*</span> <span class="p">(</span><span class="n">pA1</span> <span class="o">+</span> <span class="n">pA2</span> <span class="o">+</span> <span class="n">pA3</span><span class="p">)</span> <span class="o">+</span>
    <span class="n">cB</span> <span class="o">*</span> <span class="p">(</span><span class="n">pB1</span> <span class="o">+</span> <span class="n">pB2</span> <span class="o">+</span> <span class="n">pB3</span><span class="p">)</span> <span class="o">+</span>
    <span class="n">cC</span> <span class="o">*</span> <span class="p">(</span><span class="n">pC1</span> <span class="o">+</span> <span class="n">pC2</span> <span class="o">+</span> <span class="n">pC3</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">LP_output_range_cons</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">pA1</span> <span class="o">&gt;=</span> <span class="n">p_min_A</span><span class="p">,</span>
    <span class="n">pA1</span> <span class="o">&lt;=</span> <span class="n">p_max_A</span><span class="p">,</span>
    <span class="n">pA2</span> <span class="o">&gt;=</span> <span class="n">p_min_A</span><span class="p">,</span>
    <span class="n">pA2</span> <span class="o">&lt;=</span> <span class="n">p_max_A</span><span class="p">,</span>
    <span class="n">pA3</span> <span class="o">&gt;=</span> <span class="n">p_min_A</span><span class="p">,</span>
    <span class="n">pA3</span> <span class="o">&lt;=</span> <span class="n">p_max_A</span><span class="p">,</span>
    
    <span class="n">pB1</span> <span class="o">&gt;=</span> <span class="n">p_min_B</span><span class="p">,</span>
    <span class="n">pB1</span> <span class="o">&lt;=</span> <span class="n">p_max_B</span><span class="p">,</span>
    <span class="n">pB2</span> <span class="o">&gt;=</span> <span class="n">p_min_B</span><span class="p">,</span>
    <span class="n">pB2</span> <span class="o">&lt;=</span> <span class="n">p_max_B</span><span class="p">,</span>
    <span class="n">pB3</span> <span class="o">&gt;=</span> <span class="n">p_min_B</span><span class="p">,</span>
    <span class="n">pB3</span> <span class="o">&lt;=</span> <span class="n">p_max_B</span><span class="p">,</span>
    
    <span class="n">pC1</span> <span class="o">&gt;=</span> <span class="n">p_min_C</span><span class="p">,</span>
    <span class="n">pC1</span> <span class="o">&lt;=</span> <span class="n">p_max_C</span><span class="p">,</span>
    <span class="n">pC2</span> <span class="o">&gt;=</span> <span class="n">p_min_C</span><span class="p">,</span>
    <span class="n">pC2</span> <span class="o">&lt;=</span> <span class="n">p_max_C</span><span class="p">,</span>
    <span class="n">pC3</span> <span class="o">&gt;=</span> <span class="n">p_min_C</span><span class="p">,</span>
    <span class="n">pC3</span> <span class="o">&lt;=</span> <span class="n">p_max_C</span><span class="p">,</span>
<span class="p">]</span>

<span class="n">LP_demand_cons</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">pA1</span> <span class="o">+</span> <span class="n">pB1</span> <span class="o">+</span> <span class="n">pC1</span> <span class="o">&gt;=</span> <span class="n">D1</span><span class="p">,</span>
    <span class="n">pA2</span> <span class="o">+</span> <span class="n">pB2</span> <span class="o">+</span> <span class="n">pC2</span> <span class="o">&gt;=</span> <span class="n">D2</span><span class="p">,</span>
    <span class="n">pA3</span> <span class="o">+</span> <span class="n">pB3</span> <span class="o">+</span> <span class="n">pC3</span> <span class="o">&gt;=</span> <span class="n">D3</span><span class="p">,</span>
<span class="p">]</span>
 
<span class="n">cons_LP</span> <span class="o">=</span> <span class="n">LP_output_range_cons</span> <span class="o">+</span> <span class="n">LP_demand_cons</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">LP</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Problem</span><span class="p">(</span><span class="n">obj_LP</span><span class="p">,</span> <span class="n">cons_LP</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">LP</span><span class="p">.</span><span class="n">solve</span><span class="p">();</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">summary_LP</span> <span class="o">=</span> <span class="n">get_result_summary</span><span class="p">(</span><span class="n">LP</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">summary_LP</span><span class="p">[</span><span class="s">'status'</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'optimal'
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">summary_LP</span><span class="p">[</span><span class="s">'optimal_value'</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>7799.999998684703
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">prettify</span><span class="p">(</span><span class="n">summary_LP</span><span class="p">[</span><span class="s">'optimal_solution'</span><span class="p">])</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>variable</th>
      <th>value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>pA1</td>
      <td>150.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>pA2</td>
      <td>240.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>pA3</td>
      <td>150.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>pB1</td>
      <td>50.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>pB2</td>
      <td>50.0</td>
    </tr>
    <tr>
      <th>5</th>
      <td>pB3</td>
      <td>50.0</td>
    </tr>
    <tr>
      <th>6</th>
      <td>pC1</td>
      <td>10.0</td>
    </tr>
    <tr>
      <th>7</th>
      <td>pC2</td>
      <td>10.0</td>
    </tr>
    <tr>
      <th>8</th>
      <td>pC3</td>
      <td>10.0</td>
    </tr>
  </tbody>
</table>
</div>

<p>The minimum marginal cost of running the three units over the horizon is <mark> $7799.99 </mark>. Also note that unit A runs at minimum capacity during periods 1 and 3. During the peak period 2, the output of unit A is increased to meet the increased demand while units B and C continue to run at minimum capacity throughout the horizon. This makes sense because units B and C have a higher marginal cost than unit A. Next, we consider a model which allows us to choose which units are ON during each slot.</p>

<h1 id="a-first-mip-formulation">A first MIP formulation</h1>

<p>Here, we get rid of the first relaxation:</p>
<ol>
  <li><del>All units are running and available at all times. I.e. we don’t have the choice to turn a unit ON/OFF.</del></li>
  <li>Startup costs are ignored.</li>
  <li>Minimum up- and down-time constraints do not apply.</li>
</ol>

<p>We now have the choice to turn one or more units ON/OFF during any of the time slots. We will use a set of binary variables to model this choice.</p>

\[u_{j, t} :=
\begin{cases}
   1 \text{   if unit j is ON in slot t}\\
   0 \text{   otherwise }
\end{cases}\]

<p>Our objective as well as the demand constraint remain unchanged. However, the output range constraint needs to be modified in order to incorporate the new \(u_{j, t}\) variables.</p>

\[P_{j, min} u_{j, t} \le p_{j, t} \le P_{j, max} u_{j, t}\ \text{(Output Range)}\]

<p>Note that in the above formulation, if the unit \(j\) is OFF in period \(t\), the power output \(p_{j, t}\) is forced to be zero, so that we don’t have any power output contribution from an OFF unit. Below is the new MIP model</p>

\[\text{minimize} \sum_{t\in T} \sum_{j \in J} c_j p_{j, t}\\
\text{s.t.}\quad P_{j, min} u_{j, t} \le p_{j, t} \le P_{j, max} u_{j, t}\\ \tag{MIP-1}
\sum_{j \in J} p_{j, t} \ge D_t\\
u_{j, t} \in \{0, 1\} \ \forall\ j, t\]

<p>Let’s solve (MIP-1) with <code class="language-plaintext highlighter-rouge">cxvpy</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ON/OFF variables
</span><span class="n">uA1</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'uA1'</span><span class="p">)</span>
<span class="n">uA2</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'uA2'</span><span class="p">)</span>
<span class="n">uA3</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'uA3'</span><span class="p">)</span>

<span class="n">uB1</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'uB1'</span><span class="p">)</span>
<span class="n">uB2</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'uB2'</span><span class="p">)</span>
<span class="n">uB3</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'uB3'</span><span class="p">)</span>

<span class="n">uC1</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'uC1'</span><span class="p">)</span>
<span class="n">uC2</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'uC2'</span><span class="p">)</span>
<span class="n">uC3</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'uC3'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Objective remains unchanged
</span><span class="n">obj_MIP1</span> <span class="o">=</span> <span class="n">LP</span><span class="p">.</span><span class="n">objective</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># New constraints
</span><span class="n">MIP1_output_range_cons</span> <span class="o">=</span> <span class="p">[</span>
    <span class="c1"># output range
</span>    <span class="n">pA1</span> <span class="o">&gt;=</span> <span class="n">p_min_A</span> <span class="o">*</span> <span class="n">uA1</span><span class="p">,</span>
    <span class="n">pA1</span> <span class="o">&lt;=</span> <span class="n">p_max_A</span> <span class="o">*</span> <span class="n">uA1</span><span class="p">,</span>
    <span class="n">pA2</span> <span class="o">&gt;=</span> <span class="n">p_min_A</span> <span class="o">*</span> <span class="n">uA2</span><span class="p">,</span>
    <span class="n">pA2</span> <span class="o">&lt;=</span> <span class="n">p_max_A</span> <span class="o">*</span> <span class="n">uA2</span><span class="p">,</span>
    <span class="n">pA3</span> <span class="o">&gt;=</span> <span class="n">p_min_A</span> <span class="o">*</span> <span class="n">uA3</span><span class="p">,</span>
    <span class="n">pA3</span> <span class="o">&lt;=</span> <span class="n">p_max_A</span> <span class="o">*</span> <span class="n">uA3</span><span class="p">,</span>
    
    <span class="n">pB1</span> <span class="o">&gt;=</span> <span class="n">p_min_B</span> <span class="o">*</span> <span class="n">uB1</span><span class="p">,</span>
    <span class="n">pB1</span> <span class="o">&lt;=</span> <span class="n">p_max_B</span> <span class="o">*</span> <span class="n">uB1</span><span class="p">,</span>
    <span class="n">pB2</span> <span class="o">&gt;=</span> <span class="n">p_min_B</span> <span class="o">*</span> <span class="n">uB2</span><span class="p">,</span>
    <span class="n">pB2</span> <span class="o">&lt;=</span> <span class="n">p_max_B</span> <span class="o">*</span> <span class="n">uB2</span><span class="p">,</span>
    <span class="n">pB3</span> <span class="o">&gt;=</span> <span class="n">p_min_B</span> <span class="o">*</span> <span class="n">uB3</span><span class="p">,</span>
    <span class="n">pB3</span> <span class="o">&lt;=</span> <span class="n">p_max_B</span> <span class="o">*</span> <span class="n">uB3</span><span class="p">,</span>
    
    <span class="n">pC1</span> <span class="o">&gt;=</span> <span class="n">p_min_C</span> <span class="o">*</span> <span class="n">uC1</span><span class="p">,</span>
    <span class="n">pC1</span> <span class="o">&lt;=</span> <span class="n">p_max_C</span> <span class="o">*</span> <span class="n">uC1</span><span class="p">,</span>
    <span class="n">pC2</span> <span class="o">&gt;=</span> <span class="n">p_min_C</span> <span class="o">*</span> <span class="n">uC2</span><span class="p">,</span>
    <span class="n">pC2</span> <span class="o">&lt;=</span> <span class="n">p_max_C</span> <span class="o">*</span> <span class="n">uC2</span><span class="p">,</span>
    <span class="n">pC3</span> <span class="o">&gt;=</span> <span class="n">p_min_C</span> <span class="o">*</span> <span class="n">uC3</span><span class="p">,</span>
    <span class="n">pC3</span> <span class="o">&lt;=</span> <span class="n">p_max_C</span> <span class="o">*</span> <span class="n">uC3</span><span class="p">,</span>
<span class="p">]</span>

<span class="n">cons_MIP1</span> <span class="o">=</span> <span class="n">MIP1_output_range_cons</span> <span class="o">+</span> <span class="n">LP_demand_cons</span> <span class="c1"># demand constraints don't change
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">MIP1</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Problem</span><span class="p">(</span><span class="n">obj_MIP1</span><span class="p">,</span> <span class="n">cons_MIP1</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">MIP1</span><span class="p">.</span><span class="n">solve</span><span class="p">();</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">summary_MIP1</span> <span class="o">=</span> <span class="n">get_result_summary</span><span class="p">(</span><span class="n">MIP1</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">summary_MIP1</span><span class="p">[</span><span class="s">'status'</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'optimal'
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">summary_MIP1</span><span class="p">[</span><span class="s">'optimal_value'</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>6600.0
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">prettify</span><span class="p">(</span><span class="n">summary_MIP1</span><span class="p">[</span><span class="s">'optimal_solution'</span><span class="p">])</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>variable</th>
      <th>value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>pA1</td>
      <td>150.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>pA2</td>
      <td>250.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>pA3</td>
      <td>200.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>pB1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>pB2</td>
      <td>50.0</td>
    </tr>
    <tr>
      <th>5</th>
      <td>pB3</td>
      <td>-0.0</td>
    </tr>
    <tr>
      <th>6</th>
      <td>pC1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>7</th>
      <td>pC2</td>
      <td>-0.0</td>
    </tr>
    <tr>
      <th>8</th>
      <td>pC3</td>
      <td>-0.0</td>
    </tr>
    <tr>
      <th>9</th>
      <td>uA1</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>10</th>
      <td>uA2</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>11</th>
      <td>uA3</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>12</th>
      <td>uB1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>13</th>
      <td>uB2</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>14</th>
      <td>uB3</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>15</th>
      <td>uC1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>16</th>
      <td>uC2</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>17</th>
      <td>uC3</td>
      <td>0.0</td>
    </tr>
  </tbody>
</table>
</div>

<p>The optimal cost with the basic MIP model turns out to be <mark>$6600</mark>. Note that this is <mark>$1200 cheaper</mark> than the result of the (LP) model. Indeed, being able to choose which units to commit during each time slot has saved us some money!</p>

<p>Note that the model chose to fulfill all of the demand in period 1 with unit A, which is the cheapest to run. Both unit B and unit C are more expensive to run and were kept OFF during this period. For the peak demand period, unit B was turned ON to meet the additional demand and was turned back off at the end of the peak period. Unit C, which is the most expensive to run, was never turned ON.</p>

<h1 id="an-mip-model-with-startup-costs">An MIP model with startup costs</h1>

<p>Here, we get rid of the second relaxation:</p>
<ol>
  <li><del>All units are running and available at all times. I.e. we don’t have the choice to turn a unit ON/OFF.</del></li>
  <li><del>Startup costs are ignored.</del></li>
  <li>Minimum up- and down-time constraints do not apply.</li>
</ol>

<p>We now consider the startup costs of the units. A unit incurs a startup cost in a time period only if it was started up in that period. We need a binary variable to indicate if a unit was turnd ON in a given period. If so, the unit will incur the startup cost in that period in addition to the marginal cost.</p>

<p>We introduce a new parameter to denote the startup costs of the units</p>

\[c_j^u := \text{Startup cost of unit } j\ ($)\]

<p>and a new binary variable</p>

\[\alpha_{j, t} :=
\begin{cases}
   1 &amp;\text{   if unit \textit{j} was started in period \textit{t}}\\
   0 &amp;\text{   otherwise }
\end{cases}\]

<p>The new objective is given by:</p>

\[\text{minimize} \sum_{t\in T} \sum_{j \in J} c_j p_{j, t} + \alpha_{j, t} c_j^u\]

<p>The demand constraint as well as the output range constraints remain the same as for (MIP-1). However, we need a new constraint in order to ensure that \(\alpha_{j, t} = 1\) if and only if unit \(j\) was started up in period \(t\). This constraint can be modelled by the below function</p>

\[\alpha_{j, t} = \lfloor \frac{u_{j, t} - u_{j, t-1} + 1}{2} \rfloor\]

<p>The above non-linear function can be expressed in terms of linear constraints as follows:</p>

\[\alpha_{j, t} \le \frac{u_{j, t} - u_{j, t-1} + 1}{2}, \quad \alpha_{j, t} + 1 \ge \frac{u_{j, t} - u_{j, t-1} + 1}{2} + .25 \qquad \text{(Startup)}\]

<p>Our new model can be written as:</p>

\[\text{minimize} \sum_{t\in T} \sum_{j \in J} c_j p_{j, t} + \alpha_{j, t} c_j^u\\
     \text{s.t.}\quad P_{j, min} u_{j, t} \le p_{j, t} \le P_{j, max} u_{j, t}\\ 
     \sum_{j \in J} p_{j, t} \ge D_t\\ \tag{MIP-2}
     \alpha_{j, t} \le \frac{u_{j, t} - u_{j, t-1} + 1}{2}\\
     \alpha_{j, t} + 1 \ge \frac{u_{j, t} - u_{j, t-1} + 1}{2} + .25\\
     u_{j, t} \in \{0, 1\} \ \forall\ j, t\\
     \alpha_{j, t} \in \{0, 1\} \ \forall\ j, t\]

<p>Lets solve (MIP-2) with <code class="language-plaintext highlighter-rouge">cvxpy</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># parameters
## startup costs
</span><span class="n">cA_up</span> <span class="o">=</span> <span class="mi">1000</span>
<span class="n">cB_up</span> <span class="o">=</span> <span class="mi">600</span>
<span class="n">cC_up</span> <span class="o">=</span> <span class="mi">100</span>

<span class="c1">## initial states
</span><span class="n">uA0</span> <span class="o">=</span> <span class="mi">1</span> <span class="c1"># ON
</span><span class="n">uB0</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1"># OFF
</span><span class="n">uC0</span> <span class="o">=</span> <span class="mi">0</span> <span class="c1"># OFF
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># startup variables
</span><span class="n">alpha_A1</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'alpha_A1'</span><span class="p">)</span>
<span class="n">alpha_A2</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'alpha_A2'</span><span class="p">)</span>
<span class="n">alpha_A3</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'alpha_A3'</span><span class="p">)</span>


<span class="n">alpha_B1</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'alpha_B1'</span><span class="p">)</span>
<span class="n">alpha_B2</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'alpha_B2'</span><span class="p">)</span>
<span class="n">alpha_B3</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'alpha_B3'</span><span class="p">)</span>


<span class="n">alpha_C1</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'alpha_C1'</span><span class="p">)</span>
<span class="n">alpha_C2</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'alpha_C2'</span><span class="p">)</span>
<span class="n">alpha_C3</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'alpha_C3'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># objective
</span><span class="n">obj_MIP2</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Minimize</span><span class="p">(</span>
    <span class="n">cA</span> <span class="o">*</span> <span class="p">(</span><span class="n">pA1</span> <span class="o">+</span> <span class="n">pA2</span> <span class="o">+</span> <span class="n">pA3</span><span class="p">)</span> <span class="o">+</span> <span class="n">cA_up</span> <span class="o">*</span> <span class="p">(</span><span class="n">alpha_A1</span> <span class="o">+</span> <span class="n">alpha_A2</span> <span class="o">+</span> <span class="n">alpha_A3</span><span class="p">)</span> <span class="o">+</span>
    <span class="n">cB</span> <span class="o">*</span> <span class="p">(</span><span class="n">pB1</span> <span class="o">+</span> <span class="n">pB2</span> <span class="o">+</span> <span class="n">pB3</span><span class="p">)</span> <span class="o">+</span> <span class="n">cB_up</span> <span class="o">*</span> <span class="p">(</span><span class="n">alpha_B1</span> <span class="o">+</span> <span class="n">alpha_B2</span> <span class="o">+</span> <span class="n">alpha_B3</span><span class="p">)</span> <span class="o">+</span>
    <span class="n">cC</span> <span class="o">*</span> <span class="p">(</span><span class="n">pC1</span> <span class="o">+</span> <span class="n">pC2</span> <span class="o">+</span> <span class="n">pC3</span><span class="p">)</span> <span class="o">+</span> <span class="n">cC_up</span> <span class="o">*</span> <span class="p">(</span><span class="n">alpha_C1</span> <span class="o">+</span> <span class="n">alpha_C2</span> <span class="o">+</span> <span class="n">alpha_C3</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># constraints
</span><span class="n">MIP2_startup_cons</span> <span class="o">=</span>  <span class="p">[</span>
    <span class="n">alpha_A1</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">uA1</span> <span class="o">-</span> <span class="n">uA0</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">alpha_A1</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="n">uA1</span> <span class="o">-</span> <span class="n">uA0</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">-</span> <span class="p">.</span><span class="mi">75</span><span class="p">,</span>
    <span class="n">alpha_A2</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">uA2</span> <span class="o">-</span> <span class="n">uA1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">alpha_A2</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="n">uA2</span> <span class="o">-</span> <span class="n">uA1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">-</span> <span class="p">.</span><span class="mi">75</span><span class="p">,</span>
    <span class="n">alpha_A3</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">uA3</span> <span class="o">-</span> <span class="n">uA2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">alpha_A3</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="n">uA3</span> <span class="o">-</span> <span class="n">uA2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">-</span> <span class="p">.</span><span class="mi">75</span><span class="p">,</span>
    
    <span class="n">alpha_B1</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">uB1</span> <span class="o">-</span> <span class="n">uB0</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">alpha_B1</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="n">uB1</span> <span class="o">-</span> <span class="n">uB0</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">-</span> <span class="p">.</span><span class="mi">75</span><span class="p">,</span>
    <span class="n">alpha_B2</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">uB2</span> <span class="o">-</span> <span class="n">uB1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">alpha_B2</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="n">uB2</span> <span class="o">-</span> <span class="n">uB1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">-</span> <span class="p">.</span><span class="mi">75</span><span class="p">,</span>
    <span class="n">alpha_B3</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">uB3</span> <span class="o">-</span> <span class="n">uB2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">alpha_B3</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="n">uB3</span> <span class="o">-</span> <span class="n">uB2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">-</span> <span class="p">.</span><span class="mi">75</span><span class="p">,</span>
    
    <span class="n">alpha_C1</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">uC1</span> <span class="o">-</span> <span class="n">uC0</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">alpha_C1</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="n">uC1</span> <span class="o">-</span> <span class="n">uC0</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">-</span> <span class="p">.</span><span class="mi">75</span><span class="p">,</span>
    <span class="n">alpha_C2</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">uC2</span> <span class="o">-</span> <span class="n">uC1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">alpha_C2</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="n">uC2</span> <span class="o">-</span> <span class="n">uC1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">-</span> <span class="p">.</span><span class="mi">75</span><span class="p">,</span>
    <span class="n">alpha_C3</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">uC3</span> <span class="o">-</span> <span class="n">uC2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">alpha_C3</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="n">uC3</span> <span class="o">-</span> <span class="n">uC2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">-</span> <span class="p">.</span><span class="mi">75</span><span class="p">,</span>
<span class="p">]</span>
    
<span class="n">cons_MIP2</span> <span class="o">=</span> <span class="n">MIP1</span><span class="p">.</span><span class="n">constraints</span> <span class="o">+</span> <span class="n">MIP2_startup_cons</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">MIP2</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Problem</span><span class="p">(</span><span class="n">obj_MIP2</span><span class="p">,</span> <span class="n">cons_MIP2</span><span class="p">)</span>
<span class="n">MIP2</span><span class="p">.</span><span class="n">solve</span><span class="p">();</span>
<span class="n">summary_MIP2</span> <span class="o">=</span> <span class="n">get_result_summary</span><span class="p">(</span><span class="n">MIP2</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">summary_MIP2</span><span class="p">[</span><span class="s">'status'</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'optimal'
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">summary_MIP2</span><span class="p">[</span><span class="s">'optimal_value'</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>7100.0
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">prettify</span><span class="p">(</span><span class="n">summary_MIP2</span><span class="p">[</span><span class="s">'optimal_solution'</span><span class="p">])</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>variable</th>
      <th>value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>alpha_A1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>alpha_A2</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>alpha_A3</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>alpha_B1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>alpha_B2</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>5</th>
      <td>alpha_B3</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>6</th>
      <td>alpha_C1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>7</th>
      <td>alpha_C2</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>8</th>
      <td>alpha_C3</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>9</th>
      <td>pA1</td>
      <td>150.0</td>
    </tr>
    <tr>
      <th>10</th>
      <td>pA2</td>
      <td>250.0</td>
    </tr>
    <tr>
      <th>11</th>
      <td>pA3</td>
      <td>200.0</td>
    </tr>
    <tr>
      <th>12</th>
      <td>pB1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>13</th>
      <td>pB2</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>14</th>
      <td>pB3</td>
      <td>-0.0</td>
    </tr>
    <tr>
      <th>15</th>
      <td>pC1</td>
      <td>-0.0</td>
    </tr>
    <tr>
      <th>16</th>
      <td>pC2</td>
      <td>50.0</td>
    </tr>
    <tr>
      <th>17</th>
      <td>pC3</td>
      <td>-0.0</td>
    </tr>
    <tr>
      <th>18</th>
      <td>uA1</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>19</th>
      <td>uA2</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>20</th>
      <td>uA3</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>21</th>
      <td>uB1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>22</th>
      <td>uB2</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>23</th>
      <td>uB3</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>24</th>
      <td>uC1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>25</th>
      <td>uC2</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>26</th>
      <td>uC3</td>
      <td>0.0</td>
    </tr>
  </tbody>
</table>
</div>

<p>The optimal value of the total cost (setup + marginal) is <mark> $7100</mark>. This optimal value is greater than the optimal value of MIP1 ($6600) because it includes the setup cost which we ignored in MIP1.</p>

<p>Also note that, once again, the model chose to meet all of the demand in period 1 with unit A. The reason for this is two-fold. First, unit A is the cheapest to run and incurrs the smallest marginal cost. So, it makes sense to preferentially run unit A whenever possible. Second, unit A was already in ON state at the beginning of the planning horizon and did not need to be turned ON. As a result, by keeping unit A running, we avoided the setup cost for unit A.</p>

<p>We should also note that during the peak demand period, the model chose to turn on unit C instead of unit B as it had done in MIP1. This is because while unit B is cheaper to run than unit C, it is more expensive to start up than unit C. Since the setup cost dominates the marginal cost, the model preferred to start up unit C.</p>

<h2 id="an-mip-model-with-minimum-up--and-down-time-constraints">An MIP model with minimum up- and down-time constraints</h2>

<p>Here, we get rid of the third and final relaxation:</p>
<ol>
  <li><del>All units are running and available at all times. I.e. we don’t have the choice to turn a unit ON/OFF.</del></li>
  <li><del>Startup costs are ignored.</del></li>
  <li><del>Minimum up- and down-time constraints do not apply.</del></li>
</ol>

<p>We now consider the up- and down-time constraints that apply to each unit. In order to model these constraints we need need to define two new parameters:</p>

\[UT_j := \text{Minimum length of time (in periods/slots) that unit j must remain ON before it can be turned OFF.}\\
DT_j := \text{Minimum length of time (in periods/slots) that unit j must remain OFF before it can be turned ON.}\]

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># parameters
</span><span class="n">UT_A</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span> <span class="n">UT_B</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">UT_C</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="n">DT_A</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span> <span class="n">DT_B</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">DT_C</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div></div>

<p>We also need a new variable to indicate if a given unit was stopped in a given period.</p>

\[\beta_{j, t} :=
\begin{cases}
   1 &amp;\text{   if unit j was stopped in period t}\\
   0 &amp;\text{   otherwise }
\end{cases}\]

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># variables
</span><span class="n">beta_A1</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"beta_A1"</span><span class="p">)</span>
<span class="n">beta_A2</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"beta_A2"</span><span class="p">)</span>
<span class="n">beta_A3</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"beta_A3"</span><span class="p">)</span>

<span class="n">beta_B1</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"beta_B1"</span><span class="p">)</span>
<span class="n">beta_B2</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"beta_B2"</span><span class="p">)</span>
<span class="n">beta_B3</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"beta_B3"</span><span class="p">)</span>

<span class="n">beta_C1</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"beta_C1"</span><span class="p">)</span>
<span class="n">beta_C2</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"beta_C2"</span><span class="p">)</span>
<span class="n">beta_C3</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Variable</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">boolean</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"beta_C3"</span><span class="p">)</span>
</code></pre></div></div>

<p>We need to specify the shutdown constraint</p>

\[\beta_{j, t} = \lfloor \frac{(-u_{j, t} + u_{j, t-1} + 1)}{2} \rfloor\]

<p>which can be expressed in the form of linear inequalities as follows:</p>

\[\beta_{j, t} \le \frac{-u_{j, t} + u_{j, t-1} + 1}{2},\ \ \ \  \beta_{j, t} + 1 \ge \frac{-u_{j, t} + u_{j, t-1} + 1}{2} + .25\qquad \text{(Shut-down)}\]

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">MIP3_shutdown_cons</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">beta_A1</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="o">-</span><span class="n">uA1</span> <span class="o">+</span> <span class="n">uA0</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">beta_A1</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="o">-</span><span class="n">uA1</span> <span class="o">+</span> <span class="n">uA0</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="p">.</span><span class="mi">25</span><span class="p">,</span>
    <span class="n">beta_A2</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="o">-</span><span class="n">uA2</span> <span class="o">+</span> <span class="n">uA1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">beta_A2</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="o">-</span><span class="n">uA2</span> <span class="o">+</span> <span class="n">uA1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="p">.</span><span class="mi">25</span><span class="p">,</span>
    <span class="n">beta_A3</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="o">-</span><span class="n">uA3</span> <span class="o">+</span> <span class="n">uA2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">beta_A3</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="o">-</span><span class="n">uA3</span> <span class="o">+</span> <span class="n">uA2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="p">.</span><span class="mi">25</span><span class="p">,</span>

    <span class="n">beta_B1</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="o">-</span><span class="n">uB1</span> <span class="o">+</span> <span class="n">uB0</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">beta_B1</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="o">-</span><span class="n">uB1</span> <span class="o">+</span> <span class="n">uB0</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="p">.</span><span class="mi">25</span><span class="p">,</span>
    <span class="n">beta_B2</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="o">-</span><span class="n">uB2</span> <span class="o">+</span> <span class="n">uB1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">beta_B2</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="o">-</span><span class="n">uB2</span> <span class="o">+</span> <span class="n">uB1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="p">.</span><span class="mi">25</span><span class="p">,</span>
    <span class="n">beta_B3</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="o">-</span><span class="n">uB3</span> <span class="o">+</span> <span class="n">uB2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">beta_B3</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="o">-</span><span class="n">uB3</span> <span class="o">+</span> <span class="n">uB2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="p">.</span><span class="mi">25</span><span class="p">,</span>
    
    <span class="n">beta_C1</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="o">-</span><span class="n">uC1</span> <span class="o">+</span> <span class="n">uC0</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">beta_C1</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="o">-</span><span class="n">uC1</span> <span class="o">+</span> <span class="n">uC0</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="p">.</span><span class="mi">25</span><span class="p">,</span>
    <span class="n">beta_C2</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="o">-</span><span class="n">uC2</span> <span class="o">+</span> <span class="n">uC1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">beta_C2</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="o">-</span><span class="n">uC2</span> <span class="o">+</span> <span class="n">uC1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="p">.</span><span class="mi">25</span><span class="p">,</span>
    <span class="n">beta_C3</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="o">-</span><span class="n">uC3</span> <span class="o">+</span> <span class="n">uC2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">beta_C3</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="o">-</span><span class="n">uC3</span> <span class="o">+</span> <span class="n">uC2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="p">.</span><span class="mi">25</span><span class="p">,</span>
<span class="p">]</span>
</code></pre></div></div>

<p>We also need the minimum uptime constraints:</p>

\[\tag{Up-time}
\sum_{i=t}^{t + UT_j - 1} u_{j, i} \ge \alpha_{j,t} UT_j \ ,\qquad \forall\ t \in \{1,\ T - UT_j + 1\}\\
\sum_{i=t}^T u_{j, i} \ge \alpha_{j, t} (T - t + 1) \ ,\qquad \forall\ t \in \{T - UT_j + 2,\ T\}\]

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">generate_uptime_cons</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">t</span><span class="p">):</span>
    <span class="nb">sum</span> <span class="o">=</span> <span class="s">''</span>
    <span class="n">UT_j</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">(</span><span class="s">'UT_{j}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">j</span><span class="p">))</span>
    <span class="k">if</span> <span class="n">t</span> <span class="o">&lt;=</span> <span class="n">T</span> <span class="o">-</span> <span class="n">UT_j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">t</span> <span class="o">+</span> <span class="n">UT_j</span><span class="p">):</span>
            <span class="nb">sum</span> <span class="o">+=</span> <span class="s">'u{j}{i} +'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">j</span><span class="p">,</span> <span class="n">i</span><span class="o">=</span><span class="n">i</span><span class="p">)</span>
        <span class="nb">sum</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="nb">sum</span> <span class="o">+=</span> <span class="s">' &gt;= alpha_{j}{t} * UT_{j}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">j</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="n">t</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">T</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
            <span class="nb">sum</span> <span class="o">+=</span> <span class="s">'u{j}{k} +'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="o">=</span><span class="n">k</span><span class="p">)</span>
        <span class="nb">sum</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="nb">sum</span> <span class="o">+=</span> <span class="s">' &gt;= alpha_{j}{t} * (T - {t} + 1)'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">j</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="n">t</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">eval</span><span class="p">(</span><span class="nb">sum</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">MIP3_uptime_cons</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="p">[</span><span class="s">'A'</span><span class="p">,</span> <span class="s">'B'</span><span class="p">,</span> <span class="s">'C'</span><span class="p">]:</span>
    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">T</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
        <span class="n">cons</span> <span class="o">=</span> <span class="n">generate_uptime_cons</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="n">cons</span><span class="p">)</span>
        <span class="n">MIP3_uptime_cons</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">cons</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>alpha_A1 @ 3.0 &lt;= uA1 + uA2 + uA3
alpha_A2 @ 2.0 &lt;= uA2 + uA3
alpha_A3 @ 1.0 &lt;= uA3
alpha_B1 @ 2.0 &lt;= uB1 + uB2
alpha_B2 @ 2.0 &lt;= uB2 + uB3
alpha_B3 @ 1.0 &lt;= uB3
alpha_C1 @ 1.0 &lt;= uC1
alpha_C2 @ 1.0 &lt;= uC2
alpha_C3 @ 1.0 &lt;= uC3
</code></pre></div></div>

<p>And the minimum downtime constraints:</p>

\[\tag{Down-time}
\sum_{i=t}^{t + DT_j - 1} (1 - u_{j, i}) \ge \beta_{j,t} DT_j \ ,\qquad \forall\ t \in \{1,\ T - DT_j + 1\}\\
\sum_{i=t}^T (1 - u_{j, i}) \ge \beta_{j, t} (T - t + 1) \ ,\qquad \forall\ t \in \{T - DT_j + 2,\ T\}\]

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">generate_downtime_cons</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">t</span><span class="p">):</span>
    <span class="nb">sum</span> <span class="o">=</span> <span class="s">''</span>
    <span class="n">DT_j</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">(</span><span class="s">'DT_{j}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">j</span><span class="p">))</span>
    <span class="k">if</span> <span class="n">t</span> <span class="o">&lt;=</span> <span class="n">T</span> <span class="o">-</span> <span class="n">DT_j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">t</span> <span class="o">+</span> <span class="n">DT_j</span><span class="p">):</span>
            <span class="nb">sum</span> <span class="o">+=</span> <span class="s">'(1 - u{j}{i}) +'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">j</span><span class="p">,</span> <span class="n">i</span><span class="o">=</span><span class="n">i</span><span class="p">)</span>
        <span class="nb">sum</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="nb">sum</span> <span class="o">+=</span> <span class="s">' &gt;= beta_{j}{t} * DT_{j}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">j</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="n">t</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">T</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
            <span class="nb">sum</span> <span class="o">+=</span> <span class="s">'(1 - u{j}{k}) +'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="o">=</span><span class="n">k</span><span class="p">)</span>
        <span class="nb">sum</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="nb">sum</span> <span class="o">+=</span> <span class="s">' &gt;= beta_{j}{t} * (T - {t} + 1)'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">j</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="n">t</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">eval</span><span class="p">(</span><span class="nb">sum</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">MIP3_downtime_cons</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="p">[</span><span class="s">'A'</span><span class="p">,</span> <span class="s">'B'</span><span class="p">,</span> <span class="s">'C'</span><span class="p">]:</span>
    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">T</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
        <span class="n">cons</span> <span class="o">=</span> <span class="n">generate_downtime_cons</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="n">cons</span><span class="p">)</span>
        <span class="n">MIP3_downtime_cons</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">cons</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>beta_A1 @ 3.0 &lt;= 1.0 + -uA1 + 1.0 + -uA2 + 1.0 + -uA3
beta_A2 @ 2.0 &lt;= 1.0 + -uA2 + 1.0 + -uA3
beta_A3 @ 1.0 &lt;= 1.0 + -uA3
beta_B1 @ 1.0 &lt;= 1.0 + -uB1
beta_B2 @ 1.0 &lt;= 1.0 + -uB2
beta_B3 @ 1.0 &lt;= 1.0 + -uB3
beta_C1 @ 1.0 &lt;= 1.0 + -uC1
beta_C2 @ 1.0 &lt;= 1.0 + -uC2
beta_C3 @ 1.0 &lt;= 1.0 + -uC3
</code></pre></div></div>

<p>Finally, we need the logical constraints [1] to ensure that \(\alpha_{j,t} = 1\) only when the unit is scheduled to be switched on in slot \(t\) (i.e., \(u_{j, t-1} = 0\) and \(u_{j, t} = 1\)), and \(\beta_{j, t} = 1\) only when the unit is scheduled to be switched off in slot \(t\) (i.e., \(u_{j, t-1} = 1\) and \(u_{j, t} = 0\)).</p>

\[u_{j, t-1} - u_{j, t} + \alpha_{j, t} - \beta_{j, t} = 0\ ,\qquad \forall\ t\in T,\ j\in J \tag{Logical}\]

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">MIP3_logical_cons</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="p">[</span><span class="s">'A'</span><span class="p">,</span> <span class="s">'B'</span><span class="p">,</span> <span class="s">'C'</span><span class="p">]:</span>
    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">T</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
        <span class="n">cons</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">(</span><span class="s">'u{j}{t_1} - u{j}{t} + alpha_{j}{t} - beta_{j}{t} == 0'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">j</span><span class="p">,</span> <span class="n">t_1</span><span class="o">=</span><span class="n">t</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="n">t</span><span class="p">))</span>
        <span class="k">print</span><span class="p">(</span><span class="n">cons</span><span class="p">)</span>
        <span class="n">MIP3_logical_cons</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">cons</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1.0 + -uA1 + alpha_A1 + -beta_A1 == 0.0
uA1 + -uA2 + alpha_A2 + -beta_A2 == 0.0
uA2 + -uA3 + alpha_A3 + -beta_A3 == 0.0
0.0 + -uB1 + alpha_B1 + -beta_B1 == 0.0
uB1 + -uB2 + alpha_B2 + -beta_B2 == 0.0
uB2 + -uB3 + alpha_B3 + -beta_B3 == 0.0
0.0 + -uC1 + alpha_C1 + -beta_C1 == 0.0
uC1 + -uC2 + alpha_C2 + -beta_C2 == 0.0
uC2 + -uC3 + alpha_C3 + -beta_C3 == 0.0
</code></pre></div></div>

<p>Since we are ignoring the shutdown costs of the units, our objective remains the same as that in (MIP-2). Below is our final model:</p>

\[\text{minimize} \sum_{t\in T} \sum_{j \in J} c_j p_{j, t} + \alpha_{j, t} c_j^u\]

\[\text{s.t.}\quad P_{j, min} u_{j, t} \le p_{j, t} \le P_{j, max} u_{j, t}\quad \text{(Output Range)}\]

\[\sum_{j \in J} p_{j, t} \ge D_t\quad \text{(Demand)}\]

\[\alpha_{j, t} \le \frac{u_{j, t} - u_{j, t-1} + 1}{2},\ \alpha_{j, t} + 1 \ge \frac{u_{j, t} - u_{j, t-1} + 1}{2} + .25 \quad \text{(Startup)}\]

\[\sum_{i=t}^{t + UT_j - 1} u_{j, i} \ge \alpha_{j,t} UT_j \ ,\ \forall\ t \in \{1,\ T - UT_j + 1\} \quad \text{(Uptime)}\]

\[\sum_{i=t}^T u_{j, i} \ge \alpha_{j, t} (T - t + 1) \ ,\ \ \forall\ t \in \{T - UT_j + 2,\ T\} \quad \text{(Uptime)}\]

\[\sum_{i=t}^{t + DT_j - 1} (1 - u_{j, i}) \ge \beta_{j,t} DT_j \ ,\ \forall\ t \in \{1,\ T - DT_j + 1\} \quad \text{(Downtime)}\]

\[\sum_{i=t}^T (1 - u_{j, i}) \ge \beta_{j, t} (T - t + 1) \ ,\ \forall\ t \in \{T - DT_j + 2,\ T\}\quad \text{(Downtime)}\]

\[u_{j, t-1} - u_{j, t} + \alpha_{j, t} - \beta_{j, t} = 0\ ,\qquad \forall\ t\in T,\ j\in J \quad \text{(Logical)}\]

\[u_{j, t} \in \{0, 1\} \ \forall\ j, t\\
     \alpha_{j, t} \in \{0, 1\} \ \forall\ j, t\\
     \beta_{j, t} \in \{0, 1\} \ \forall\ j, t \tag{MIP-3}\]

<p>We now solve (MIP-3) with <code class="language-plaintext highlighter-rouge">cvxpy</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">MIP3_obj</span> <span class="o">=</span> <span class="n">MIP2</span><span class="p">.</span><span class="n">objective</span>
<span class="n">MIP3_cons</span> <span class="o">=</span> <span class="n">MIP2</span><span class="p">.</span><span class="n">constraints</span> <span class="o">+</span> <span class="n">MIP3_uptime_cons</span> <span class="o">+</span> <span class="n">MIP3_downtime_cons</span> <span class="o">+</span> <span class="n">MIP3_logical_cons</span>
<span class="c1"># + MIP3_shutdown_cons
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">MIP3</span> <span class="o">=</span> <span class="n">cp</span><span class="p">.</span><span class="n">Problem</span><span class="p">(</span><span class="n">MIP3_obj</span><span class="p">,</span> <span class="n">MIP3_cons</span><span class="p">)</span>
<span class="n">MIP3</span><span class="p">.</span><span class="n">solve</span><span class="p">();</span>
<span class="n">summary_MIP3</span> <span class="o">=</span> <span class="n">get_result_summary</span><span class="p">(</span><span class="n">MIP3</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">summary_MIP3</span><span class="p">[</span><span class="s">'status'</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'optimal'
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">summary_MIP3</span><span class="p">[</span><span class="s">'optimal_value'</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>7100.0
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">prettify</span><span class="p">(</span><span class="n">summary_MIP3</span><span class="p">[</span><span class="s">'optimal_solution'</span><span class="p">])</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>variable</th>
      <th>value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>alpha_A1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>alpha_A2</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>alpha_A3</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>alpha_B1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>alpha_B2</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>5</th>
      <td>alpha_B3</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>6</th>
      <td>alpha_C1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>7</th>
      <td>alpha_C2</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>8</th>
      <td>alpha_C3</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>9</th>
      <td>beta_A1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>10</th>
      <td>beta_A2</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>11</th>
      <td>beta_A3</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>12</th>
      <td>beta_B1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>13</th>
      <td>beta_B2</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>14</th>
      <td>beta_B3</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>15</th>
      <td>beta_C1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>16</th>
      <td>beta_C2</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>17</th>
      <td>beta_C3</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>18</th>
      <td>pA1</td>
      <td>150.0</td>
    </tr>
    <tr>
      <th>19</th>
      <td>pA2</td>
      <td>250.0</td>
    </tr>
    <tr>
      <th>20</th>
      <td>pA3</td>
      <td>200.0</td>
    </tr>
    <tr>
      <th>21</th>
      <td>pB1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>22</th>
      <td>pB2</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>23</th>
      <td>pB3</td>
      <td>-0.0</td>
    </tr>
    <tr>
      <th>24</th>
      <td>pC1</td>
      <td>-0.0</td>
    </tr>
    <tr>
      <th>25</th>
      <td>pC2</td>
      <td>50.0</td>
    </tr>
    <tr>
      <th>26</th>
      <td>pC3</td>
      <td>-0.0</td>
    </tr>
    <tr>
      <th>27</th>
      <td>uA1</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>28</th>
      <td>uA2</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>29</th>
      <td>uA3</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>30</th>
      <td>uB1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>31</th>
      <td>uB2</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>32</th>
      <td>uB3</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>33</th>
      <td>uC1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>34</th>
      <td>uC2</td>
      <td>1.0</td>
    </tr>
    <tr>
      <th>35</th>
      <td>uC3</td>
      <td>0.0</td>
    </tr>
  </tbody>
</table>
</div>

<p>As it turns out, the optimal cost of scheduling the three units over the given planning horizon remains unchanged at <mark>$7100</mark>. What is interesting is that we are able to satisfy multiple additional constraints at the same total cost as MIP2! This fact is due to the (simplified) structure of our specific problem. In a real-life scenario, adding constraints can lead to increased total cost. Nevertheless, discussing the above porblem gives us insight into how MIP can be used to model and solve similar, larger problems at scale.</p>

<h1 id="references">References</h1>

<p>[1] https://ntnuopen.ntnu.no/ntnu-xmlui/bitstream/handle/11250/298917/UnitCommitment.pdf?sequence=3</p>

<p>[2] https://www.youtube.com/watch?v=jS15dU_422Q</p>]]></content><author><name>Ayush Bharadwaj</name></author><summary type="html"><![CDATA[The Unit Commitment Problem (UCP) [1] in power systems is the problem of scheduling the optimal number of power generating units (or simply units) to meet the total demand in each time period (or slot) of a planning horizon. The UCP is an optimization problem that aims to minmize the running costs, startup costs and shutdown costs of the units while satisfying constraints that guarantee appropriate operating conditions for the units.]]></summary></entry><entry><title type="html">Verifying Neural Nertwork Robustness Using Linear Programming</title><link href="http://localhost:4000/verifying-neural-nertwork-robustness-using-linear-programming/" rel="alternate" type="text/html" title="Verifying Neural Nertwork Robustness Using Linear Programming" /><published>2023-05-17T00:00:00-07:00</published><updated>2023-05-17T00:00:00-07:00</updated><id>http://localhost:4000/verifying-neural-nertwork-robustness-using-linear-programming</id><content type="html" xml:base="http://localhost:4000/verifying-neural-nertwork-robustness-using-linear-programming/"><![CDATA[<h1 id="verifying-neural-network-robustness-with-linear-programming">Verifying Neural Network Robustness with Linear Programming</h1>

<h2 id="introduction">Introduction</h2>
<p><em>Robustness</em> is a desirable property in a neural network. Informally, robustness can be described as ‘resilience to perturbations in the input’. Said differently, a neural network is robust if small changes to the input produce small or no changes to the output. In particular, if the network is a classifier, robustness means that inputs close to each other should be assigned the same class by the network.</p>

<p>Ensuring robustness of networks is important because neural networks are vulnerable to adversarial examples produced by small perturbations in the input. E.g. small changes in the image of a chihuahua can lead a network to <a href="https://www.freecodecamp.org/news/chihuahua-or-muffin-my-search-for-the-best-computer-vision-api-cbda4d6b425d/">classify it as a chocolate chip muffin</a>.</p>

<p>In the subsequent sections, we will make the notion of robustness more precise. We will then explore how we can verify the robustness of a <em>trained</em> neural network using a very popular idea from mathematical optimization, viz. <em>Linear Programming</em>.</p>

<h2 id="problem-setup">Problem setup</h2>

<p>Suppose we are given a fully connected, feed forward <em>K-class classifier</em> neural network that was trained using the ReLU activation function. Note that the weights and biases of this network are fixed. Suppose the network accepts real vectors of length $n$ as inputs and let $F: \mathbb{R}^n \longrightarrow {1, 2, …, K}$ represent the network classification function. Then we can write $F$ as a composition of a <em>network output function</em> and a <em>labeling function</em> as described below.</p>

<p>Let $W_i$ and $b_i$ represent the weight matrix and the bias vector of the $i$th layer respectively. Then we can write the output of the $i$th layer recursively as follows:</p>

\[\begin{equation} \label{eq_nn_output_recursive}
    z_{i} = \phi(W_{i} z_{i-1} + b_{i}) = \phi \circ \omega_i(z_{i - 1})
\end{equation}\]

<p>where $\omega_i$ represents the affine transformation corresponding to the $i$th layer and $\phi$ represents the “vectorized” version of the activation function, i.e. $\phi(x_1, …, x_n) = (\phi(x_1), …, \phi(x_n))$. The network output function $f_W: \mathbb{R}^n \longrightarrow \mathbb{R}^K$ is defined as:</p>

\[\begin{equation}\label{eq_output_func}
    f_W(x) = \phi \circ \omega_{H+1} \circ \dots \circ \phi \circ \omega_1(x)
\end{equation}\]

<p>where $H$ is the number of hidden layers in the network. The labeling function $\pi: \mathbb{R}^K \longrightarrow {1, 2, …, K}$ is defined as:</p>

\[\begin{equation}\label{eq_pi}
\pi(y) = \underset{i = 1, ... , K}{\text{arg max}}\ y_i
\end{equation}\]

<p>where $K$ is the number of classes. For a given input $x_0$, we have:</p>

\[\begin{equation}\label{eq_l0}
    F(x_0) = \pi(f_W(x_0)) = l_0
\end{equation}\]

<p>with $l_0$ is the class label assigned to $x_0$ by the network. It is worth noting that we can use a different labeling function here, e.g. <em>softmax</em>, without affecting our analysis as long as the labeling function of choice is non-decreasing.</p>

<p><img src="images/pi_fw.png" width="350" length="350" align="center" /></p>

<h3 id="polyhedron-induced-by-a-class-label">Polyhedron induced by a class label</h3>

<p>Suppose our classifier network has $K$ class labels. The co-domain $\mathbb{R}^K$ of the output function can be partitioned into $K$ polyhedra. Consider the half-space $\mathcal{H}_{l &gt; i}$ of all the points in $\mathbb{R}^K$ where the $l$th component is greater than the $i$th component.</p>

<p>\begin{equation}\label{eq_half_plane}
    \mathcal{H}_{l &gt; i} := {y \in \mathbb{R}^K : y_l &gt; y_i}
\end{equation}</p>

<p>Suppose we fix $l$ and take the intersection of all half-spaces $\mathcal{H}_{l &gt; i}$, $i \ne l$. We get the set $S_l$ of points where the $l$th component is greater than every other component. (For simplicity, we assume that there are no ties among the components of $y$, i.e. $i \ne j \implies y_i \ne y_j$.)</p>

<p>\begin{equation}\label{eq_S_l}
    S_l := \bigcap_{i \ne l} \mathcal{H}_{l &gt; i} = {y \in \mathbb{R}^K: y_l &gt; y_i, i \ne l}
\end{equation}</p>

<p>Notet that:</p>
<ul>
  <li>$S_l$ is an intersection of half-spaces and is therefore a polyhedron.</li>
  <li>$S_i \bigcap S_j = \emptyset$ for $i \ne j$.</li>
  <li>${S_1, …, S_K}$ forms a partition of $\mathbb{R}^K$.</li>
</ul>

<p><strong>Definition</strong> <strong><em>[Polyhedron induced by a class label].</em></strong> <em>Suppose we are given a K-class classifier network and a class label $l \in {1, 2, …, K}$. Then we say that the set</em></p>

\[S_{l} = \{y \in \mathbb{R}^K: y_{l} &gt; y_i, i \ne l\}\]

<p><em>is the polyhedron induced by the class label $l$.</em></p>

<p><strong>Remark.</strong> The output function maps an input to the corresponding induced polyhedron. Let $x_0 \in \mathbb{R}^n$ be an input to a classifier network with classification function $F$ and output function $f_W$. Then,</p>

\[\begin{equation}
     F(x_0) = l_0 \iff f_W(x_0) \subset S_{l_0}
\end{equation}\]

<p>In other words, the network assigns the class label $l_0$ to the input $x_0$ if and only if $f_W(x_0)$ lies inside the polyhedron induced by $l_0$.
<img src="images/pi_maps_Si_to_i.png" width="500" length="500" align="center" /></p>

<h3 id="formalizing-robustness-for-classifier-networks">Formalizing robustness for classifier networks</h3>
<p>Recall that we say a classifier network is robust if small perturbations to an input do not affect its classification. Let us define a set that contains all “small” perturbations of the reference input $x_0$. We will call this set the <em>region of interest</em>. For our purposes, we will choose this set to be the $\epsilon$-ball around the refence input $x_0$.</p>

<p><strong>Definition</strong> <strong><em>[Region of inerest around an input].</em></strong> <em>Let $x_0 \in \mathbb{R}^n$ be a reference input. Then the set</em></p>

\[\mathcal{B}_{\infty}(x_0, \epsilon) = \{x: \parallel x - x_0 \parallel_{\infty} \le \epsilon \}\]

<p><em>is called the region of interest around $x_0$.</em></p>

<p><strong>Definition</strong> <strong><em>[Safety set induced by an input].</em></strong> <em>Suppose the network assigns the class label $l_0$ to a reference input $x_0$. Then $S_{l_0}$ is called the safety set induced by $x_0$.</em></p>

<p>For our network to be robust, it must assign the same class to all points in $\mathcal{B}<em>{\infty}(x_0, \epsilon)$ i.e. $F(x) = F(x_0) = l_0$ for all $x \in \mathcal{B}</em>{\infty}(x_0, \epsilon)$. This is equivalent to saying $f_W(x) \in S_{l_0}$ for all $x \in \mathcal{B}_{\infty}(x_0, \epsilon)$. In other words, we want the image of the region of interest to lie inside the safety set induced by $x_0$. The verification problem then reduces to asking the below set membership question:</p>

\[\begin{equation*}
    f_W(\mathcal{B}_{\infty}(x_0, \epsilon)) \stackrel{?}{\subset} S_{l_0}
\end{equation*}\]

<p>We are now ready to give a formal definition of robustness.</p>

<p><strong>Definition</strong> <strong><em>[$\epsilon$-robustness].</em></strong> <em>We say that a neural network is $\epsilon$-robust at $x_0$ if and only if</em></p>

\[\begin{equation*}
    f_W(\mathcal{B}_\infty (x_0, \epsilon)) \subset S_{l_0}
\end{equation*}\]

<p><strong>Definition</strong> <strong><em>[Adversarial example].</em></strong> <em>A point $\tilde{x} \in \mathbb{R}^n$ is said to be an adversarial example if</em></p>

\[\begin{equation*}
    \tilde{x} \in \mathcal{B}_\infty (x_0, \epsilon),\ \ f_W(\tilde{x}) \notin S_{l_0}
\end{equation*}\]

<p>The two-class classifier network shown in the figure below is not $\epsilon$-robust at $x_0$ since $\tilde{x}$ is an adversarial example.</p>

<p><img src="images/adversarial_example.png" width="600" length="600" align="center" /></p>

<p>It is worth noting that a network is $\epsilon$-robust if and only if an adversarial example does not exist.</p>

<h2 id="verification-as-an-optimization-problem">Verification as an optimization problem</h2>
<p>Recall that, given a trained $H$-hidden-layer neural network with the output function $f_W$, a reference input point $x_0$ and a positive $\epsilon$, we want to answer the following question:</p>

<p>Does the image of the region of inteterest lie inside the safety set?
\(\begin{equation*}
    f_W(\mathcal{B}_\infty(x_0, \epsilon)) \stackrel{?}{\subset} S_{l_0}
\end{equation*}\)</p>

<p>Or, equivalently, does there exist an adversarial example?
\begin{equation<em>}
    \stackrel{?}{\exists} \tilde{x} \in \mathcal{B}_\infty(x_0, \epsilon)\ s.\ t.\ f_W(\tilde{x}) \notin S_{l_0}
\end{equation</em>}</p>

<p>which is the same as solving the following satisfiability problem in optimization</p>

<p>\begin{equation}\label{eq_opt1}
\begin{split}
    &amp;\text{Find}\ z_0<br />
    \text{s.t.}\ z_0 &amp;\in \mathcal{B}<em>\infty(x_0, \epsilon)<br />
    z</em>{H + 1} &amp;= f_W(z_0)<br />
    z_{H+1} &amp;\notin S_{l_0}
\end{split}
\end{equation}</p>

<p>where $z_0 \in \mathbb{R}^n$ and $z_{H+1} \in \mathbb{R}^K$ are the decision variables. Now, let $\tilde{z_i}$ denote the pre- and $z_i$ denote the post-activation output of the $i$th layer of the network. In other words</p>

<p>\begin{equation}\label{eq_z_i_z_i_hat}
    \begin{split}
        \tilde{z_i} &amp;= W_i z_{i -1} + b_i ,\qquad i = 1, …, H + 1<br />
        z_i &amp;= ReLU(\tilde{z_i}), \qquad i = 1, …, H + 1
    \end{split}
\end{equation}</p>

<p>Then we can replace the constraint $z_{H+1} = f_W(z_0)$ in (\ref{eq_opt1}) with the equations (\ref{eq_z_i_z_i_hat}). This gives us the following equivalent form of the satisfiability problem</p>

<p>\begin{align}
    &amp;\text{Find}\ z_0<br />
    \text{s.t.}\ z_0 &amp;\in \mathcal{B}<em>\infty(x_0, \epsilon) \label{eq_region_const}<br />
    \tilde{z_i} &amp;= W_i z</em>{i -1} + b_i \qquad i = 1, …, H + 1 \label{eq_aff_const}<br />
        z_i &amp;= ReLU(\tilde{z_i})  \qquad i = 1, …, H + 1 \label{eq_relu_const}<br />
        z_{H+1} &amp;\notin S_{l_0} \label{eq_safety_set_const}
\end{align}</p>

<p>where $z_0, \tilde{z_1}, z_1, \tilde{z_2}, z_2, …, \tilde{z}<em>{H+1}, z</em>{H+1}$ are the decision variables. We will refer to (\ref{eq_region_const}) as the <em>region of interest constraint</em>, (\ref{eq_aff_const}) as the <em>affine constraint</em>, (\ref{eq_relu_const}) as the <em>ReLU constraint</em>, and (\ref{eq_safety_set_const}) as the <em>safety set constraint</em>. We will sometimes refer to (\ref{eq_aff_const}) and (\ref{eq_relu_const}) together as the <em>network constraint</em> and write it as $z_{H+1} = f_W(z_0)$.</p>

<p>Note that if the above optimization problem is feasible then our network is not robust. Conversely, if the problem is infeasible then our network is robust. Also note that the above problem is not a convex optimization problem. This is because, the ReLU and safety set constraints are not convex. This non-convexity of constraints makes it hard to solve the above optimization problem in its current form. Next, we will replace these non-convex constraints with their convex formulations / approximations.</p>

<h3 id="convexifying-the-relu-constraint">Convexifying the ReLU constraint.</h3>

<p>Note that $f_W$ is not a convex function. However, we know that $f_W$ is <em>piece-wise affine</em>. Suppose we can find a convex set $\chi’ \subset \mathbb{R}^n$, such that $f_W$ is affine on $\chi’$. Then, we can replace the network constraint constraint $z_{H+1} = f_W(z_0)$ with the following convex approximation:</p>

<p>\begin{equation}\label{eq_network_const_aff}
    z_{H+1} = f_W|_{\chi’}(z_0) 
\end{equation}</p>

<table>
  <tbody>
    <tr>
      <td>where $f_W</td>
      <td><em>{\chi’}$ is the restriction of $f_W$ to $\chi’$. But how do we even begin to look for such a $\chi’$? As a starting point, it is helpful to note that we want $\chi’ \bigcap \mathcal{B}</em>\infty(x_0, \epsilon)$ to be non-empty. This is to ensure that (\ref{eq_network_const_aff}) above does not conflict with (\ref{eq_region_const}). Said differently, we want $\chi’$ to contain $x_0$ as well as points that are “close” to $x_0$. We will use this idea to find the desired $\chi’$.</td>
    </tr>
  </tbody>
</table>

<p>Observe that as our reference input $x_0$ propagates through the network, it causes some neurons to be “activated” in each layer while others remain inactive. For a given input this activation pattern is fixed. Now, the main idea is that <em>points that are close to $x_0$ are likely to produce the same activation pattern as $x_0$</em>. So, it might be useful to look for a set that contains all inputs that produce the same activation pattern as $x_0$. Using the notation introduced in (\ref{eq_z_i_z_i_hat}), the pre- and post-activation outputs of the $i$th layer produced by our reference input $x_0$ are</p>

<p>\begin{equation<em>}
    \begin{split}
        \tilde{x}_i &amp;= W_i {x}_{i-1} + b_i ,\qquad i = 1, …, H + 1<br />
        {x}_i &amp;= ReLU(\tilde{x}_i) ,\qquad i = 1, …, H + 1<br />
    \end{split}
\end{equation</em>}</p>

<p>We say that the $j$th neuron in the $i$th layer is <em>activated</em> by the reference input $x_0$ if the $j$th component of $x_i$ is positive, i.e. $(x_i)_j &gt; 0$. The activation status of the $j$th neuron in the $i$th layer can be described by a binary constant</p>

<p>\begin{equation<em>}
    \delta_{i,j} =
    \begin{cases}
        1 \quad\text{if}\ (\tilde{x}_i)_j &gt; 0<br />
        0 \quad\text{if}\ (\tilde{x}_i)_j \le 0
    \end{cases}
\end{equation</em>}</p>

<p>The activation pattern of the $i$th layer can then be expressed succinctly by the following diagonal matrix</p>

<p>\begin{equation<em>}
    \Delta_i :=
    \begin{pmatrix}
        \delta_{i,1} &amp; 0 &amp; 0 &amp; 0 &amp; 0<br />
        0 &amp; \delta_{i,2} &amp; 0 &amp; 0 &amp; 0<br />
        \vdots &amp; \vdots &amp; \vdots &amp; \vdots &amp; \vdots<br />
        0 &amp; 0 &amp; 0 &amp; 0 &amp; \delta_{i,d_i}<br />
    \end{pmatrix} 
\end{equation</em>}</p>

<p>where $d_i$ is the number of neurons in the $i$th layer. Note that the linear operator $\Delta_i: \mathbb{R}^{d_i} \longrightarrow \mathbb{R}^{d_i}$ is nothing but a projection map. Now, recall the definition of the network output function $f_W$ given in (\ref{eq_output_func}) where $\phi$ is chosen to be $ReLU$. Suppose we were to replace the composition $\phi \circ \omega_i$ with the composition $\Delta_i \circ \omega_i$ in (\ref{eq_output_func}). The resulting output function, $f_{W_0}$, is given by</p>

<p>\begin{equation<em>}\label{eq_f_W_0}
    f_{W_0} = \Delta_{H+1} \circ \omega_{H+1} \circ \dots \circ \Delta_1 \circ \omega_1
\end{equation</em>}</p>

<p>We make some important observations about $f_{W_0}$.</p>

<ul>
  <li>$f_{W_0}$ is an affine function</li>
  <li>$f_{W_0}(z) = f_W(z)$ for every $z$ that produces the same activation pattern as $x_0$.</li>
</ul>

<p>The first point follows from the fact that $f_{W_0}$ is a composition of affine functions. The second point follows from the fact that, in computing the network output, $f_{W_0}$ only considers neurons that were activated by the reference input $x_0$ and ignores all other neurons (do you see why?). From the above observations, it seems that a good candidate for $\chi’$ may be:</p>

<p>\begin{equation<em>}
\begin{split}
     \chi’ &amp;= {z \in \mathbb{R}^n : z\ \text{produces the same activation pattern as } x_0 }<br />
     &amp;= {z \in \mathbb{R}^n: f_W(z) = f_{W_0}(z)}
\end{split}
\end{equation</em>}</p>

<p>So, finding $\chi’$ simply reduces to solving the equation $f_W(z) = f_{W_0}(z)$, i.e.</p>

<p>\begin{equation<em>}
    \phi \circ \omega_{H+1} \circ \dots \circ \phi \circ \omega_1(z) = \Delta_{H+1} \circ \omega_{H+1} \circ \dots \circ \Delta_1 \circ \omega_1(z)
\end{equation</em>}</p>

<p>which can be written as</p>

<p>\begin{equation<em>}
    \phi \circ \omega_i (z_{i-1}) = \Delta_i \circ \omega_i (z_{i - 1})\ ,\ i = 1, …, H+1
\end{equation</em>}</p>

<p>which is equivalent to solving for $z_0, z_1, …, z_{H+1}$ in</p>

<p>\begin{equation}\label{eq_ReLU_equals_Delta}
    ReLU(W_i z_{i-1} + b_i) = \Delta_i (W_i z_{i-1} + b_i)\ ,\ i = 1, …, H+1
\end{equation}</p>

<p>Solving (\ref{eq_ReLU_equals_Delta}) directly is hard. Fortunately, (\ref{eq_ReLU_equals_Delta}) has the below equivalent affine formulation.</p>

<p>\begin{equation}\label{eq_affine_equiv}
     (2 \Delta_i - I)(W_i z_{i -1} + b_i) \ge 0\ ,\ i = 1, …, H+1
 \end{equation}</p>

<p>It can be shown that every $z_0, z_1, …, z_{H+1}$ that is a solution to (\ref{eq_ReLU_equals_Delta}) is also a solution to (\ref{eq_affine_equiv}) and vice-versa (see proof in appendix). Moreover, for any $z_i$ that satisfies (\ref{eq_ReLU_equals_Delta}), we have</p>

<p>\begin{equation}
    ReLU(\tilde{z}_i) = \Delta_i \tilde{z}_i
\end{equation}</p>

<p>Hence we conclude that the ReLU constraint (\ref{eq_relu_const}) can be approximated by the following <em>convex</em> constraints</p>

<p>\begin{equation}\label{eq_convexified_relu}
\begin{split}
    (2 \Delta_i - I)(W_i z_{i -1} + b_i) &amp;\ge 0 <br />
    z_i = \Delta_i &amp;\tilde{z}_{i-1}
\end{split}
\end{equation}</p>

<h3 id="convexifying-the-safety-set-constraint">Convexifying the safety set constraint</h3>

<p>Note that the safety set constraint (\ref{eq_safety_set_const}) imples that if a feasible solution to our satisfiability problem exists then it must lie outside $S_{l_0}$, i.e. it must lie inside $\mathbb{R}^K \backslash S_{l_0}$. Recall that $S_{l_0}$ is the polyhedron induced by the class label $l_0$. In other words, $S_{l_0}$ is the set of points where the largest component is at index $l_0$. Therefore, $\mathbb{R}^K \backslash S_{l_0}$ is the set of points where the largest component is at some index $l’ \ne l_0$.</p>

<p>Instead of looking everywhere inside $\mathbb{R}^K \backslash S_{l_0}$ (which is a non-convex set), we start by looking in the region where the component at index $l’$ is greater than the component at index $l_0$. This set is simply the half space $\mathcal{H}_{l_0 &lt; l’}$. We can now replace (\ref{eq_safety_set_const}) with the below convex constraint:</p>

<p>\begin{equation}
    z_{H+1} \in \mathcal{H}_{l_0 &lt; l’}
\end{equation}</p>

<p>Repeating the above process for each $l’ \ne l_0$ gives us $K-1$ convex problems that can be solved easily one at a time.</p>

<h2 id="putting-it-all-together">Putting it all together</h2>
<p>We now write down our original (non-convex) satisfiability problem</p>

<p>\begin{gather<em>}
    \text{Find}\ z_0<br />
    \text{s.t.}\ z_0 \in \mathcal{B}_\infty(x_0, \epsilon)<br />
    \tilde{z_i} = W_i z_{i -1} + b_i \qquad &amp;i = 1, …, H + 1 \ \tag{Non-Conv}
        z_i = ReLU(\tilde{z_i})  \qquad &amp;i = 1, …, H + 1 <br />
        z_{H+1} \notin S_{l_0}
\end{gather</em>}</p>

<p>and its convex modification</p>

<p>\begin{gather<em>}
    \text{Find}\ z_0<br />
    \text{s.t.}\ z_0 \in \mathcal{B}_\infty(x_0, \epsilon)<br />
    \tilde{z_i} = W_i z_{i -1} + b_i \qquad &amp;i = 1, …, H + 1 \ \tag{Conv}
        (2 \Delta_i - I)(W_i z_{i -1} + b_i) \ge 0 \qquad &amp;i = 1, …, H + 1<br />
        z_i = \Delta_i \tilde{z}_{i-1}  \qquad &amp;i = 1, …, H + 1 <br />
        z_{H+1} \in \mathcal{H}_{l_0 &lt; l’}
\end{gather</em>}</p>

<p>where (Conv) must be solved $K -1$ times with varying $l’$. Note that (Conv) is a convex (in fact affine) problem and can be easily solved with the help of any Linear Programming solver.</p>

<h2 id="final-note">Final Note</h2>]]></content><author><name>Ayush Bharadwaj</name></author><summary type="html"><![CDATA[Verifying Neural Network Robustness with Linear Programming Introduction Robustness is a desirable property in a neural network. Informally, robustness can be described as ‘resilience to perturbations in the input’. Said differently, a neural network is robust if small changes to the input produce small or no changes to the output. In particular, if the network is a classifier, robustness means that inputs close to each other should be assigned the same class by the network. Ensuring robustness of networks is important because neural networks are vulnerable to adversarial examples produced by small perturbations in the input. E.g. small changes in the image of a chihuahua can lead a network to classify it as a chocolate chip muffin.]]></summary></entry><entry><title type="html">Test Post</title><link href="http://localhost:4000/test/" rel="alternate" type="text/html" title="Test Post" /><published>2023-05-08T00:00:00-07:00</published><updated>2023-05-08T00:00:00-07:00</updated><id>http://localhost:4000/test</id><content type="html" xml:base="http://localhost:4000/test/"><![CDATA[<p>This is using the <code class="language-plaintext highlighter-rouge">$$ $$</code> environment: \(\mathbb{R}^n\)</p>

<p>This is using equation environment</p>

<p>\begin{equation}
	\text{min} \mathbb{R}^n
\end{equation}</p>

\[u_{j, t} :=
\begin{cases}
   1\\
   0
\end{cases}\]

\[P_{j, min} \le p_{j, t} \le P_{j, max}\ \text{(Output Range)}\\
\sum_{j \in J} p_{j, t} \ge D_t\ \text{(Demand)}\]

<p>Manually referenced (boop)</p>]]></content><author><name>Ayush Bharadwaj</name></author><summary type="html"><![CDATA[This is using the $$ $$ environment: \(\mathbb{R}^n\) This is using equation environment \begin{equation} \text{min} \mathbb{R}^n \end{equation} \[u_{j, t} := \begin{cases} 1\\ 0 \end{cases}\] \[P_{j, min} \le p_{j, t} \le P_{j, max}\ \text{(Output Range)}\\ \sum_{j \in J} p_{j, t} \ge D_t\ \text{(Demand)}\] Manually referenced (boop)]]></summary></entry></feed>